
vl53l1x_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08007ad0  08007ad0  00017ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000694  20000000  08007da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001fc  20000694  08008434  00020694  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000890  08008434  00020890  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020694  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b6c1  00000000  00000000  000206bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003693  00000000  00000000  0004bd7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f1b4  00000000  00000000  0004f411  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e50  00000000  00000000  0005e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001340  00000000  00000000  0005f418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000090fe  00000000  00000000  00060758  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000084b2  00000000  00000000  00069856  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00071d08  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033d8  00000000  00000000  00071d84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000694 	.word	0x20000694
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ab8 	.word	0x08007ab8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000698 	.word	0x20000698
 800014c:	08007ab8 	.word	0x08007ab8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_uldivmod>:
 8000a80:	b953      	cbnz	r3, 8000a98 <__aeabi_uldivmod+0x18>
 8000a82:	b94a      	cbnz	r2, 8000a98 <__aeabi_uldivmod+0x18>
 8000a84:	2900      	cmp	r1, #0
 8000a86:	bf08      	it	eq
 8000a88:	2800      	cmpeq	r0, #0
 8000a8a:	bf1c      	itt	ne
 8000a8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a90:	f04f 30ff 	movne.w	r0, #4294967295
 8000a94:	f000 b97a 	b.w	8000d8c <__aeabi_idiv0>
 8000a98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa0:	f000 f806 	bl	8000ab0 <__udivmoddi4>
 8000aa4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aac:	b004      	add	sp, #16
 8000aae:	4770      	bx	lr

08000ab0 <__udivmoddi4>:
 8000ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	460e      	mov	r6, r1
 8000ab8:	4604      	mov	r4, r0
 8000aba:	9d08      	ldr	r5, [sp, #32]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d150      	bne.n	8000b62 <__udivmoddi4+0xb2>
 8000ac0:	428a      	cmp	r2, r1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	d96c      	bls.n	8000ba0 <__udivmoddi4+0xf0>
 8000ac6:	fab2 fe82 	clz	lr, r2
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d00b      	beq.n	8000ae8 <__udivmoddi4+0x38>
 8000ad0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ad4:	fa01 f60e 	lsl.w	r6, r1, lr
 8000ad8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000adc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ae0:	ea4c 0c06 	orr.w	ip, ip, r6
 8000ae4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ae8:	0c3a      	lsrs	r2, r7, #16
 8000aea:	fbbc f9f2 	udiv	r9, ip, r2
 8000aee:	b2bb      	uxth	r3, r7
 8000af0:	fb02 cc19 	mls	ip, r2, r9, ip
 8000af4:	fb09 fa03 	mul.w	sl, r9, r3
 8000af8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000afc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000b00:	45b2      	cmp	sl, r6
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x6a>
 8000b04:	19f6      	adds	r6, r6, r7
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b0a:	f080 8125 	bcs.w	8000d58 <__udivmoddi4+0x2a8>
 8000b0e:	45b2      	cmp	sl, r6
 8000b10:	f240 8122 	bls.w	8000d58 <__udivmoddi4+0x2a8>
 8000b14:	f1a9 0902 	sub.w	r9, r9, #2
 8000b18:	443e      	add	r6, r7
 8000b1a:	eba6 060a 	sub.w	r6, r6, sl
 8000b1e:	fbb6 f0f2 	udiv	r0, r6, r2
 8000b22:	fb02 6610 	mls	r6, r2, r0, r6
 8000b26:	fb00 f303 	mul.w	r3, r0, r3
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x98>
 8000b34:	19e4      	adds	r4, r4, r7
 8000b36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3a:	f080 810b 	bcs.w	8000d54 <__udivmoddi4+0x2a4>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	f240 8108 	bls.w	8000d54 <__udivmoddi4+0x2a4>
 8000b44:	3802      	subs	r0, #2
 8000b46:	443c      	add	r4, r7
 8000b48:	2100      	movs	r1, #0
 8000b4a:	1ae4      	subs	r4, r4, r3
 8000b4c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d062      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b54:	2300      	movs	r3, #0
 8000b56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b5a:	602c      	str	r4, [r5, #0]
 8000b5c:	606b      	str	r3, [r5, #4]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d907      	bls.n	8000b76 <__udivmoddi4+0xc6>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d055      	beq.n	8000c16 <__udivmoddi4+0x166>
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000b70:	4608      	mov	r0, r1
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	f040 808f 	bne.w	8000c9e <__udivmoddi4+0x1ee>
 8000b80:	42b3      	cmp	r3, r6
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xda>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80fc 	bhi.w	8000d82 <__udivmoddi4+0x2d2>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	46b4      	mov	ip, r6
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d040      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba0:	b912      	cbnz	r2, 8000ba8 <__udivmoddi4+0xf8>
 8000ba2:	2701      	movs	r7, #1
 8000ba4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ba8:	fab7 fe87 	clz	lr, r7
 8000bac:	f1be 0f00 	cmp.w	lr, #0
 8000bb0:	d135      	bne.n	8000c1e <__udivmoddi4+0x16e>
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	1bf6      	subs	r6, r6, r7
 8000bb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000bba:	fa1f f887 	uxth.w	r8, r7
 8000bbe:	fbb6 f2fc 	udiv	r2, r6, ip
 8000bc2:	fb0c 6612 	mls	r6, ip, r2, r6
 8000bc6:	fb08 f002 	mul.w	r0, r8, r2
 8000bca:	0c23      	lsrs	r3, r4, #16
 8000bcc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000bd0:	42b0      	cmp	r0, r6
 8000bd2:	d907      	bls.n	8000be4 <__udivmoddi4+0x134>
 8000bd4:	19f6      	adds	r6, r6, r7
 8000bd6:	f102 33ff 	add.w	r3, r2, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x132>
 8000bdc:	42b0      	cmp	r0, r6
 8000bde:	f200 80d2 	bhi.w	8000d86 <__udivmoddi4+0x2d6>
 8000be2:	461a      	mov	r2, r3
 8000be4:	1a36      	subs	r6, r6, r0
 8000be6:	fbb6 f0fc 	udiv	r0, r6, ip
 8000bea:	fb0c 6610 	mls	r6, ip, r0, r6
 8000bee:	fb08 f800 	mul.w	r8, r8, r0
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	d907      	bls.n	8000c0c <__udivmoddi4+0x15c>
 8000bfc:	19e4      	adds	r4, r4, r7
 8000bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x15a>
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	f200 80b9 	bhi.w	8000d7c <__udivmoddi4+0x2cc>
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	eba4 0408 	sub.w	r4, r4, r8
 8000c10:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c14:	e79c      	b.n	8000b50 <__udivmoddi4+0xa0>
 8000c16:	4629      	mov	r1, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c22:	f1ce 0320 	rsb	r3, lr, #32
 8000c26:	fa26 f203 	lsr.w	r2, r6, r3
 8000c2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c2e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000c32:	fa1f f887 	uxth.w	r8, r7
 8000c36:	fb0c 2211 	mls	r2, ip, r1, r2
 8000c3a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c3e:	fa20 f303 	lsr.w	r3, r0, r3
 8000c42:	fb01 f908 	mul.w	r9, r1, r8
 8000c46:	4333      	orrs	r3, r6
 8000c48:	0c1e      	lsrs	r6, r3, #16
 8000c4a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c4e:	45b1      	cmp	r9, r6
 8000c50:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x1ba>
 8000c56:	19f6      	adds	r6, r6, r7
 8000c58:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c5c:	f080 808c 	bcs.w	8000d78 <__udivmoddi4+0x2c8>
 8000c60:	45b1      	cmp	r9, r6
 8000c62:	f240 8089 	bls.w	8000d78 <__udivmoddi4+0x2c8>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443e      	add	r6, r7
 8000c6a:	eba6 0609 	sub.w	r6, r6, r9
 8000c6e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000c72:	fb0c 6210 	mls	r2, ip, r0, r6
 8000c76:	fb00 f908 	mul.w	r9, r0, r8
 8000c7a:	b29e      	uxth	r6, r3
 8000c7c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c80:	45b1      	cmp	r9, r6
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1e4>
 8000c84:	19f6      	adds	r6, r6, r7
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d271      	bcs.n	8000d70 <__udivmoddi4+0x2c0>
 8000c8c:	45b1      	cmp	r9, r6
 8000c8e:	d96f      	bls.n	8000d70 <__udivmoddi4+0x2c0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443e      	add	r6, r7
 8000c94:	eba6 0609 	sub.w	r6, r6, r9
 8000c98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9c:	e78f      	b.n	8000bbe <__udivmoddi4+0x10e>
 8000c9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ca2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ca6:	408b      	lsls	r3, r1
 8000ca8:	ea48 0303 	orr.w	r3, r8, r3
 8000cac:	fa26 f407 	lsr.w	r4, r6, r7
 8000cb0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000cb4:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cb8:	fa1f fc83 	uxth.w	ip, r3
 8000cbc:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cc0:	408e      	lsls	r6, r1
 8000cc2:	fa20 f807 	lsr.w	r8, r0, r7
 8000cc6:	fb09 fa0c 	mul.w	sl, r9, ip
 8000cca:	ea48 0806 	orr.w	r8, r8, r6
 8000cce:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000cd2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000cd6:	45a2      	cmp	sl, r4
 8000cd8:	fa02 f201 	lsl.w	r2, r2, r1
 8000cdc:	fa00 f601 	lsl.w	r6, r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x244>
 8000ce2:	18e4      	adds	r4, r4, r3
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce8:	d244      	bcs.n	8000d74 <__udivmoddi4+0x2c4>
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	d942      	bls.n	8000d74 <__udivmoddi4+0x2c4>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	441c      	add	r4, r3
 8000cf4:	eba4 040a 	sub.w	r4, r4, sl
 8000cf8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000cfc:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d00:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d04:	fa1f f888 	uxth.w	r8, r8
 8000d08:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x270>
 8000d10:	18e4      	adds	r4, r4, r3
 8000d12:	f100 3eff 	add.w	lr, r0, #4294967295
 8000d16:	d229      	bcs.n	8000d6c <__udivmoddi4+0x2bc>
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d927      	bls.n	8000d6c <__udivmoddi4+0x2bc>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	441c      	add	r4, r3
 8000d20:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d24:	fba0 8902 	umull	r8, r9, r0, r2
 8000d28:	eba4 0c0c 	sub.w	ip, r4, ip
 8000d2c:	45cc      	cmp	ip, r9
 8000d2e:	46c2      	mov	sl, r8
 8000d30:	46ce      	mov	lr, r9
 8000d32:	d315      	bcc.n	8000d60 <__udivmoddi4+0x2b0>
 8000d34:	d012      	beq.n	8000d5c <__udivmoddi4+0x2ac>
 8000d36:	b155      	cbz	r5, 8000d4e <__udivmoddi4+0x29e>
 8000d38:	ebb6 030a 	subs.w	r3, r6, sl
 8000d3c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000d40:	fa06 f707 	lsl.w	r7, r6, r7
 8000d44:	40cb      	lsrs	r3, r1
 8000d46:	431f      	orrs	r7, r3
 8000d48:	40ce      	lsrs	r6, r1
 8000d4a:	602f      	str	r7, [r5, #0]
 8000d4c:	606e      	str	r6, [r5, #4]
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	4610      	mov	r0, r2
 8000d56:	e6f7      	b.n	8000b48 <__udivmoddi4+0x98>
 8000d58:	4689      	mov	r9, r1
 8000d5a:	e6de      	b.n	8000b1a <__udivmoddi4+0x6a>
 8000d5c:	4546      	cmp	r6, r8
 8000d5e:	d2ea      	bcs.n	8000d36 <__udivmoddi4+0x286>
 8000d60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d64:	eb69 0e03 	sbc.w	lr, r9, r3
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7e4      	b.n	8000d36 <__udivmoddi4+0x286>
 8000d6c:	4670      	mov	r0, lr
 8000d6e:	e7d7      	b.n	8000d20 <__udivmoddi4+0x270>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e78f      	b.n	8000c94 <__udivmoddi4+0x1e4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7bd      	b.n	8000cf4 <__udivmoddi4+0x244>
 8000d78:	4611      	mov	r1, r2
 8000d7a:	e776      	b.n	8000c6a <__udivmoddi4+0x1ba>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	443c      	add	r4, r7
 8000d80:	e744      	b.n	8000c0c <__udivmoddi4+0x15c>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e706      	b.n	8000b94 <__udivmoddi4+0xe4>
 8000d86:	3a02      	subs	r2, #2
 8000d88:	443e      	add	r6, r7
 8000d8a:	e72b      	b.n	8000be4 <__udivmoddi4+0x134>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_InitTick+0x3c>)
{
 8000d94:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d96:	7818      	ldrb	r0, [r3, #0]
 8000d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_InitTick+0x40>)
 8000da2:	6810      	ldr	r0, [r2, #0]
 8000da4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000da8:	f000 f89e 	bl	8000ee8 <HAL_SYSTICK_Config>
 8000dac:	4604      	mov	r4, r0
 8000dae:	b958      	cbnz	r0, 8000dc8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db0:	2d0f      	cmp	r5, #15
 8000db2:	d809      	bhi.n	8000dc8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	4602      	mov	r2, r0
 8000db6:	4629      	mov	r1, r5
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f854 	bl	8000e68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_InitTick+0x44>)
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	601d      	str	r5, [r3, #0]
 8000dc6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dc8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000020 	.word	0x20000020
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x20>)
{
 8000dda:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dde:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de6:	f000 f82d 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff ffd0 	bl	8000d90 <HAL_InitTick>
  HAL_MspInit();
 8000df0:	f003 fe24 	bl	8004a3c <HAL_MspInit>
}
 8000df4:	2000      	movs	r0, #0
 8000df6:	bd08      	pop	{r3, pc}
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_IncTick+0x10>)
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_IncTick+0x14>)
 8000e00:	6811      	ldr	r1, [r2, #0]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	440b      	add	r3, r1
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200006e8 	.word	0x200006e8
 8000e10:	20000000 	.word	0x20000000

08000e14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e14:	4b01      	ldr	r3, [pc, #4]	; (8000e1c <HAL_GetTick+0x8>)
 8000e16:	6818      	ldr	r0, [r3, #0]
}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200006e8 	.word	0x200006e8

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff fff6 	bl	8000e14 <HAL_GetTick>
 8000e28:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2c:	bf1e      	ittt	ne
 8000e2e:	4b04      	ldrne	r3, [pc, #16]	; (8000e40 <HAL_Delay+0x20>)
 8000e30:	781b      	ldrbne	r3, [r3, #0]
 8000e32:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	1b40      	subs	r0, r0, r5
 8000e3a:	4284      	cmp	r4, r0
 8000e3c:	d8fa      	bhi.n	8000e34 <HAL_Delay+0x14>
  {
  }
}
 8000e3e:	bd38      	pop	{r3, r4, r5, pc}
 8000e40:	20000000 	.word	0x20000000

08000e44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e46:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e4a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e52:	041b      	lsls	r3, r3, #16
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e5e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e60:	60d3      	str	r3, [r2, #12]
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b530      	push	{r4, r5, lr}
 8000e6c:	68dc      	ldr	r4, [r3, #12]
 8000e6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e72:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	bf28      	it	cs
 8000e7c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e84:	bf98      	it	ls
 8000e86:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	fa05 f303 	lsl.w	r3, r5, r3
 8000e8c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e90:	bf88      	it	hi
 8000e92:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4019      	ands	r1, r3
 8000e96:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	fa05 f404 	lsl.w	r4, r5, r4
 8000e9c:	3c01      	subs	r4, #1
 8000e9e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ea0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea2:	ea42 0201 	orr.w	r2, r2, r1
 8000ea6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	bfaf      	iteee	ge
 8000eac:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	4b06      	ldrlt	r3, [pc, #24]	; (8000ecc <HAL_NVIC_SetPriority+0x64>)
 8000eb2:	f000 000f 	andlt.w	r0, r0, #15
 8000eb6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	bfa5      	ittet	ge
 8000eba:	b2d2      	uxtbge	r2, r2
 8000ebc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ec6:	bd30      	pop	{r4, r5, pc}
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	e000ed14 	.word	0xe000ed14

08000ed0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	0942      	lsrs	r2, r0, #5
 8000ed4:	f000 001f 	and.w	r0, r0, #31
 8000ed8:	fa03 f000 	lsl.w	r0, r3, r0
 8000edc:	4b01      	ldr	r3, [pc, #4]	; (8000ee4 <HAL_NVIC_EnableIRQ+0x14>)
 8000ede:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	3801      	subs	r0, #1
 8000eea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000eee:	d20a      	bcs.n	8000f06 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f16:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	bf0c      	ite	eq
 8000f1c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f20:	f022 0204 	bicne.w	r2, r2, #4
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	4770      	bx	lr
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f2c:	4770      	bx	lr

08000f2e <HAL_SYSTICK_IRQHandler>:
{
 8000f2e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f30:	f7ff fffc 	bl	8000f2c <HAL_SYSTICK_Callback>
 8000f34:	bd08      	pop	{r3, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000f3c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	4616      	mov	r6, r2
 8000f40:	4b65      	ldr	r3, [pc, #404]	; (80010d8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f42:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80010e8 <HAL_GPIO_Init+0x1b0>
 8000f46:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80010ec <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000f4a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000f50:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f54:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000f58:	45a0      	cmp	r8, r4
 8000f5a:	d17f      	bne.n	800105c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000f5c:	684d      	ldr	r5, [r1, #4]
 8000f5e:	2d12      	cmp	r5, #18
 8000f60:	f000 80af 	beq.w	80010c2 <HAL_GPIO_Init+0x18a>
 8000f64:	f200 8088 	bhi.w	8001078 <HAL_GPIO_Init+0x140>
 8000f68:	2d02      	cmp	r5, #2
 8000f6a:	f000 80a7 	beq.w	80010bc <HAL_GPIO_Init+0x184>
 8000f6e:	d87c      	bhi.n	800106a <HAL_GPIO_Init+0x132>
 8000f70:	2d00      	cmp	r5, #0
 8000f72:	f000 808e 	beq.w	8001092 <HAL_GPIO_Init+0x15a>
 8000f76:	2d01      	cmp	r5, #1
 8000f78:	f000 809e 	beq.w	80010b8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f80:	2cff      	cmp	r4, #255	; 0xff
 8000f82:	bf93      	iteet	ls
 8000f84:	4682      	movls	sl, r0
 8000f86:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000f8a:	3d08      	subhi	r5, #8
 8000f8c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000f90:	bf92      	itee	ls
 8000f92:	00b5      	lslls	r5, r6, #2
 8000f94:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000f98:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f9a:	fa09 f805 	lsl.w	r8, r9, r5
 8000f9e:	ea2b 0808 	bic.w	r8, fp, r8
 8000fa2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa6:	bf88      	it	hi
 8000fa8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fac:	ea48 0505 	orr.w	r5, r8, r5
 8000fb0:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000fb8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000fbc:	d04e      	beq.n	800105c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fbe:	4d47      	ldr	r5, [pc, #284]	; (80010dc <HAL_GPIO_Init+0x1a4>)
 8000fc0:	4f46      	ldr	r7, [pc, #280]	; (80010dc <HAL_GPIO_Init+0x1a4>)
 8000fc2:	69ad      	ldr	r5, [r5, #24]
 8000fc4:	f026 0803 	bic.w	r8, r6, #3
 8000fc8:	f045 0501 	orr.w	r5, r5, #1
 8000fcc:	61bd      	str	r5, [r7, #24]
 8000fce:	69bd      	ldr	r5, [r7, #24]
 8000fd0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000fd4:	f005 0501 	and.w	r5, r5, #1
 8000fd8:	9501      	str	r5, [sp, #4]
 8000fda:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fde:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fe4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000fe8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fec:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ff0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff4:	4d3a      	ldr	r5, [pc, #232]	; (80010e0 <HAL_GPIO_Init+0x1a8>)
 8000ff6:	42a8      	cmp	r0, r5
 8000ff8:	d068      	beq.n	80010cc <HAL_GPIO_Init+0x194>
 8000ffa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ffe:	42a8      	cmp	r0, r5
 8001000:	d066      	beq.n	80010d0 <HAL_GPIO_Init+0x198>
 8001002:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001006:	42a8      	cmp	r0, r5
 8001008:	d064      	beq.n	80010d4 <HAL_GPIO_Init+0x19c>
 800100a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800100e:	42a8      	cmp	r0, r5
 8001010:	bf0c      	ite	eq
 8001012:	2503      	moveq	r5, #3
 8001014:	2504      	movne	r5, #4
 8001016:	fa05 f50b 	lsl.w	r5, r5, fp
 800101a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800101e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001022:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001024:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001028:	bf14      	ite	ne
 800102a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800102c:	43a5      	biceq	r5, r4
 800102e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001030:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001032:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001036:	bf14      	ite	ne
 8001038:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800103a:	43a5      	biceq	r5, r4
 800103c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800103e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001044:	bf14      	ite	ne
 8001046:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001048:	43a5      	biceq	r5, r4
 800104a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800104c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001052:	bf14      	ite	ne
 8001054:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001056:	ea25 0404 	biceq.w	r4, r5, r4
 800105a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800105c:	3601      	adds	r6, #1
 800105e:	2e10      	cmp	r6, #16
 8001060:	f47f af73 	bne.w	8000f4a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001064:	b003      	add	sp, #12
 8001066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800106a:	2d03      	cmp	r5, #3
 800106c:	d022      	beq.n	80010b4 <HAL_GPIO_Init+0x17c>
 800106e:	2d11      	cmp	r5, #17
 8001070:	d184      	bne.n	8000f7c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001072:	68ca      	ldr	r2, [r1, #12]
 8001074:	3204      	adds	r2, #4
          break;
 8001076:	e781      	b.n	8000f7c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001078:	4f1a      	ldr	r7, [pc, #104]	; (80010e4 <HAL_GPIO_Init+0x1ac>)
 800107a:	42bd      	cmp	r5, r7
 800107c:	d009      	beq.n	8001092 <HAL_GPIO_Init+0x15a>
 800107e:	d812      	bhi.n	80010a6 <HAL_GPIO_Init+0x16e>
 8001080:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80010f0 <HAL_GPIO_Init+0x1b8>
 8001084:	454d      	cmp	r5, r9
 8001086:	d004      	beq.n	8001092 <HAL_GPIO_Init+0x15a>
 8001088:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800108c:	454d      	cmp	r5, r9
 800108e:	f47f af75 	bne.w	8000f7c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001092:	688a      	ldr	r2, [r1, #8]
 8001094:	b1c2      	cbz	r2, 80010c8 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001096:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001098:	bf0c      	ite	eq
 800109a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800109e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a2:	2208      	movs	r2, #8
 80010a4:	e76a      	b.n	8000f7c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80010a6:	4575      	cmp	r5, lr
 80010a8:	d0f3      	beq.n	8001092 <HAL_GPIO_Init+0x15a>
 80010aa:	4565      	cmp	r5, ip
 80010ac:	d0f1      	beq.n	8001092 <HAL_GPIO_Init+0x15a>
 80010ae:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80010f4 <HAL_GPIO_Init+0x1bc>
 80010b2:	e7eb      	b.n	800108c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b4:	2200      	movs	r2, #0
 80010b6:	e761      	b.n	8000f7c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b8:	68ca      	ldr	r2, [r1, #12]
          break;
 80010ba:	e75f      	b.n	8000f7c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010bc:	68ca      	ldr	r2, [r1, #12]
 80010be:	3208      	adds	r2, #8
          break;
 80010c0:	e75c      	b.n	8000f7c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c2:	68ca      	ldr	r2, [r1, #12]
 80010c4:	320c      	adds	r2, #12
          break;
 80010c6:	e759      	b.n	8000f7c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010c8:	2204      	movs	r2, #4
 80010ca:	e757      	b.n	8000f7c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010cc:	2500      	movs	r5, #0
 80010ce:	e7a2      	b.n	8001016 <HAL_GPIO_Init+0xde>
 80010d0:	2501      	movs	r5, #1
 80010d2:	e7a0      	b.n	8001016 <HAL_GPIO_Init+0xde>
 80010d4:	2502      	movs	r5, #2
 80010d6:	e79e      	b.n	8001016 <HAL_GPIO_Init+0xde>
 80010d8:	40010400 	.word	0x40010400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	10210000 	.word	0x10210000
 80010e8:	10310000 	.word	0x10310000
 80010ec:	10320000 	.word	0x10320000
 80010f0:	10110000 	.word	0x10110000
 80010f4:	10220000 	.word	0x10220000

080010f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f8:	b10a      	cbz	r2, 80010fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fa:	6101      	str	r1, [r0, #16]
 80010fc:	4770      	bx	lr
 80010fe:	0409      	lsls	r1, r1, #16
 8001100:	e7fb      	b.n	80010fa <HAL_GPIO_WritePin+0x2>

08001102 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001104:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001108:	6959      	ldr	r1, [r3, #20]
 800110a:	4201      	tst	r1, r0
 800110c:	d002      	beq.n	8001114 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800110e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001110:	f7ff fff7 	bl	8001102 <HAL_GPIO_EXTI_Callback>
 8001114:	bd08      	pop	{r3, pc}
 8001116:	bf00      	nop
 8001118:	40010400 	.word	0x40010400

0800111c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800111c:	6802      	ldr	r2, [r0, #0]
 800111e:	6953      	ldr	r3, [r2, #20]
 8001120:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001124:	d00d      	beq.n	8001142 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001126:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800112a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800112c:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800112e:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001130:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001132:	2300      	movs	r3, #0
 8001134:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001136:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800113a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800113e:	2001      	movs	r0, #1
 8001140:	4770      	bx	lr
  }
  return HAL_OK;
 8001142:	4618      	mov	r0, r3
}
 8001144:	4770      	bx	lr

08001146 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001146:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800114a:	4604      	mov	r4, r0
 800114c:	4617      	mov	r7, r2
 800114e:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001150:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001154:	b28e      	uxth	r6, r1
 8001156:	6825      	ldr	r5, [r4, #0]
 8001158:	f1b8 0f01 	cmp.w	r8, #1
 800115c:	bf0c      	ite	eq
 800115e:	696b      	ldreq	r3, [r5, #20]
 8001160:	69ab      	ldrne	r3, [r5, #24]
 8001162:	ea36 0303 	bics.w	r3, r6, r3
 8001166:	bf14      	ite	ne
 8001168:	2001      	movne	r0, #1
 800116a:	2000      	moveq	r0, #0
 800116c:	b908      	cbnz	r0, 8001172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800116e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001172:	696b      	ldr	r3, [r5, #20]
 8001174:	055a      	lsls	r2, r3, #21
 8001176:	d512      	bpl.n	800119e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001178:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 800117a:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800117c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001180:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001182:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001186:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001188:	2304      	movs	r3, #4
 800118a:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800118c:	2300      	movs	r3, #0
      return HAL_ERROR;
 800118e:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001190:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001192:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001196:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800119a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800119e:	1c7b      	adds	r3, r7, #1
 80011a0:	d0d9      	beq.n	8001156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80011a2:	b94f      	cbnz	r7, 80011b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80011a4:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80011a6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80011a8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80011aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80011ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80011b2:	2003      	movs	r0, #3
 80011b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80011b8:	f7ff fe2c 	bl	8000e14 <HAL_GetTick>
 80011bc:	eba0 0009 	sub.w	r0, r0, r9
 80011c0:	4287      	cmp	r7, r0
 80011c2:	d2c8      	bcs.n	8001156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80011c4:	e7ee      	b.n	80011a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080011c6 <I2C_WaitOnFlagUntilTimeout>:
{
 80011c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011ca:	4604      	mov	r4, r0
 80011cc:	4690      	mov	r8, r2
 80011ce:	461f      	mov	r7, r3
 80011d0:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80011d2:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80011d6:	b28d      	uxth	r5, r1
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	f1b9 0f01 	cmp.w	r9, #1
 80011de:	bf0c      	ite	eq
 80011e0:	695b      	ldreq	r3, [r3, #20]
 80011e2:	699b      	ldrne	r3, [r3, #24]
 80011e4:	ea35 0303 	bics.w	r3, r5, r3
 80011e8:	bf0c      	ite	eq
 80011ea:	2301      	moveq	r3, #1
 80011ec:	2300      	movne	r3, #0
 80011ee:	4543      	cmp	r3, r8
 80011f0:	d002      	beq.n	80011f8 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80011f2:	2000      	movs	r0, #0
}
 80011f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80011f8:	1c7b      	adds	r3, r7, #1
 80011fa:	d0ed      	beq.n	80011d8 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80011fc:	b95f      	cbnz	r7, 8001216 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80011fe:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001200:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001202:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001204:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001208:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800120c:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800120e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001216:	f7ff fdfd 	bl	8000e14 <HAL_GetTick>
 800121a:	1b80      	subs	r0, r0, r6
 800121c:	4287      	cmp	r7, r0
 800121e:	d2db      	bcs.n	80011d8 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001220:	e7ed      	b.n	80011fe <I2C_WaitOnFlagUntilTimeout+0x38>

08001222 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001222:	b570      	push	{r4, r5, r6, lr}
 8001224:	4604      	mov	r4, r0
 8001226:	460d      	mov	r5, r1
 8001228:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	061b      	lsls	r3, r3, #24
 8001230:	d501      	bpl.n	8001236 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001232:	2000      	movs	r0, #0
 8001234:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001236:	4620      	mov	r0, r4
 8001238:	f7ff ff70 	bl	800111c <I2C_IsAcknowledgeFailed>
 800123c:	b9a8      	cbnz	r0, 800126a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800123e:	1c6a      	adds	r2, r5, #1
 8001240:	d0f3      	beq.n	800122a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001242:	b965      	cbnz	r5, 800125e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001244:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001246:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800124e:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001250:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001252:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001254:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001258:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800125c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800125e:	f7ff fdd9 	bl	8000e14 <HAL_GetTick>
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	4285      	cmp	r5, r0
 8001266:	d2e0      	bcs.n	800122a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001268:	e7ec      	b.n	8001244 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800126a:	2001      	movs	r0, #1
}
 800126c:	bd70      	pop	{r4, r5, r6, pc}

0800126e <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 800126e:	b570      	push	{r4, r5, r6, lr}
 8001270:	4604      	mov	r4, r0
 8001272:	460d      	mov	r5, r1
 8001274:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001276:	6820      	ldr	r0, [r4, #0]
 8001278:	6943      	ldr	r3, [r0, #20]
 800127a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800127e:	d001      	beq.n	8001284 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001280:	2000      	movs	r0, #0
}
 8001282:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001284:	6942      	ldr	r2, [r0, #20]
 8001286:	06d2      	lsls	r2, r2, #27
 8001288:	d50b      	bpl.n	80012a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800128a:	f06f 0210 	mvn.w	r2, #16
 800128e:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001290:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001292:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001294:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001298:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800129a:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800129c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80012a0:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80012a2:	b95d      	cbnz	r5, 80012bc <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80012a6:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80012ae:	2320      	movs	r3, #32
 80012b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80012b4:	2300      	movs	r3, #0
 80012b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80012bc:	f7ff fdaa 	bl	8000e14 <HAL_GetTick>
 80012c0:	1b80      	subs	r0, r0, r6
 80012c2:	4285      	cmp	r5, r0
 80012c4:	d2d7      	bcs.n	8001276 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80012c6:	e7ed      	b.n	80012a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080012c8 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
 80012ce:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	075b      	lsls	r3, r3, #29
 80012d6:	d501      	bpl.n	80012dc <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80012d8:	2000      	movs	r0, #0
 80012da:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012dc:	4620      	mov	r0, r4
 80012de:	f7ff ff1d 	bl	800111c <I2C_IsAcknowledgeFailed>
 80012e2:	b9a8      	cbnz	r0, 8001310 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80012e4:	1c6a      	adds	r2, r5, #1
 80012e6:	d0f3      	beq.n	80012d0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80012e8:	b965      	cbnz	r5, 8001304 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80012ec:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80012f4:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80012f6:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80012f8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80012fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80012fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001302:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001304:	f7ff fd86 	bl	8000e14 <HAL_GetTick>
 8001308:	1b80      	subs	r0, r0, r6
 800130a:	4285      	cmp	r5, r0
 800130c:	d2e0      	bcs.n	80012d0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800130e:	e7ec      	b.n	80012ea <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001310:	2001      	movs	r0, #1
}
 8001312:	bd70      	pop	{r4, r5, r6, pc}

08001314 <HAL_I2C_Init>:
{
 8001314:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001316:	4604      	mov	r4, r0
 8001318:	b908      	cbnz	r0, 800131e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
 800131c:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800131e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001322:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001326:	b91b      	cbnz	r3, 8001330 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001328:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800132c:	f003 fbd6 	bl	8004adc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001330:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001332:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001334:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001338:	6813      	ldr	r3, [r2, #0]
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001340:	f000 fd32 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <HAL_I2C_Init+0xf0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d830      	bhi.n	80013ae <HAL_I2C_Init+0x9a>
 800134c:	4a2e      	ldr	r2, [pc, #184]	; (8001408 <HAL_I2C_Init+0xf4>)
 800134e:	4290      	cmp	r0, r2
 8001350:	d9e3      	bls.n	800131a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001352:	4a2e      	ldr	r2, [pc, #184]	; (800140c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001354:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001356:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800135a:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800135c:	3201      	adds	r2, #1
 800135e:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001360:	4a28      	ldr	r2, [pc, #160]	; (8001404 <HAL_I2C_Init+0xf0>)
 8001362:	3801      	subs	r0, #1
 8001364:	4293      	cmp	r3, r2
 8001366:	d832      	bhi.n	80013ce <HAL_I2C_Init+0xba>
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fbb0 f0f3 	udiv	r0, r0, r3
 800136e:	1c43      	adds	r3, r0, #1
 8001370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001374:	2b04      	cmp	r3, #4
 8001376:	bf38      	it	cc
 8001378:	2304      	movcc	r3, #4
 800137a:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800137c:	6a22      	ldr	r2, [r4, #32]
 800137e:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001380:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001386:	68e2      	ldr	r2, [r4, #12]
 8001388:	6923      	ldr	r3, [r4, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800138e:	69a2      	ldr	r2, [r4, #24]
 8001390:	6963      	ldr	r3, [r4, #20]
 8001392:	4313      	orrs	r3, r2
 8001394:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001396:	680b      	ldr	r3, [r1, #0]
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800139e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80013ac:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <HAL_I2C_Init+0xfc>)
 80013b0:	4290      	cmp	r0, r2
 80013b2:	d9b2      	bls.n	800131a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80013b4:	4d15      	ldr	r5, [pc, #84]	; (800140c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80013ba:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80013be:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013c0:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80013c2:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013c4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80013c8:	fbb2 f2f5 	udiv	r2, r2, r5
 80013cc:	e7c6      	b.n	800135c <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013ce:	68a2      	ldr	r2, [r4, #8]
 80013d0:	b952      	cbnz	r2, 80013e8 <HAL_I2C_Init+0xd4>
 80013d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013da:	1c43      	adds	r3, r0, #1
 80013dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e0:	b16b      	cbz	r3, 80013fe <HAL_I2C_Init+0xea>
 80013e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e6:	e7c8      	b.n	800137a <HAL_I2C_Init+0x66>
 80013e8:	2219      	movs	r2, #25
 80013ea:	4353      	muls	r3, r2
 80013ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80013f0:	1c43      	adds	r3, r0, #1
 80013f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f6:	b113      	cbz	r3, 80013fe <HAL_I2C_Init+0xea>
 80013f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013fc:	e7bd      	b.n	800137a <HAL_I2C_Init+0x66>
 80013fe:	2301      	movs	r3, #1
 8001400:	e7bb      	b.n	800137a <HAL_I2C_Init+0x66>
 8001402:	bf00      	nop
 8001404:	000186a0 	.word	0x000186a0
 8001408:	001e847f 	.word	0x001e847f
 800140c:	000f4240 	.word	0x000f4240
 8001410:	003d08ff 	.word	0x003d08ff

08001414 <HAL_I2C_Master_Transmit>:
{
 8001414:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001418:	4604      	mov	r4, r0
 800141a:	461f      	mov	r7, r3
 800141c:	460d      	mov	r5, r1
 800141e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001420:	f7ff fcf8 	bl	8000e14 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001424:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001428:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800142a:	2b20      	cmp	r3, #32
 800142c:	d004      	beq.n	8001438 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800142e:	2502      	movs	r5, #2
}
 8001430:	4628      	mov	r0, r5
 8001432:	b004      	add	sp, #16
 8001434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001438:	9000      	str	r0, [sp, #0]
 800143a:	2319      	movs	r3, #25
 800143c:	2201      	movs	r2, #1
 800143e:	495d      	ldr	r1, [pc, #372]	; (80015b4 <HAL_I2C_Master_Transmit+0x1a0>)
 8001440:	4620      	mov	r0, r4
 8001442:	f7ff fec0 	bl	80011c6 <I2C_WaitOnFlagUntilTimeout>
 8001446:	2800      	cmp	r0, #0
 8001448:	d1f1      	bne.n	800142e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800144a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800144e:	2b01      	cmp	r3, #1
 8001450:	d0ed      	beq.n	800142e <HAL_I2C_Master_Transmit+0x1a>
 8001452:	2301      	movs	r3, #1
 8001454:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800145e:	bf5e      	ittt	pl
 8001460:	681a      	ldrpl	r2, [r3, #0]
 8001462:	f042 0201 	orrpl.w	r2, r2, #1
 8001466:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800146e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001470:	2221      	movs	r2, #33	; 0x21
 8001472:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001476:	2210      	movs	r2, #16
 8001478:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147c:	2200      	movs	r2, #0
 800147e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001480:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001484:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001486:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001488:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800148a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800148e:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001490:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001492:	2a04      	cmp	r2, #4
 8001494:	d004      	beq.n	80014a0 <HAL_I2C_Master_Transmit+0x8c>
 8001496:	2a01      	cmp	r2, #1
 8001498:	d002      	beq.n	80014a0 <HAL_I2C_Master_Transmit+0x8c>
 800149a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800149e:	d104      	bne.n	80014aa <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e002      	b.n	80014b0 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80014aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014ac:	2a12      	cmp	r2, #18
 80014ae:	d0f7      	beq.n	80014a0 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014b0:	9600      	str	r6, [sp, #0]
 80014b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014b4:	2200      	movs	r2, #0
 80014b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014ba:	4620      	mov	r0, r4
 80014bc:	f7ff fe83 	bl	80011c6 <I2C_WaitOnFlagUntilTimeout>
 80014c0:	bb28      	cbnz	r0, 800150e <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014c2:	6923      	ldr	r3, [r4, #16]
 80014c4:	6822      	ldr	r2, [r4, #0]
 80014c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014ca:	d112      	bne.n	80014f2 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014cc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80014d0:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014d2:	4633      	mov	r3, r6
 80014d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80014d6:	4938      	ldr	r1, [pc, #224]	; (80015b8 <HAL_I2C_Master_Transmit+0x1a4>)
 80014d8:	4620      	mov	r0, r4
 80014da:	f7ff fe34 	bl	8001146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014de:	4605      	mov	r5, r0
 80014e0:	b9a0      	cbnz	r0, 800150c <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	9003      	str	r0, [sp, #12]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	9203      	str	r2, [sp, #12]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	9303      	str	r3, [sp, #12]
 80014ee:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80014f0:	e050      	b.n	8001594 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80014f2:	11eb      	asrs	r3, r5, #7
 80014f4:	f003 0306 	and.w	r3, r3, #6
 80014f8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80014fc:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014fe:	492f      	ldr	r1, [pc, #188]	; (80015bc <HAL_I2C_Master_Transmit+0x1a8>)
 8001500:	4633      	mov	r3, r6
 8001502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fe1e 	bl	8001146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800150a:	b148      	cbz	r0, 8001520 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800150c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800150e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001510:	2b04      	cmp	r3, #4
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	d107      	bne.n	8001528 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001518:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800151c:	2501      	movs	r5, #1
 800151e:	e787      	b.n	8001430 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	b2ed      	uxtb	r5, r5
 8001524:	611d      	str	r5, [r3, #16]
 8001526:	e7d4      	b.n	80014d2 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001528:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 800152c:	2503      	movs	r5, #3
 800152e:	e77f      	b.n	8001430 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001530:	4632      	mov	r2, r6
 8001532:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff fe74 	bl	8001222 <I2C_WaitOnTXEFlagUntilTimeout>
 800153a:	b140      	cbz	r0, 800154e <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800153c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800153e:	2b04      	cmp	r3, #4
 8001540:	d1f4      	bne.n	800152c <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001542:	6822      	ldr	r2, [r4, #0]
 8001544:	6813      	ldr	r3, [r2, #0]
 8001546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e7e6      	b.n	800151c <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800154e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001550:	6820      	ldr	r0, [r4, #0]
 8001552:	1c4b      	adds	r3, r1, #1
 8001554:	6263      	str	r3, [r4, #36]	; 0x24
 8001556:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001558:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800155a:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 800155c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800155e:	3b01      	subs	r3, #1
 8001560:	b29b      	uxth	r3, r3
 8001562:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001564:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001566:	1e53      	subs	r3, r2, #1
 8001568:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800156a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 800156c:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800156e:	d50a      	bpl.n	8001586 <HAL_I2C_Master_Transmit+0x172>
 8001570:	b14b      	cbz	r3, 8001586 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001572:	1c8b      	adds	r3, r1, #2
 8001574:	6263      	str	r3, [r4, #36]	; 0x24
 8001576:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001578:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800157a:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 800157c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800157e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001580:	3b01      	subs	r3, #1
 8001582:	b29b      	uxth	r3, r3
 8001584:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001586:	4632      	mov	r2, r6
 8001588:	990a      	ldr	r1, [sp, #40]	; 0x28
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff fe9c 	bl	80012c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001590:	2800      	cmp	r0, #0
 8001592:	d1d3      	bne.n	800153c <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001594:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ca      	bne.n	8001530 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800159a:	6821      	ldr	r1, [r4, #0]
 800159c:	680a      	ldr	r2, [r1, #0]
 800159e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80015a4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80015a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80015aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80015b2:	e73d      	b.n	8001430 <HAL_I2C_Master_Transmit+0x1c>
 80015b4:	00100002 	.word	0x00100002
 80015b8:	00010002 	.word	0x00010002
 80015bc:	00010008 	.word	0x00010008

080015c0 <HAL_I2C_Master_Receive>:
{
 80015c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015c4:	4604      	mov	r4, r0
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	4698      	mov	r8, r3
 80015ca:	460d      	mov	r5, r1
 80015cc:	4691      	mov	r9, r2
 80015ce:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80015d0:	f7ff fc20 	bl	8000e14 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80015d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80015d8:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d004      	beq.n	80015e8 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80015de:	2502      	movs	r5, #2
}
 80015e0:	4628      	mov	r0, r5
 80015e2:	b009      	add	sp, #36	; 0x24
 80015e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015e8:	9000      	str	r0, [sp, #0]
 80015ea:	2319      	movs	r3, #25
 80015ec:	2201      	movs	r2, #1
 80015ee:	49a2      	ldr	r1, [pc, #648]	; (8001878 <HAL_I2C_Master_Receive+0x2b8>)
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff fde8 	bl	80011c6 <I2C_WaitOnFlagUntilTimeout>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d1f1      	bne.n	80015de <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80015fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d0ed      	beq.n	80015de <HAL_I2C_Master_Receive+0x1e>
 8001602:	2301      	movs	r3, #1
 8001604:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800160e:	bf5e      	ittt	pl
 8001610:	681a      	ldrpl	r2, [r3, #0]
 8001612:	f042 0201 	orrpl.w	r2, r2, #1
 8001616:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001620:	2222      	movs	r2, #34	; 0x22
 8001622:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001626:	2210      	movs	r2, #16
 8001628:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800162c:	2200      	movs	r2, #0
 800162e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001630:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001634:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001638:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800163a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800163c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001640:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001642:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001644:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001646:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001648:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800164c:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800164e:	d004      	beq.n	800165a <HAL_I2C_Master_Receive+0x9a>
 8001650:	2a01      	cmp	r2, #1
 8001652:	d002      	beq.n	800165a <HAL_I2C_Master_Receive+0x9a>
 8001654:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001658:	d104      	bne.n	8001664 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e002      	b.n	800166a <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001664:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001666:	2a11      	cmp	r2, #17
 8001668:	d0f7      	beq.n	800165a <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800166a:	9600      	str	r6, [sp, #0]
 800166c:	463b      	mov	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fda6 	bl	80011c6 <I2C_WaitOnFlagUntilTimeout>
 800167a:	2800      	cmp	r0, #0
 800167c:	d14d      	bne.n	800171a <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800167e:	6923      	ldr	r3, [r4, #16]
 8001680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	d139      	bne.n	80016fc <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001688:	f045 0501 	orr.w	r5, r5, #1
 800168c:	b2ed      	uxtb	r5, r5
 800168e:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001690:	4633      	mov	r3, r6
 8001692:	463a      	mov	r2, r7
 8001694:	4979      	ldr	r1, [pc, #484]	; (800187c <HAL_I2C_Master_Receive+0x2bc>)
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff fd55 	bl	8001146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800169c:	4605      	mov	r5, r0
 800169e:	2800      	cmp	r0, #0
 80016a0:	d13a      	bne.n	8001718 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 80016a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	d069      	beq.n	800177e <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 80016aa:	2a01      	cmp	r2, #1
 80016ac:	d17a      	bne.n	80017a4 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016b8:	6823      	ldr	r3, [r4, #0]
 80016ba:	9504      	str	r5, [sp, #16]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	9204      	str	r2, [sp, #16]
 80016c0:	699a      	ldr	r2, [r3, #24]
 80016c2:	9204      	str	r2, [sp, #16]
 80016c4:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80016cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016ce:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001884 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 80016d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d05b      	beq.n	8001792 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 80016da:	2b03      	cmp	r3, #3
 80016dc:	f200 80d4 	bhi.w	8001888 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d17b      	bne.n	80017dc <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80016e4:	4632      	mov	r2, r6
 80016e6:	4639      	mov	r1, r7
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7ff fdc0 	bl	800126e <I2C_WaitOnRXNEFlagUntilTimeout>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	f000 8093 	beq.w	800181a <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80016f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016f6:	2b20      	cmp	r3, #32
 80016f8:	d116      	bne.n	8001728 <HAL_I2C_Master_Receive+0x168>
 80016fa:	e03e      	b.n	800177a <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016fc:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001700:	f008 0806 	and.w	r8, r8, #6
 8001704:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001708:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800170a:	495d      	ldr	r1, [pc, #372]	; (8001880 <HAL_I2C_Master_Receive+0x2c0>)
 800170c:	4633      	mov	r3, r6
 800170e:	463a      	mov	r2, r7
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fd18 	bl	8001146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001716:	b148      	cbz	r0, 800172c <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001718:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800171a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800171c:	2b04      	cmp	r3, #4
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	d128      	bne.n	8001776 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8001724:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001728:	2501      	movs	r5, #1
 800172a:	e759      	b.n	80015e0 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	b2ed      	uxtb	r5, r5
 8001730:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001732:	463a      	mov	r2, r7
 8001734:	4633      	mov	r3, r6
 8001736:	4951      	ldr	r1, [pc, #324]	; (800187c <HAL_I2C_Master_Receive+0x2bc>)
 8001738:	4620      	mov	r0, r4
 800173a:	f7ff fd04 	bl	8001146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800173e:	4602      	mov	r2, r0
 8001740:	2800      	cmp	r0, #0
 8001742:	d1e9      	bne.n	8001718 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	9007      	str	r0, [sp, #28]
 8001748:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800174a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800174c:	9107      	str	r1, [sp, #28]
 800174e:	6999      	ldr	r1, [r3, #24]
 8001750:	9107      	str	r1, [sp, #28]
 8001752:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001754:	6819      	ldr	r1, [r3, #0]
 8001756:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800175a:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800175c:	9600      	str	r6, [sp, #0]
 800175e:	463b      	mov	r3, r7
 8001760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001764:	f7ff fd2f 	bl	80011c6 <I2C_WaitOnFlagUntilTimeout>
 8001768:	2800      	cmp	r0, #0
 800176a:	d1d6      	bne.n	800171a <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800176c:	6822      	ldr	r2, [r4, #0]
 800176e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001772:	6113      	str	r3, [r2, #16]
 8001774:	e78c      	b.n	8001690 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8001776:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 800177a:	2503      	movs	r5, #3
 800177c:	e730      	b.n	80015e0 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800177e:	9503      	str	r5, [sp, #12]
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	9203      	str	r2, [sp, #12]
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	9203      	str	r2, [sp, #12]
 8001788:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001790:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001792:	2320      	movs	r3, #32
 8001794:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001798:	2300      	movs	r3, #0
 800179a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800179e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80017a2:	e71d      	b.n	80015e0 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80017a4:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80017a6:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80017a8:	d10e      	bne.n	80017c8 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80017aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	9505      	str	r5, [sp, #20]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	9205      	str	r2, [sp, #20]
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	9205      	str	r2, [sp, #20]
 80017be:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c6:	e781      	b.n	80016cc <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017cc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ce:	9506      	str	r5, [sp, #24]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	9206      	str	r2, [sp, #24]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	9306      	str	r3, [sp, #24]
 80017d8:	9b06      	ldr	r3, [sp, #24]
 80017da:	e779      	b.n	80016d0 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 80017dc:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017de:	9600      	str	r6, [sp, #0]
 80017e0:	463b      	mov	r3, r7
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4641      	mov	r1, r8
 80017e8:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80017ea:	d124      	bne.n	8001836 <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017ec:	f7ff fceb 	bl	80011c6 <I2C_WaitOnFlagUntilTimeout>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d1c2      	bne.n	800177a <HAL_I2C_Master_Receive+0x1ba>
 80017f4:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fe:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001800:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	1c51      	adds	r1, r2, #1
 8001806:	6261      	str	r1, [r4, #36]	; 0x24
 8001808:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800180a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800180c:	3b01      	subs	r3, #1
 800180e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001810:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001812:	3b01      	subs	r3, #1
 8001814:	b29b      	uxth	r3, r3
 8001816:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001818:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800181a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	6262      	str	r2, [r4, #36]	; 0x24
 8001820:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001822:	6912      	ldr	r2, [r2, #16]
 8001824:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001826:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001828:	3b01      	subs	r3, #1
 800182a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800182c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800182e:	3b01      	subs	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001834:	e74e      	b.n	80016d4 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001836:	f7ff fcc6 	bl	80011c6 <I2C_WaitOnFlagUntilTimeout>
 800183a:	4602      	mov	r2, r0
 800183c:	2800      	cmp	r0, #0
 800183e:	d19c      	bne.n	800177a <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001840:	6821      	ldr	r1, [r4, #0]
 8001842:	680b      	ldr	r3, [r1, #0]
 8001844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001848:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800184a:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800184c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800184e:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001850:	1c59      	adds	r1, r3, #1
 8001852:	6261      	str	r1, [r4, #36]	; 0x24
 8001854:	6821      	ldr	r1, [r4, #0]
 8001856:	6909      	ldr	r1, [r1, #16]
 8001858:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 800185a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800185c:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 800185e:	3b01      	subs	r3, #1
 8001860:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001862:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001864:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001866:	3b01      	subs	r3, #1
 8001868:	b29b      	uxth	r3, r3
 800186a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800186c:	463b      	mov	r3, r7
 800186e:	f7ff fcaa 	bl	80011c6 <I2C_WaitOnFlagUntilTimeout>
 8001872:	2800      	cmp	r0, #0
 8001874:	d0bf      	beq.n	80017f6 <HAL_I2C_Master_Receive+0x236>
 8001876:	e780      	b.n	800177a <HAL_I2C_Master_Receive+0x1ba>
 8001878:	00100002 	.word	0x00100002
 800187c:	00010002 	.word	0x00010002
 8001880:	00010008 	.word	0x00010008
 8001884:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001888:	4632      	mov	r2, r6
 800188a:	4639      	mov	r1, r7
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff fcee 	bl	800126e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001892:	2800      	cmp	r0, #0
 8001894:	f47f af2e 	bne.w	80016f4 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	6262      	str	r2, [r4, #36]	; 0x24
 800189e:	6822      	ldr	r2, [r4, #0]
 80018a0:	6912      	ldr	r2, [r2, #16]
 80018a2:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80018a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018a6:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80018a8:	3b01      	subs	r3, #1
 80018aa:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80018ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018b4:	6953      	ldr	r3, [r2, #20]
 80018b6:	075b      	lsls	r3, r3, #29
 80018b8:	f57f af0c 	bpl.w	80016d4 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80018bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018be:	1c59      	adds	r1, r3, #1
 80018c0:	6261      	str	r1, [r4, #36]	; 0x24
 80018c2:	e7ae      	b.n	8001822 <HAL_I2C_Master_Receive+0x262>

080018c4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c4:	6803      	ldr	r3, [r0, #0]
{
 80018c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	07db      	lsls	r3, r3, #31
{
 80018cc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ce:	d410      	bmi.n	80018f2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	079f      	lsls	r7, r3, #30
 80018d4:	d45e      	bmi.n	8001994 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	0719      	lsls	r1, r3, #28
 80018da:	f100 8095 	bmi.w	8001a08 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018de:	682b      	ldr	r3, [r5, #0]
 80018e0:	075a      	lsls	r2, r3, #29
 80018e2:	f100 80bf 	bmi.w	8001a64 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e6:	69ea      	ldr	r2, [r5, #28]
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	f040 812d 	bne.w	8001b48 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80018ee:	2000      	movs	r0, #0
 80018f0:	e014      	b.n	800191c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018f2:	4c90      	ldr	r4, [pc, #576]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80018f4:	6863      	ldr	r3, [r4, #4]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d007      	beq.n	800190e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018fe:	6863      	ldr	r3, [r4, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d10c      	bne.n	8001922 <HAL_RCC_OscConfig+0x5e>
 8001908:	6863      	ldr	r3, [r4, #4]
 800190a:	03de      	lsls	r6, r3, #15
 800190c:	d509      	bpl.n	8001922 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	039c      	lsls	r4, r3, #14
 8001912:	d5dd      	bpl.n	80018d0 <HAL_RCC_OscConfig+0xc>
 8001914:	686b      	ldr	r3, [r5, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1da      	bne.n	80018d0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800191a:	2001      	movs	r0, #1
}
 800191c:	b002      	add	sp, #8
 800191e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001922:	686b      	ldr	r3, [r5, #4]
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	d110      	bne.n	800194c <HAL_RCC_OscConfig+0x88>
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001932:	f7ff fa6f 	bl	8000e14 <HAL_GetTick>
 8001936:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	0398      	lsls	r0, r3, #14
 800193c:	d4c8      	bmi.n	80018d0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193e:	f7ff fa69 	bl	8000e14 <HAL_GetTick>
 8001942:	1b80      	subs	r0, r0, r6
 8001944:	2864      	cmp	r0, #100	; 0x64
 8001946:	d9f7      	bls.n	8001938 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001948:	2003      	movs	r0, #3
 800194a:	e7e7      	b.n	800191c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194c:	b99b      	cbnz	r3, 8001976 <HAL_RCC_OscConfig+0xb2>
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001954:	6023      	str	r3, [r4, #0]
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800195e:	f7ff fa59 	bl	8000e14 <HAL_GetTick>
 8001962:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	0399      	lsls	r1, r3, #14
 8001968:	d5b2      	bpl.n	80018d0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800196a:	f7ff fa53 	bl	8000e14 <HAL_GetTick>
 800196e:	1b80      	subs	r0, r0, r6
 8001970:	2864      	cmp	r0, #100	; 0x64
 8001972:	d9f7      	bls.n	8001964 <HAL_RCC_OscConfig+0xa0>
 8001974:	e7e8      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	d103      	bne.n	8001986 <HAL_RCC_OscConfig+0xc2>
 800197e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001982:	6023      	str	r3, [r4, #0]
 8001984:	e7d1      	b.n	800192a <HAL_RCC_OscConfig+0x66>
 8001986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198a:	6023      	str	r3, [r4, #0]
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	e7cd      	b.n	8001930 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001994:	4c67      	ldr	r4, [pc, #412]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001996:	6863      	ldr	r3, [r4, #4]
 8001998:	f013 0f0c 	tst.w	r3, #12
 800199c:	d007      	beq.n	80019ae <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199e:	6863      	ldr	r3, [r4, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d110      	bne.n	80019ca <HAL_RCC_OscConfig+0x106>
 80019a8:	6863      	ldr	r3, [r4, #4]
 80019aa:	03da      	lsls	r2, r3, #15
 80019ac:	d40d      	bmi.n	80019ca <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	079b      	lsls	r3, r3, #30
 80019b2:	d502      	bpl.n	80019ba <HAL_RCC_OscConfig+0xf6>
 80019b4:	692b      	ldr	r3, [r5, #16]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d1af      	bne.n	800191a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	696a      	ldr	r2, [r5, #20]
 80019be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019c6:	6023      	str	r3, [r4, #0]
 80019c8:	e785      	b.n	80018d6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ca:	692a      	ldr	r2, [r5, #16]
 80019cc:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_RCC_OscConfig+0x274>)
 80019ce:	b16a      	cbz	r2, 80019ec <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019d4:	f7ff fa1e 	bl	8000e14 <HAL_GetTick>
 80019d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	079f      	lsls	r7, r3, #30
 80019de:	d4ec      	bmi.n	80019ba <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff fa18 	bl	8000e14 <HAL_GetTick>
 80019e4:	1b80      	subs	r0, r0, r6
 80019e6:	2802      	cmp	r0, #2
 80019e8:	d9f7      	bls.n	80019da <HAL_RCC_OscConfig+0x116>
 80019ea:	e7ad      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80019ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ee:	f7ff fa11 	bl	8000e14 <HAL_GetTick>
 80019f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	0798      	lsls	r0, r3, #30
 80019f8:	f57f af6d 	bpl.w	80018d6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff fa0a 	bl	8000e14 <HAL_GetTick>
 8001a00:	1b80      	subs	r0, r0, r6
 8001a02:	2802      	cmp	r0, #2
 8001a04:	d9f6      	bls.n	80019f4 <HAL_RCC_OscConfig+0x130>
 8001a06:	e79f      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a08:	69aa      	ldr	r2, [r5, #24]
 8001a0a:	4c4a      	ldr	r4, [pc, #296]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_RCC_OscConfig+0x278>)
 8001a0e:	b1da      	cbz	r2, 8001a48 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a14:	f7ff f9fe 	bl	8000e14 <HAL_GetTick>
 8001a18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a1c:	079b      	lsls	r3, r3, #30
 8001a1e:	d50d      	bpl.n	8001a3c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a20:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <HAL_RCC_OscConfig+0x27c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a2c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001a2e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001a30:	9b01      	ldr	r3, [sp, #4]
 8001a32:	1e5a      	subs	r2, r3, #1
 8001a34:	9201      	str	r2, [sp, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f9      	bne.n	8001a2e <HAL_RCC_OscConfig+0x16a>
 8001a3a:	e750      	b.n	80018de <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f9ea 	bl	8000e14 <HAL_GetTick>
 8001a40:	1b80      	subs	r0, r0, r6
 8001a42:	2802      	cmp	r0, #2
 8001a44:	d9e9      	bls.n	8001a1a <HAL_RCC_OscConfig+0x156>
 8001a46:	e77f      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001a48:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f9e3 	bl	8000e14 <HAL_GetTick>
 8001a4e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a52:	079f      	lsls	r7, r3, #30
 8001a54:	f57f af43 	bpl.w	80018de <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff f9dc 	bl	8000e14 <HAL_GetTick>
 8001a5c:	1b80      	subs	r0, r0, r6
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	d9f6      	bls.n	8001a50 <HAL_RCC_OscConfig+0x18c>
 8001a62:	e771      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a64:	4c33      	ldr	r4, [pc, #204]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a66:	69e3      	ldr	r3, [r4, #28]
 8001a68:	00d8      	lsls	r0, r3, #3
 8001a6a:	d424      	bmi.n	8001ab6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001a6c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	69e3      	ldr	r3, [r4, #28]
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	61e3      	str	r3, [r4, #28]
 8001a76:	69e3      	ldr	r3, [r4, #28]
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	4e30      	ldr	r6, [pc, #192]	; (8001b44 <HAL_RCC_OscConfig+0x280>)
 8001a82:	6833      	ldr	r3, [r6, #0]
 8001a84:	05d9      	lsls	r1, r3, #23
 8001a86:	d518      	bpl.n	8001aba <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	68eb      	ldr	r3, [r5, #12]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d126      	bne.n	8001adc <HAL_RCC_OscConfig+0x218>
 8001a8e:	6a23      	ldr	r3, [r4, #32]
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a96:	f7ff f9bd 	bl	8000e14 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a9e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa0:	6a23      	ldr	r3, [r4, #32]
 8001aa2:	079b      	lsls	r3, r3, #30
 8001aa4:	d53f      	bpl.n	8001b26 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001aa6:	2f00      	cmp	r7, #0
 8001aa8:	f43f af1d 	beq.w	80018e6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	69e3      	ldr	r3, [r4, #28]
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	61e3      	str	r3, [r4, #28]
 8001ab4:	e717      	b.n	80018e6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001ab6:	2700      	movs	r7, #0
 8001ab8:	e7e2      	b.n	8001a80 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aba:	6833      	ldr	r3, [r6, #0]
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f9a7 	bl	8000e14 <HAL_GetTick>
 8001ac6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	6833      	ldr	r3, [r6, #0]
 8001aca:	05da      	lsls	r2, r3, #23
 8001acc:	d4dc      	bmi.n	8001a88 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff f9a1 	bl	8000e14 <HAL_GetTick>
 8001ad2:	eba0 0008 	sub.w	r0, r0, r8
 8001ad6:	2864      	cmp	r0, #100	; 0x64
 8001ad8:	d9f6      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x204>
 8001ada:	e735      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001adc:	b9ab      	cbnz	r3, 8001b0a <HAL_RCC_OscConfig+0x246>
 8001ade:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6223      	str	r3, [r4, #32]
 8001aea:	6a23      	ldr	r3, [r4, #32]
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001af2:	f7ff f98f 	bl	8000e14 <HAL_GetTick>
 8001af6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	6a23      	ldr	r3, [r4, #32]
 8001afa:	0798      	lsls	r0, r3, #30
 8001afc:	d5d3      	bpl.n	8001aa6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7ff f989 	bl	8000e14 <HAL_GetTick>
 8001b02:	1b80      	subs	r0, r0, r6
 8001b04:	4540      	cmp	r0, r8
 8001b06:	d9f7      	bls.n	8001af8 <HAL_RCC_OscConfig+0x234>
 8001b08:	e71e      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	6a23      	ldr	r3, [r4, #32]
 8001b0e:	d103      	bne.n	8001b18 <HAL_RCC_OscConfig+0x254>
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6223      	str	r3, [r4, #32]
 8001b16:	e7ba      	b.n	8001a8e <HAL_RCC_OscConfig+0x1ca>
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6223      	str	r3, [r4, #32]
 8001b1e:	6a23      	ldr	r3, [r4, #32]
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	e7b6      	b.n	8001a94 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff f975 	bl	8000e14 <HAL_GetTick>
 8001b2a:	eba0 0008 	sub.w	r0, r0, r8
 8001b2e:	42b0      	cmp	r0, r6
 8001b30:	d9b6      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x1dc>
 8001b32:	e709      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
 8001b34:	40021000 	.word	0x40021000
 8001b38:	42420000 	.word	0x42420000
 8001b3c:	42420480 	.word	0x42420480
 8001b40:	20000020 	.word	0x20000020
 8001b44:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b48:	4c22      	ldr	r4, [pc, #136]	; (8001bd4 <HAL_RCC_OscConfig+0x310>)
 8001b4a:	6863      	ldr	r3, [r4, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	f43f aee2 	beq.w	800191a <HAL_RCC_OscConfig+0x56>
 8001b56:	2300      	movs	r3, #0
 8001b58:	4e1f      	ldr	r6, [pc, #124]	; (8001bd8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001b5c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5e:	d12b      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001b60:	f7ff f958 	bl	8000e14 <HAL_GetTick>
 8001b64:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	0199      	lsls	r1, r3, #6
 8001b6a:	d41f      	bmi.n	8001bac <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b6c:	6a2b      	ldr	r3, [r5, #32]
 8001b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b74:	6862      	ldr	r2, [r4, #4]
 8001b76:	68a9      	ldr	r1, [r5, #8]
 8001b78:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b80:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001b82:	6862      	ldr	r2, [r4, #4]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b8e:	2301      	movs	r3, #1
 8001b90:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b92:	f7ff f93f 	bl	8000e14 <HAL_GetTick>
 8001b96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	019a      	lsls	r2, r3, #6
 8001b9c:	f53f aea7 	bmi.w	80018ee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff f938 	bl	8000e14 <HAL_GetTick>
 8001ba4:	1b40      	subs	r0, r0, r5
 8001ba6:	2802      	cmp	r0, #2
 8001ba8:	d9f6      	bls.n	8001b98 <HAL_RCC_OscConfig+0x2d4>
 8001baa:	e6cd      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f932 	bl	8000e14 <HAL_GetTick>
 8001bb0:	1bc0      	subs	r0, r0, r7
 8001bb2:	2802      	cmp	r0, #2
 8001bb4:	d9d7      	bls.n	8001b66 <HAL_RCC_OscConfig+0x2a2>
 8001bb6:	e6c7      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f92c 	bl	8000e14 <HAL_GetTick>
 8001bbc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	f57f ae94 	bpl.w	80018ee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7ff f925 	bl	8000e14 <HAL_GetTick>
 8001bca:	1b40      	subs	r0, r0, r5
 8001bcc:	2802      	cmp	r0, #2
 8001bce:	d9f6      	bls.n	8001bbe <HAL_RCC_OscConfig+0x2fa>
 8001bd0:	e6ba      	b.n	8001948 <HAL_RCC_OscConfig+0x84>
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	42420060 	.word	0x42420060

08001bdc <HAL_RCC_GetSysClockFreq>:
{
 8001bdc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001be0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001be2:	ac02      	add	r4, sp, #8
 8001be4:	f103 0510 	add.w	r5, r3, #16
 8001be8:	4622      	mov	r2, r4
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	3308      	adds	r3, #8
 8001bf0:	c203      	stmia	r2!, {r0, r1}
 8001bf2:	42ab      	cmp	r3, r5
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	d1f7      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f88d 3004 	strb.w	r3, [sp, #4]
 8001bfe:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001c00:	4911      	ldr	r1, [pc, #68]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c02:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001c06:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c08:	f003 020c 	and.w	r2, r3, #12
 8001c0c:	2a08      	cmp	r2, #8
 8001c0e:	d117      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c10:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001c14:	a806      	add	r0, sp, #24
 8001c16:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c18:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c1a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c1e:	d50c      	bpl.n	8001c3a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c20:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c22:	480a      	ldr	r0, [pc, #40]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c24:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c28:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c2a:	aa06      	add	r2, sp, #24
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c32:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001c36:	b007      	add	sp, #28
 8001c38:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x74>)
 8001c3c:	4350      	muls	r0, r2
 8001c3e:	e7fa      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001c42:	e7f8      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x5a>
 8001c44:	08007ad0 	.word	0x08007ad0
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	007a1200 	.word	0x007a1200
 8001c50:	003d0900 	.word	0x003d0900

08001c54 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c54:	4a4d      	ldr	r2, [pc, #308]	; (8001d8c <HAL_RCC_ClockConfig+0x138>)
{
 8001c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c5a:	6813      	ldr	r3, [r2, #0]
{
 8001c5c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	428b      	cmp	r3, r1
{
 8001c64:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c66:	d328      	bcc.n	8001cba <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	682a      	ldr	r2, [r5, #0]
 8001c6a:	0791      	lsls	r1, r2, #30
 8001c6c:	d432      	bmi.n	8001cd4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6e:	07d2      	lsls	r2, r2, #31
 8001c70:	d438      	bmi.n	8001ce4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c72:	4a46      	ldr	r2, [pc, #280]	; (8001d8c <HAL_RCC_ClockConfig+0x138>)
 8001c74:	6813      	ldr	r3, [r2, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	429e      	cmp	r6, r3
 8001c7c:	d373      	bcc.n	8001d66 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7e:	682a      	ldr	r2, [r5, #0]
 8001c80:	4c43      	ldr	r4, [pc, #268]	; (8001d90 <HAL_RCC_ClockConfig+0x13c>)
 8001c82:	f012 0f04 	tst.w	r2, #4
 8001c86:	d179      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	0713      	lsls	r3, r2, #28
 8001c8a:	d506      	bpl.n	8001c9a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8c:	6863      	ldr	r3, [r4, #4]
 8001c8e:	692a      	ldr	r2, [r5, #16]
 8001c90:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c98:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c9a:	f7ff ff9f 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001c9e:	6863      	ldr	r3, [r4, #4]
 8001ca0:	4a3c      	ldr	r2, [pc, #240]	; (8001d94 <HAL_RCC_ClockConfig+0x140>)
 8001ca2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	40d8      	lsrs	r0, r3
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_RCC_ClockConfig+0x144>)
 8001cac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff f86e 	bl	8000d90 <HAL_InitTick>
  return HAL_OK;
 8001cb4:	2000      	movs	r0, #0
}
 8001cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	6813      	ldr	r3, [r2, #0]
 8001cbc:	f023 0307 	bic.w	r3, r3, #7
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cc4:	6813      	ldr	r3, [r2, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	4299      	cmp	r1, r3
 8001ccc:	d0cc      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001cce:	2001      	movs	r0, #1
 8001cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd4:	492e      	ldr	r1, [pc, #184]	; (8001d90 <HAL_RCC_ClockConfig+0x13c>)
 8001cd6:	68a8      	ldr	r0, [r5, #8]
 8001cd8:	684b      	ldr	r3, [r1, #4]
 8001cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cde:	4303      	orrs	r3, r0
 8001ce0:	604b      	str	r3, [r1, #4]
 8001ce2:	e7c4      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce4:	686a      	ldr	r2, [r5, #4]
 8001ce6:	4c2a      	ldr	r4, [pc, #168]	; (8001d90 <HAL_RCC_ClockConfig+0x13c>)
 8001ce8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	d0ec      	beq.n	8001cce <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfa:	f023 0303 	bic.w	r3, r3, #3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001d02:	f7ff f887 	bl	8000e14 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d06:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001d08:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d114      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d0e:	6863      	ldr	r3, [r4, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d0ac      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d18:	f7ff f87c 	bl	8000e14 <HAL_GetTick>
 8001d1c:	1bc0      	subs	r0, r0, r7
 8001d1e:	4540      	cmp	r0, r8
 8001d20:	d9f5      	bls.n	8001d0e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001d22:	2003      	movs	r0, #3
 8001d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d28:	2a02      	cmp	r2, #2
 8001d2a:	d102      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d30:	e7df      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	f013 0f02 	tst.w	r3, #2
 8001d36:	e7dc      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d10f      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3c:	6863      	ldr	r3, [r4, #4]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d095      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d46:	f7ff f865 	bl	8000e14 <HAL_GetTick>
 8001d4a:	1bc0      	subs	r0, r0, r7
 8001d4c:	4540      	cmp	r0, r8
 8001d4e:	d9f5      	bls.n	8001d3c <HAL_RCC_ClockConfig+0xe8>
 8001d50:	e7e7      	b.n	8001d22 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d52:	f7ff f85f 	bl	8000e14 <HAL_GetTick>
 8001d56:	1bc0      	subs	r0, r0, r7
 8001d58:	4540      	cmp	r0, r8
 8001d5a:	d8e2      	bhi.n	8001d22 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5c:	6863      	ldr	r3, [r4, #4]
 8001d5e:	f013 0f0c 	tst.w	r3, #12
 8001d62:	d1f6      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xfe>
 8001d64:	e785      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	f023 0307 	bic.w	r3, r3, #7
 8001d6c:	4333      	orrs	r3, r6
 8001d6e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d70:	6813      	ldr	r3, [r2, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	429e      	cmp	r6, r3
 8001d78:	d1a9      	bne.n	8001cce <HAL_RCC_ClockConfig+0x7a>
 8001d7a:	e780      	b.n	8001c7e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d7c:	6863      	ldr	r3, [r4, #4]
 8001d7e:	68e9      	ldr	r1, [r5, #12]
 8001d80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6063      	str	r3, [r4, #4]
 8001d88:	e77e      	b.n	8001c88 <HAL_RCC_ClockConfig+0x34>
 8001d8a:	bf00      	nop
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08007b0b 	.word	0x08007b0b
 8001d98:	20000020 	.word	0x20000020

08001d9c <HAL_RCC_GetHCLKFreq>:
}
 8001d9c:	4b01      	ldr	r3, [pc, #4]	; (8001da4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000020 	.word	0x20000020

08001da8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x14>)
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001db6:	6810      	ldr	r0, [r2, #0]
}    
 8001db8:	40d8      	lsrs	r0, r3
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08007b1b 	.word	0x08007b1b
 8001dc4:	20000020 	.word	0x20000020

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x14>)
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	4a03      	ldr	r2, [pc, #12]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001dd6:	6810      	ldr	r0, [r2, #0]
} 
 8001dd8:	40d8      	lsrs	r0, r3
 8001dda:	4770      	bx	lr
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08007b1b 	.word	0x08007b1b
 8001de4:	20000020 	.word	0x20000020

08001de8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dec:	6805      	ldr	r5, [r0, #0]
 8001dee:	68c2      	ldr	r2, [r0, #12]
 8001df0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001df2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dfc:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001dfe:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e00:	430b      	orrs	r3, r1
 8001e02:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001e04:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001e08:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e0c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e12:	696b      	ldr	r3, [r5, #20]
 8001e14:	6982      	ldr	r2, [r0, #24]
 8001e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001e1e:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <UART_SetConfig+0x138>)
{
 8001e20:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001e22:	429d      	cmp	r5, r3
 8001e24:	f04f 0419 	mov.w	r4, #25
 8001e28:	d146      	bne.n	8001eb8 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e2a:	f7ff ffcd 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8001e2e:	fb04 f300 	mul.w	r3, r4, r0
 8001e32:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001e36:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001e3a:	00b6      	lsls	r6, r6, #2
 8001e3c:	fbb3 f3f6 	udiv	r3, r3, r6
 8001e40:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e44:	011e      	lsls	r6, r3, #4
 8001e46:	f7ff ffbf 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8001e4a:	4360      	muls	r0, r4
 8001e4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	fbb0 f7f3 	udiv	r7, r0, r3
 8001e56:	f7ff ffb7 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8001e5a:	4360      	muls	r0, r4
 8001e5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e66:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e6a:	fb08 7313 	mls	r3, r8, r3, r7
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	3332      	adds	r3, #50	; 0x32
 8001e72:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e76:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001e7a:	f7ff ffa5 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8001e7e:	4360      	muls	r0, r4
 8001e80:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	fbb0 faf2 	udiv	sl, r0, r2
 8001e8a:	f7ff ff9d 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e8e:	4360      	muls	r0, r4
 8001e90:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e9e:	fb08 a313 	mls	r3, r8, r3, sl
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	3332      	adds	r3, #50	; 0x32
 8001ea6:	fbb3 f3f8 	udiv	r3, r3, r8
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	433b      	orrs	r3, r7
 8001eb0:	4433      	add	r3, r6
 8001eb2:	60ab      	str	r3, [r5, #8]
 8001eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eb8:	f7ff ff76 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8001ebc:	fb04 f300 	mul.w	r3, r4, r0
 8001ec0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001ec4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001ec8:	00b6      	lsls	r6, r6, #2
 8001eca:	fbb3 f3f6 	udiv	r3, r3, r6
 8001ece:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ed2:	011e      	lsls	r6, r3, #4
 8001ed4:	f7ff ff68 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8001ed8:	4360      	muls	r0, r4
 8001eda:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fbb0 f7f3 	udiv	r7, r0, r3
 8001ee4:	f7ff ff60 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8001ee8:	4360      	muls	r0, r4
 8001eea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ef8:	fb08 7313 	mls	r3, r8, r3, r7
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	3332      	adds	r3, #50	; 0x32
 8001f00:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f04:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001f08:	f7ff ff4e 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8001f0c:	4360      	muls	r0, r4
 8001f0e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	fbb0 faf2 	udiv	sl, r0, r2
 8001f18:	f7ff ff46 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8001f1c:	e7b7      	b.n	8001e8e <UART_SetConfig+0xa6>
 8001f1e:	bf00      	nop
 8001f20:	40013800 	.word	0x40013800

08001f24 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	4604      	mov	r4, r0
 8001f28:	460e      	mov	r6, r1
 8001f2a:	4617      	mov	r7, r2
 8001f2c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001f2e:	6821      	ldr	r1, [r4, #0]
 8001f30:	680b      	ldr	r3, [r1, #0]
 8001f32:	ea36 0303 	bics.w	r3, r6, r3
 8001f36:	d101      	bne.n	8001f3c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001f38:	2000      	movs	r0, #0
}
 8001f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001f3c:	1c6b      	adds	r3, r5, #1
 8001f3e:	d0f7      	beq.n	8001f30 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001f40:	b995      	cbnz	r5, 8001f68 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f42:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001f44:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001f56:	2320      	movs	r3, #32
 8001f58:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f5c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001f60:	2300      	movs	r3, #0
 8001f62:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001f68:	f7fe ff54 	bl	8000e14 <HAL_GetTick>
 8001f6c:	1bc0      	subs	r0, r0, r7
 8001f6e:	4285      	cmp	r5, r0
 8001f70:	d2dd      	bcs.n	8001f2e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001f72:	e7e6      	b.n	8001f42 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001f74 <HAL_UART_Init>:
{
 8001f74:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001f76:	4604      	mov	r4, r0
 8001f78:	b340      	cbz	r0, 8001fcc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001f7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f82:	b91b      	cbnz	r3, 8001f8c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001f84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001f88:	f002 fdd4 	bl	8004b34 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001f8c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001f8e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001f94:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f96:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f9c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f9e:	f7ff ff23 	bl	8001de8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fbc:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001fbe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001fc2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001fc6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001fca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fcc:	2001      	movs	r0, #1
}
 8001fce:	bd10      	pop	{r4, pc}

08001fd0 <HAL_UART_Transmit>:
{
 8001fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001fd6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001fda:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001fdc:	2b20      	cmp	r3, #32
{
 8001fde:	460d      	mov	r5, r1
 8001fe0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001fe2:	d14e      	bne.n	8002082 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001fe4:	2900      	cmp	r1, #0
 8001fe6:	d049      	beq.n	800207c <HAL_UART_Transmit+0xac>
 8001fe8:	2a00      	cmp	r2, #0
 8001fea:	d047      	beq.n	800207c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001fec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d046      	beq.n	8002082 <HAL_UART_Transmit+0xb2>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ffe:	2321      	movs	r3, #33	; 0x21
 8002000:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002004:	f7fe ff06 	bl	8000e14 <HAL_GetTick>
 8002008:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800200a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800200e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002012:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002014:	b29b      	uxth	r3, r3
 8002016:	b96b      	cbnz	r3, 8002034 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002018:	463b      	mov	r3, r7
 800201a:	4632      	mov	r2, r6
 800201c:	2140      	movs	r1, #64	; 0x40
 800201e:	4620      	mov	r0, r4
 8002020:	f7ff ff80 	bl	8001f24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002024:	b9a8      	cbnz	r0, 8002052 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002026:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002028:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 800202c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002034:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002036:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002038:	3b01      	subs	r3, #1
 800203a:	b29b      	uxth	r3, r3
 800203c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800203e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002040:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002046:	4620      	mov	r0, r4
 8002048:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800204a:	d10e      	bne.n	800206a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800204c:	f7ff ff6a 	bl	8001f24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002050:	b110      	cbz	r0, 8002058 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8002052:	2003      	movs	r0, #3
 8002054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002058:	882b      	ldrh	r3, [r5, #0]
 800205a:	6822      	ldr	r2, [r4, #0]
 800205c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002060:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002062:	6923      	ldr	r3, [r4, #16]
 8002064:	b943      	cbnz	r3, 8002078 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8002066:	3502      	adds	r5, #2
 8002068:	e7d3      	b.n	8002012 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800206a:	f7ff ff5b 	bl	8001f24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800206e:	2800      	cmp	r0, #0
 8002070:	d1ef      	bne.n	8002052 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	782a      	ldrb	r2, [r5, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	3501      	adds	r5, #1
 800207a:	e7ca      	b.n	8002012 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800207c:	2001      	movs	r0, #1
 800207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002082:	2002      	movs	r0, #2
}
 8002084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002088 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8002088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800208c:	2903      	cmp	r1, #3
{
 800208e:	b088      	sub	sp, #32
 8002090:	4605      	mov	r5, r0
 8002092:	460c      	mov	r4, r1
 8002094:	461f      	mov	r7, r3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8002096:	d02f      	beq.n	80020f8 <SetPresetMode+0x70>
 8002098:	2908      	cmp	r1, #8
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800209a:	bf14      	ite	ne
 800209c:	2620      	movne	r6, #32
 800209e:	2640      	moveq	r6, #64	; 0x40
	VL53L1_DevicePresetModes LightModes[3] = {
 80020a0:	2302      	movs	r3, #2
 80020a2:	f88d 3014 	strb.w	r3, [sp, #20]
 80020a6:	2301      	movs	r3, #1
 80020a8:	f88d 3015 	strb.w	r3, [sp, #21]
 80020ac:	2303      	movs	r3, #3
 80020ae:	f88d 3016 	strb.w	r3, [sp, #22]
	VL53L1_DevicePresetModes TimedModes[3] = {
 80020b2:	2307      	movs	r3, #7
 80020b4:	f88d 3018 	strb.w	r3, [sp, #24]
 80020b8:	2306      	movs	r3, #6
 80020ba:	f88d 3019 	strb.w	r3, [sp, #25]
 80020be:	2308      	movs	r3, #8
 80020c0:	f88d 301a 	strb.w	r3, [sp, #26]
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80020c4:	2324      	movs	r3, #36	; 0x24
 80020c6:	f88d 301c 	strb.w	r3, [sp, #28]
 80020ca:	2325      	movs	r3, #37	; 0x25
 80020cc:	f88d 301d 	strb.w	r3, [sp, #29]
 80020d0:	2326      	movs	r3, #38	; 0x26
	switch (DistanceMode) {
 80020d2:	2a01      	cmp	r2, #1
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80020d4:	f88d 301e 	strb.w	r3, [sp, #30]
	switch (DistanceMode) {
 80020d8:	d010      	beq.n	80020fc <SetPresetMode+0x74>
 80020da:	2a02      	cmp	r2, #2
		DistIdx = 2;
 80020dc:	bf0c      	ite	eq
 80020de:	2301      	moveq	r3, #1
 80020e0:	2302      	movne	r3, #2
	switch (PresetMode) {
 80020e2:	2c04      	cmp	r4, #4
 80020e4:	d00c      	beq.n	8002100 <SetPresetMode+0x78>
 80020e6:	2c08      	cmp	r4, #8
 80020e8:	d02d      	beq.n	8002146 <SetPresetMode+0xbe>
 80020ea:	2c03      	cmp	r4, #3
 80020ec:	d130      	bne.n	8002150 <SetPresetMode+0xc8>
		*pDevicePresetMode = TimedModes[DistIdx];
 80020ee:	aa08      	add	r2, sp, #32
 80020f0:	4413      	add	r3, r2
 80020f2:	f813 8c08 	ldrb.w	r8, [r3, #-8]
 80020f6:	e007      	b.n	8002108 <SetPresetMode+0x80>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80020f8:	2640      	movs	r6, #64	; 0x40
 80020fa:	e7d1      	b.n	80020a0 <SetPresetMode+0x18>
		DistIdx = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e7f0      	b.n	80020e2 <SetPresetMode+0x5a>
		*pDevicePresetMode = LightModes[DistIdx];
 8002100:	aa08      	add	r2, sp, #32
 8002102:	4413      	add	r3, r2
 8002104:	f813 8c0c 	ldrb.w	r8, [r3, #-12]

	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8002108:	ab07      	add	r3, sp, #28
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	ab06      	add	r3, sp, #24
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	f10d 0212 	add.w	r2, sp, #18
 8002114:	ab05      	add	r3, sp, #20
 8002116:	4641      	mov	r1, r8
 8002118:	4628      	mov	r0, r5
 800211a:	f000 fba9 	bl	8002870 <VL53L1_get_preset_mode_timing_cfg>
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800211e:	b978      	cbnz	r0, 8002140 <SetPresetMode+0xb8>
		Status = VL53L1_set_preset_mode(
 8002120:	9b07      	ldr	r3, [sp, #28]
 8002122:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	9b06      	ldr	r3, [sp, #24]
 800212a:	9702      	str	r7, [sp, #8]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	4641      	mov	r1, r8
 8002130:	9b05      	ldr	r3, [sp, #20]
 8002132:	4628      	mov	r0, r5
 8002134:	f000 fbd5 	bl	80028e2 <VL53L1_set_preset_mode>
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8002138:	b910      	cbnz	r0, 8002140 <SetPresetMode+0xb8>
		PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800213a:	70ae      	strb	r6, [r5, #2]

	if (Status == VL53L1_ERROR_NONE)
		PALDevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800213c:	f885 437c 	strb.w	r4, [r5, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002140:	b008      	add	sp, #32
 8002142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8002146:	aa08      	add	r2, sp, #32
 8002148:	4413      	add	r3, r2
 800214a:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 800214e:	e7db      	b.n	8002108 <SetPresetMode+0x80>
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8002150:	f06f 0007 	mvn.w	r0, #7
 8002154:	e7f4      	b.n	8002140 <SetPresetMode+0xb8>

08002156 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8002156:	b510      	push	{r4, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002158:	b121      	cbz	r1, 8002164 <SetLimitValue+0xe>
 800215a:	2901      	cmp	r1, #1
 800215c:	d008      	beq.n	8002170 <SetLimitValue+0x1a>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
		break;
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800215e:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002162:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8002164:	f3c2 318f 	ubfx	r1, r2, #14, #16
 8002168:	f000 fcd1 	bl	8002b0e <VL53L1_set_lite_sigma_threshold>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800216c:	2000      	movs	r0, #0
		break;
 800216e:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8002170:	f3c2 214f 	ubfx	r1, r2, #9, #16
 8002174:	f000 fcd4 	bl	8002b20 <VL53L1_set_lite_min_count_rate>
 8002178:	e7f8      	b.n	800216c <SetLimitValue+0x16>

0800217a <VL53L1_WaitDeviceBooted>:
	Status = VL53L1_poll_for_boot_completion(Dev,
 800217a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800217e:	f002 b9e0 	b.w	8004542 <VL53L1_poll_for_boot_completion>

08002182 <VL53L1_SetDistanceMode>:
{
 8002182:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8002186:	1e4b      	subs	r3, r1, #1
 8002188:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800218a:	2b02      	cmp	r3, #2
{
 800218c:	4604      	mov	r4, r0
 800218e:	460e      	mov	r6, r1
	PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 8002190:	f890 737c 	ldrb.w	r7, [r0, #892]	; 0x37c
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8002194:	d82d      	bhi.n	80021f2 <VL53L1_SetDistanceMode+0x70>
 8002196:	bf18      	it	ne
 8002198:	460d      	movne	r5, r1
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800219a:	a903      	add	r1, sp, #12
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 800219c:	bf08      	it	eq
 800219e:	2503      	moveq	r5, #3
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80021a0:	f000 faf9 	bl	8002796 <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 80021a4:	bb10      	cbnz	r0, 80021ec <VL53L1_SetDistanceMode+0x6a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80021a6:	466b      	mov	r3, sp
 80021a8:	aa01      	add	r2, sp, #4
 80021aa:	a902      	add	r1, sp, #8
 80021ac:	4620      	mov	r0, r4
	inter_measurement_period_ms =  PALDevDataGet(Dev,
 80021ae:	f8d4 8014 	ldr.w	r8, [r4, #20]
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80021b2:	f000 fa93 	bl	80026dc <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 80021b6:	b9c8      	cbnz	r0, 80021ec <VL53L1_SetDistanceMode+0x6a>
		Status = SetPresetMode(Dev,
 80021b8:	4643      	mov	r3, r8
 80021ba:	462a      	mov	r2, r5
 80021bc:	4639      	mov	r1, r7
 80021be:	4620      	mov	r0, r4
 80021c0:	f7ff ff62 	bl	8002088 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 80021c4:	b990      	cbnz	r0, 80021ec <VL53L1_SetDistanceMode+0x6a>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80021c6:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80021ca:	f884 537f 	strb.w	r5, [r4, #895]	; 0x37f
		PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 80021ce:	f884 637d 	strb.w	r6, [r4, #893]	; 0x37d
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80021d2:	9b00      	ldr	r3, [sp, #0]
 80021d4:	9a01      	ldr	r2, [sp, #4]
 80021d6:	9902      	ldr	r1, [sp, #8]
 80021d8:	4620      	mov	r0, r4
 80021da:	f000 fa67 	bl	80026ac <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 80021de:	b928      	cbnz	r0, 80021ec <VL53L1_SetDistanceMode+0x6a>
			PALDevDataSet(Dev, LLData.range_config_timeout_us,
 80021e0:	9b00      	ldr	r3, [sp, #0]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80021e2:	a903      	add	r1, sp, #12
			PALDevDataSet(Dev, LLData.range_config_timeout_us,
 80021e4:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80021e6:	4620      	mov	r0, r4
 80021e8:	f000 fac4 	bl	8002774 <VL53L1_set_user_zone>
}
 80021ec:	b004      	add	sp, #16
 80021ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return VL53L1_ERROR_INVALID_PARAMS;
 80021f2:	f06f 0003 	mvn.w	r0, #3
 80021f6:	e7f9      	b.n	80021ec <VL53L1_SetDistanceMode+0x6a>

080021f8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
{
 80021f8:	b570      	push	{r4, r5, r6, lr}
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf8>)
{
 80021fc:	b086      	sub	sp, #24
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80021fe:	4299      	cmp	r1, r3
{
 8002200:	4604      	mov	r4, r0
 8002202:	460d      	mov	r5, r1
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002204:	d93b      	bls.n	800227e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002206:	f06f 0003 	mvn.w	r0, #3
}
 800220a:	b006      	add	sp, #24
 800220c:	bd70      	pop	{r4, r5, r6, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800220e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d062      	beq.n	80022dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe4>
 8002216:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	2b01      	cmp	r3, #1
 8002220:	bf18      	it	ne
 8002222:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
 8002226:	2301      	movs	r3, #1
 8002228:	4832      	ldr	r0, [pc, #200]	; (80022f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>)
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800222a:	4295      	cmp	r5, r2
 800222c:	d9eb      	bls.n	8002206 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
					- TimingGuard);
 800222e:	1aaa      	subs	r2, r5, r2
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8002230:	4282      	cmp	r2, r0
 8002232:	d8e8      	bhi.n	8002206 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
				TimingBudget /= divisor;
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
				Status = VL53L1_set_timeouts_us(
 8002238:	9904      	ldr	r1, [sp, #16]
 800223a:	9a03      	ldr	r2, [sp, #12]
 800223c:	4620      	mov	r0, r4
				TimingBudget /= divisor;
 800223e:	9302      	str	r3, [sp, #8]
				Status = VL53L1_set_timeouts_us(
 8002240:	f000 fa34 	bl	80026ac <VL53L1_set_timeouts_us>
			if (Status == VL53L1_ERROR_NONE)
 8002244:	2800      	cmp	r0, #0
 8002246:	d1e0      	bne.n	800220a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
				PALDevDataSet(Dev,
 8002248:	9b02      	ldr	r3, [sp, #8]
		PALDevDataSet(Dev,
 800224a:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
				PALDevDataSet(Dev,
 800224e:	6123      	str	r3, [r4, #16]
 8002250:	e7db      	b.n	800220a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
			VL53L1_get_tuning_parm(Dev,
 8002252:	aa05      	add	r2, sp, #20
 8002254:	f248 0136 	movw	r1, #32822	; 0x8036
 8002258:	4620      	mov	r0, r4
 800225a:	f000 fe87 	bl	8002f6c <VL53L1_get_tuning_parm>
 800225e:	22f5      	movs	r2, #245	; 0xf5
			if (vhv_loops > 0) {
 8002260:	9b05      	ldr	r3, [sp, #20]
			FDAMaxTimingBudgetUs *= 2;
 8002262:	4825      	ldr	r0, [pc, #148]	; (80022f8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
			if (vhv_loops > 0) {
 8002264:	2b00      	cmp	r3, #0
				vhv += vhv_loops *
 8002266:	bfc4      	itt	gt
 8002268:	435a      	mulgt	r2, r3
 800226a:	32f5      	addgt	r2, #245	; 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800226c:	f602 52dc 	addw	r2, r2, #3548	; 0xddc
			divisor = 2;
 8002270:	2302      	movs	r3, #2
		break;
 8002272:	e7da      	b.n	800222a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x32>
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8002274:	2d00      	cmp	r5, #0
 8002276:	d0c6      	beq.n	8002206 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
 8002278:	f06f 0007 	mvn.w	r0, #7
 800227c:	e7c5      	b.n	800220a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800227e:	f10d 0206 	add.w	r2, sp, #6
 8002282:	2105      	movs	r1, #5
 8002284:	f000 fa63 	bl	800274e <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE) {
 8002288:	2800      	cmp	r0, #0
 800228a:	d1be      	bne.n	800220a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
	Status = VL53L1_get_sequence_config_bit(Dev,
 800228c:	f10d 0207 	add.w	r2, sp, #7
 8002290:	2106      	movs	r1, #6
 8002292:	4620      	mov	r0, r4
 8002294:	f000 fa5b 	bl	800274e <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8002298:	2800      	cmp	r0, #0
 800229a:	d1b6      	bne.n	800220a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		Status = VL53L1_get_timeouts_us(Dev,
 800229c:	ab02      	add	r3, sp, #8
 800229e:	aa03      	add	r2, sp, #12
 80022a0:	a904      	add	r1, sp, #16
 80022a2:	4620      	mov	r0, r4
 80022a4:	f000 fa1a 	bl	80026dc <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 80022a8:	2800      	cmp	r0, #0
 80022aa:	d1ae      	bne.n	800220a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		switch (PresetMode) {
 80022ac:	f894 337c 	ldrb.w	r3, [r4, #892]	; 0x37c
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d0ac      	beq.n	800220e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16>
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d0cc      	beq.n	8002252 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d1db      	bne.n	8002274 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7c>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80022bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d00f      	beq.n	80022e4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
			FDAMaxTimingBudgetUs *= 2;
 80022c4:	f245 4260 	movw	r2, #21600	; 0x5460
 80022c8:	f246 71e8 	movw	r1, #26600	; 0x67e8
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80022cc:	f89d 6007 	ldrb.w	r6, [sp, #7]
			FDAMaxTimingBudgetUs *= 2;
 80022d0:	4809      	ldr	r0, [pc, #36]	; (80022f8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
 80022d2:	2302      	movs	r3, #2
 80022d4:	2e01      	cmp	r6, #1
 80022d6:	bf08      	it	eq
 80022d8:	460a      	moveq	r2, r1
 80022da:	e7a6      	b.n	800222a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x32>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80022dc:	4805      	ldr	r0, [pc, #20]	; (80022f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>)
				TimingGuard = 5000;
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	e7a2      	b.n	800222a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x32>
			FDAMaxTimingBudgetUs *= 2;
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
			divisor = 2;
 80022e6:	2302      	movs	r3, #2
				TimingGuard = 26600;
 80022e8:	f246 72e8 	movw	r2, #26600	; 0x67e8
 80022ec:	e79d      	b.n	800222a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x32>
 80022ee:	bf00      	nop
 80022f0:	00989680 	.word	0x00989680
 80022f4:	00086470 	.word	0x00086470
 80022f8:	0010c8e0 	.word	0x0010c8e0

080022fc <VL53L1_SetPresetMode>:
{
 80022fc:	b538      	push	{r3, r4, r5, lr}
	Status = SetPresetMode(Dev,
 80022fe:	2203      	movs	r2, #3
 8002300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8002304:	4604      	mov	r4, r0
 8002306:	460d      	mov	r5, r1
	Status = SetPresetMode(Dev,
 8002308:	f7ff febe 	bl	8002088 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 800230c:	b9c8      	cbnz	r0, 8002342 <VL53L1_SetPresetMode+0x46>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800230e:	2303      	movs	r3, #3
 8002310:	f884 337e 	strb.w	r3, [r4, #894]	; 0x37e
		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8002314:	f884 337f 	strb.w	r3, [r4, #895]	; 0x37f
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8002318:	1eeb      	subs	r3, r5, #3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d901      	bls.n	8002322 <VL53L1_SetPresetMode+0x26>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800231e:	2d08      	cmp	r5, #8
 8002320:	d10c      	bne.n	800233c <VL53L1_SetPresetMode+0x40>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002322:	f24a 0128 	movw	r1, #41000	; 0xa028
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff ff66 	bl	80021f8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L1_ERROR_NONE) {
 800232c:	b948      	cbnz	r0, 8002342 <VL53L1_SetPresetMode+0x46>
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800232e:	4620      	mov	r0, r4
}
 8002330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8002334:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002338:	f000 b9ac 	b.w	8002694 <VL53L1_set_inter_measurement_period_ms>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800233c:	f248 2135 	movw	r1, #33333	; 0x8235
 8002340:	e7f1      	b.n	8002326 <VL53L1_SetPresetMode+0x2a>
}
 8002342:	bd38      	pop	{r3, r4, r5, pc}

08002344 <VL53L1_StaticInit>:
	PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002344:	2203      	movs	r2, #3
	PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8002346:	2120      	movs	r1, #32
	PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002348:	f880 2378 	strb.w	r2, [r0, #888]	; 0x378
	PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800234c:	7081      	strb	r1, [r0, #2]
	PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800234e:	f880 237f 	strb.w	r2, [r0, #895]	; 0x37f
	PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8002352:	f880 237e 	strb.w	r2, [r0, #894]	; 0x37e
	PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 8002356:	f880 237d 	strb.w	r2, [r0, #893]	; 0x37d
	Status = VL53L1_SetPresetMode(Dev,
 800235a:	2108      	movs	r1, #8
 800235c:	f7ff bfce 	b.w	80022fc <VL53L1_SetPresetMode>

08002360 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8002360:	f000 b998 	b.w	8002694 <VL53L1_set_inter_measurement_period_ms>

08002364 <VL53L1_SetLimitCheckEnable>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002364:	2901      	cmp	r1, #1
{
 8002366:	b570      	push	{r4, r5, r6, lr}
 8002368:	4604      	mov	r4, r0
 800236a:	460e      	mov	r6, r1
 800236c:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800236e:	d811      	bhi.n	8002394 <VL53L1_SetLimitCheckEnable+0x30>
		if (LimitCheckEnable == 0)
 8002370:	b17a      	cbz	r2, 8002392 <VL53L1_SetLimitCheckEnable+0x2e>
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002372:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8002376:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800237a:	4631      	mov	r1, r6
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff feea 	bl	8002156 <SetLimitValue>
	if (Status == VL53L1_ERROR_NONE)
 8002382:	b948      	cbnz	r0, 8002398 <VL53L1_SetLimitCheckEnable+0x34>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002384:	3500      	adds	r5, #0
 8002386:	bf18      	it	ne
 8002388:	2501      	movne	r5, #1
 800238a:	4434      	add	r4, r6
 800238c:	f884 5384 	strb.w	r5, [r4, #900]	; 0x384
 8002390:	bd70      	pop	{r4, r5, r6, pc}
 8002392:	e7f2      	b.n	800237a <VL53L1_SetLimitCheckEnable+0x16>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002394:	f06f 0003 	mvn.w	r0, #3
}
 8002398:	bd70      	pop	{r4, r5, r6, pc}

0800239a <VL53L1_SetLimitCheckValue>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800239a:	2901      	cmp	r1, #1
{
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	4604      	mov	r4, r0
 80023a0:	460d      	mov	r5, r1
 80023a2:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80023a4:	d811      	bhi.n	80023ca <VL53L1_SetLimitCheckValue+0x30>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80023a6:	1843      	adds	r3, r0, r1
		if (LimitChecksEnable == 0) {
 80023a8:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 80023ac:	b92b      	cbnz	r3, 80023ba <VL53L1_SetLimitCheckValue+0x20>
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80023ae:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80023b2:	f8c4 2388 	str.w	r2, [r4, #904]	; 0x388
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80023b6:	4618      	mov	r0, r3
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
			Status = SetLimitValue(Dev, LimitCheckId,
 80023ba:	f7ff fecc 	bl	8002156 <SetLimitValue>
			if (Status == VL53L1_ERROR_NONE) {
 80023be:	b930      	cbnz	r0, 80023ce <VL53L1_SetLimitCheckValue+0x34>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80023c0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80023c4:	f8c4 6388 	str.w	r6, [r4, #904]	; 0x388
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80023ca:	f06f 0003 	mvn.w	r0, #3
}
 80023ce:	bd70      	pop	{r4, r5, r6, pc}

080023d0 <VL53L1_DataInit>:
{
 80023d0:	b538      	push	{r3, r4, r5, lr}
		Status = VL53L1_data_init(Dev, 1);
 80023d2:	2101      	movs	r1, #1
{
 80023d4:	4604      	mov	r4, r0
		Status = VL53L1_data_init(Dev, 1);
 80023d6:	f000 fb3c 	bl	8002a52 <VL53L1_data_init>
	if (Status == VL53L1_ERROR_NONE) {
 80023da:	bb00      	cbnz	r0, 800241e <VL53L1_DataInit+0x4e>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80023dc:	2501      	movs	r5, #1
		PALDevDataSet(Dev, CurrentParameters.PresetMode,
 80023de:	2308      	movs	r3, #8
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80023e0:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80023e2:	f884 5378 	strb.w	r5, [r4, #888]	; 0x378
		PALDevDataSet(Dev, CurrentParameters.PresetMode,
 80023e6:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80023ea:	462a      	mov	r2, r5
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7ff ffb9 	bl	8002364 <VL53L1_SetLimitCheckEnable>
		if (Status == VL53L1_ERROR_NONE)
 80023f2:	b9a0      	cbnz	r0, 800241e <VL53L1_DataInit+0x4e>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80023f4:	462a      	mov	r2, r5
 80023f6:	4629      	mov	r1, r5
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff ffb3 	bl	8002364 <VL53L1_SetLimitCheckEnable>
	if (Status == VL53L1_ERROR_NONE) {
 80023fe:	b970      	cbnz	r0, 800241e <VL53L1_DataInit+0x4e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8002400:	4601      	mov	r1, r0
 8002402:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8002406:	4620      	mov	r0, r4
 8002408:	f7ff ffc7 	bl	800239a <VL53L1_SetLimitCheckValue>
	if (Status == VL53L1_ERROR_NONE) {
 800240c:	b938      	cbnz	r0, 800241e <VL53L1_DataInit+0x4e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 800240e:	4629      	mov	r1, r5
 8002410:	4620      	mov	r0, r4
}
 8002412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L1_SetLimitCheckValue(Dev,
 8002416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800241a:	f7ff bfbe 	b.w	800239a <VL53L1_SetLimitCheckValue>
}
 800241e:	bd38      	pop	{r3, r4, r5, pc}

08002420 <VL53L1_GetLimitCheckValue>:
{
 8002420:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002422:	4605      	mov	r5, r0
 8002424:	4616      	mov	r6, r2
	switch (LimitCheckId) {
 8002426:	460c      	mov	r4, r1
 8002428:	b121      	cbz	r1, 8002434 <VL53L1_GetLimitCheckValue+0x14>
 800242a:	2901      	cmp	r1, #1
 800242c:	d016      	beq.n	800245c <VL53L1_GetLimitCheckValue+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800242e:	f06f 0003 	mvn.w	r0, #3
 8002432:	e011      	b.n	8002458 <VL53L1_GetLimitCheckValue+0x38>
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8002434:	f10d 0106 	add.w	r1, sp, #6
 8002438:	f000 fb64 	bl	8002b04 <VL53L1_get_lite_sigma_threshold>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800243c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002440:	039b      	lsls	r3, r3, #14
	if (Status == VL53L1_ERROR_NONE) {
 8002442:	b948      	cbnz	r0, 8002458 <VL53L1_GetLimitCheckValue+0x38>
 8002444:	f104 02e0 	add.w	r2, r4, #224	; 0xe0
 8002448:	442c      	add	r4, r5
		if (TempFix1616 == 0) {
 800244a:	b973      	cbnz	r3, 800246a <VL53L1_GetLimitCheckValue+0x4a>
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800244c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8002450:	68ab      	ldr	r3, [r5, #8]
			*pLimitCheckValue = TempFix1616;
 8002452:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002454:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
}
 8002458:	b002      	add	sp, #8
 800245a:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800245c:	a901      	add	r1, sp, #4
 800245e:	f000 fb5a 	bl	8002b16 <VL53L1_get_lite_min_count_rate>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8002462:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002466:	025b      	lsls	r3, r3, #9
		break;
 8002468:	e7eb      	b.n	8002442 <VL53L1_GetLimitCheckValue+0x22>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800246a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
			*pLimitCheckValue = TempFix1616;
 800246e:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002470:	60ab      	str	r3, [r5, #8]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002472:	2301      	movs	r3, #1
 8002474:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
 8002478:	e7ee      	b.n	8002458 <VL53L1_GetLimitCheckValue+0x38>

0800247a <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800247a:	b510      	push	{r4, lr}
	VL53L1_State CurrPalState;

	LOG_FUNCTION_START("");

	CurrPalState = PALDevDataGet(Dev, PalState);
	switch (CurrPalState) {
 800247c:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
{
 8002480:	4604      	mov	r4, r0
	switch (CurrPalState) {
 8002482:	2b05      	cmp	r3, #5
 8002484:	d806      	bhi.n	8002494 <VL53L1_StartMeasurement+0x1a>
 8002486:	2b04      	cmp	r3, #4
 8002488:	d201      	bcs.n	800248e <VL53L1_StartMeasurement+0x14>
 800248a:	2b02      	cmp	r3, #2
 800248c:	d80c      	bhi.n	80024a8 <VL53L1_StartMeasurement+0x2e>
 800248e:	f06f 000d 	mvn.w	r0, #13
 8002492:	bd10      	pop	{r4, pc}
 8002494:	3b62      	subs	r3, #98	; 0x62
 8002496:	2b01      	cmp	r3, #1
 8002498:	d9f9      	bls.n	800248e <VL53L1_StartMeasurement+0x14>
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
		break;
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800249a:	f06f 0002 	mvn.w	r0, #2
 800249e:	bd10      	pop	{r4, pc}
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
		PALDevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80024a0:	2304      	movs	r3, #4
 80024a2:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 80024a6:	bd10      	pop	{r4, pc}
		Status = VL53L1_init_and_start_range(
 80024a8:	2206      	movs	r2, #6
 80024aa:	7881      	ldrb	r1, [r0, #2]
 80024ac:	f000 fb3c 	bl	8002b28 <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d0f5      	beq.n	80024a0 <VL53L1_StartMeasurement+0x26>


	LOG_FUNCTION_END(Status);
	return Status;
}
 80024b4:	bd10      	pop	{r4, pc}

080024b6 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 80024b6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	InternalDistanceMode = PALDevDataGet(Dev,
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = PALDevDataGet(Dev,
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 80024b8:	f890 237e 	ldrb.w	r2, [r0, #894]	; 0x37e
 80024bc:	f890 337f 	ldrb.w	r3, [r0, #895]	; 0x37f
{
 80024c0:	4604      	mov	r4, r0
	if (NewDistanceMode != InternalDistanceMode)
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d037      	beq.n	8002536 <VL53L1_ClearInterruptAndStartMeasurement+0x80>
	Status = VL53L1_get_user_zone(Dev, &user_zone);
 80024c6:	4669      	mov	r1, sp
 80024c8:	f000 f965 	bl	8002796 <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 80024cc:	bb88      	cbnz	r0, 8002532 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80024ce:	ab01      	add	r3, sp, #4
 80024d0:	aa02      	add	r2, sp, #8
 80024d2:	a903      	add	r1, sp, #12
 80024d4:	4620      	mov	r0, r4
	PresetMode = PALDevDataGet(Dev,
 80024d6:	f894 637c 	ldrb.w	r6, [r4, #892]	; 0x37c
	NewDistanceMode = PALDevDataGet(Dev,
 80024da:	f894 537f 	ldrb.w	r5, [r4, #895]	; 0x37f
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80024de:	f000 f8fd 	bl	80026dc <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 80024e2:	bb30      	cbnz	r0, 8002532 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_stop_range(Dev);
 80024e4:	4620      	mov	r0, r4
 80024e6:	f000 fbf3 	bl	8002cd0 <VL53L1_stop_range>
	if (Status == VL53L1_ERROR_NONE)
 80024ea:	bb10      	cbnz	r0, 8002532 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_WaitUs(Dev, 500);
 80024ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024f0:	4620      	mov	r0, r4
 80024f2:	f002 f8dd 	bl	80046b0 <VL53L1_WaitUs>
	if (Status == VL53L1_ERROR_NONE) {
 80024f6:	b9e0      	cbnz	r0, 8002532 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = SetPresetMode(Dev,
 80024f8:	6963      	ldr	r3, [r4, #20]
 80024fa:	462a      	mov	r2, r5
 80024fc:	4631      	mov	r1, r6
 80024fe:	4620      	mov	r0, r4
 8002500:	f7ff fdc2 	bl	8002088 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8002504:	b9a8      	cbnz	r0, 8002532 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8002506:	9b01      	ldr	r3, [sp, #4]
 8002508:	9a02      	ldr	r2, [sp, #8]
 800250a:	9903      	ldr	r1, [sp, #12]
 800250c:	4620      	mov	r0, r4
 800250e:	f000 f8cd 	bl	80026ac <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 8002512:	b970      	cbnz	r0, 8002532 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
			PALDevDataSet(Dev, LLData.range_config_timeout_us,
 8002514:	9b01      	ldr	r3, [sp, #4]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8002516:	4669      	mov	r1, sp
			PALDevDataSet(Dev, LLData.range_config_timeout_us,
 8002518:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800251a:	4620      	mov	r0, r4
 800251c:	f000 f92a 	bl	8002774 <VL53L1_set_user_zone>
	if (Status == VL53L1_ERROR_NONE) {
 8002520:	b938      	cbnz	r0, 8002532 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_init_and_start_range(
 8002522:	2206      	movs	r2, #6
 8002524:	78a1      	ldrb	r1, [r4, #2]
 8002526:	4620      	mov	r0, r4
 8002528:	f000 fafe 	bl	8002b28 <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 800252c:	b908      	cbnz	r0, 8002532 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		PALDevDataSet(Dev,
 800252e:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002532:	b004      	add	sp, #16
 8002534:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8002536:	7881      	ldrb	r1, [r0, #2]
 8002538:	f000 fc1a 	bl	8002d70 <VL53L1_clear_interrupt_and_enable_next_range>
 800253c:	e7f9      	b.n	8002532 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>

0800253e <VL53L1_WaitMeasurementDataReady>:

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800253e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002542:	f002 b818 	b.w	8004576 <VL53L1_poll_for_range_completion>
	...

08002548 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254a:	460c      	mov	r4, r1
 800254c:	4605      	mov	r5, r0
 800254e:	b0a3      	sub	sp, #140	; 0x8c

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8002550:	221c      	movs	r2, #28
 8002552:	21ff      	movs	r1, #255	; 0xff
 8002554:	4620      	mov	r0, r4
 8002556:	f002 fb96 	bl	8004c86 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800255a:	aa01      	add	r2, sp, #4
 800255c:	2102      	movs	r1, #2
 800255e:	4628      	mov	r0, r5
 8002560:	f000 fcbe 	bl	8002ee0 <VL53L1_get_device_results>
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8002564:	2800      	cmp	r0, #0
 8002566:	f040 8087 	bne.w	8002678 <VL53L1_GetRangingMeasurementData+0x130>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800256a:	f89d 3006 	ldrb.w	r3, [sp, #6]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800256e:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8002572:	7123      	strb	r3, [r4, #4]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002574:	f006 061f 	and.w	r6, r6, #31
	pRangeData->TimeStamp = presults_data->time_stamp;
 8002578:	9b03      	ldr	r3, [sp, #12]
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800257a:	2e07      	cmp	r6, #7

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
		Status = SetSimpleData(Dev, 1,
 800257c:	f89d 1007 	ldrb.w	r1, [sp, #7]
	pRangeData->TimeStamp = presults_data->time_stamp;
 8002580:	6023      	str	r3, [r4, #0]
 8002582:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8002586:	d038      	beq.n	80025fa <VL53L1_GetRangingMeasurementData+0xb2>
		if (presults_data->median_range_mm < SRL)
 8002588:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 800258c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
			RAS = LRAP * presults_data->median_range_mm;
 8002590:	bfaa      	itet	ge
 8002592:	f641 129a 	movwge	r2, #6554	; 0x199a
			RAS = SRAS * 65536;
 8002596:	f44f 12f0 	movlt.w	r2, #1966080	; 0x1e0000
			RAS = LRAP * presults_data->median_range_mm;
 800259a:	435a      	mulge	r2, r3
			partial = partial + (RAS >> 1);
 800259c:	4b39      	ldr	r3, [pc, #228]	; (8002684 <VL53L1_GetRangingMeasurementData+0x13c>)
 800259e:	0857      	lsrs	r7, r2, #1
 80025a0:	fb03 7300 	mla	r3, r3, r0, r7
			partial = partial / RAS;
 80025a4:	fbb3 f3f2 	udiv	r3, r3, r2
			partial = partial * 65536;
 80025a8:	041a      	lsls	r2, r3, #16
			if (partial <= GI)
 80025aa:	4b37      	ldr	r3, [pc, #220]	; (8002688 <VL53L1_GetRangingMeasurementData+0x140>)
 80025ac:	429a      	cmp	r2, r3
				SRQL = 50 * 65536;
 80025ae:	bf8c      	ite	hi
 80025b0:	f44f 1348 	movhi.w	r3, #3276800	; 0x320000
				SRQL = GI - partial;
 80025b4:	1a9b      	subls	r3, r3, r2
		finalvalue = (uint8_t)(SRQL >> 16);
 80025b6:	0c1b      	lsrs	r3, r3, #16
		returnvalue = MAX(50, MIN(100, finalvalue));
 80025b8:	2b32      	cmp	r3, #50	; 0x32
 80025ba:	d91e      	bls.n	80025fa <VL53L1_GetRangingMeasurementData+0xb2>
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	bf28      	it	cs
 80025c2:	2364      	movcs	r3, #100	; 0x64
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80025c4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80025c8:	7163      	strb	r3, [r4, #5]
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80025ca:	0252      	lsls	r2, r2, #9
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80025cc:	60e2      	str	r2, [r4, #12]
	pRangeData->EffectiveSpadRtnCount =
 80025ce:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80025d2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	pRangeData->EffectiveSpadRtnCount =
 80025d6:	8222      	strh	r2, [r4, #16]
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80025d8:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80025dc:	025b      	lsls	r3, r3, #9
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80025de:	8322      	strh	r2, [r4, #24]
	pRangeData->RangeFractionalPart = 0;
 80025e0:	2200      	movs	r2, #0
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80025e2:	0240      	lsls	r0, r0, #9
	switch (device_status) {
 80025e4:	290d      	cmp	r1, #13
		= SignalRate;
 80025e6:	60a3      	str	r3, [r4, #8]
	pRangeData->SigmaMilliMeter = TempFix1616;
 80025e8:	6160      	str	r0, [r4, #20]
	pRangeData->RangeFractionalPart = 0;
 80025ea:	76a2      	strb	r2, [r4, #26]
	switch (device_status) {
 80025ec:	d00b      	beq.n	8002606 <VL53L1_GetRangingMeasurementData+0xbe>
 80025ee:	d806      	bhi.n	80025fe <VL53L1_GetRangingMeasurementData+0xb6>
 80025f0:	3901      	subs	r1, #1
 80025f2:	2902      	cmp	r1, #2
 80025f4:	d805      	bhi.n	8002602 <VL53L1_GetRangingMeasurementData+0xba>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 80025f6:	2205      	movs	r2, #5
 80025f8:	e003      	b.n	8002602 <VL53L1_GetRangingMeasurementData+0xba>
		returnvalue = 50;
 80025fa:	2332      	movs	r3, #50	; 0x32
 80025fc:	e7e2      	b.n	80025c4 <VL53L1_GetRangingMeasurementData+0x7c>
	switch (device_status) {
 80025fe:	2911      	cmp	r1, #17
 8002600:	d0f9      	beq.n	80025f6 <VL53L1_GetRangingMeasurementData+0xae>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002602:	76e2      	strb	r2, [r4, #27]
 8002604:	e000      	b.n	8002608 <VL53L1_GetRangingMeasurementData+0xc0>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8002606:	76e1      	strb	r1, [r4, #27]
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8002608:	7ee2      	ldrb	r2, [r4, #27]
 800260a:	b93a      	cbnz	r2, 800261c <VL53L1_GetRangingMeasurementData+0xd4>
 800260c:	1f32      	subs	r2, r6, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	2a0f      	cmp	r2, #15
 8002612:	bf8e      	itee	hi
 8002614:	22ff      	movhi	r2, #255	; 0xff
 8002616:	491d      	ldrls	r1, [pc, #116]	; (800268c <VL53L1_GetRangingMeasurementData+0x144>)
 8002618:	5c8a      	ldrbls	r2, [r1, r2]
			pRangeData->RangeStatus =
 800261a:	76e2      	strb	r2, [r4, #27]
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800261c:	f8c5 0390 	str.w	r0, [r5, #912]	; 0x390
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002620:	f8c5 3394 	str.w	r3, [r5, #916]	; 0x394
	VL53L1_GetLimitCheckValue(Dev,
 8002624:	466a      	mov	r2, sp
 8002626:	2100      	movs	r1, #0
 8002628:	4628      	mov	r0, r5
 800262a:	f7ff fef9 	bl	8002420 <VL53L1_GetLimitCheckValue>
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800262e:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 8002632:	2b01      	cmp	r3, #1
 8002634:	d122      	bne.n	800267c <VL53L1_GetRangingMeasurementData+0x134>
 8002636:	1fb2      	subs	r2, r6, #6
 8002638:	4253      	negs	r3, r2
 800263a:	4153      	adcs	r3, r2
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800263c:	f885 3386 	strb.w	r3, [r5, #902]	; 0x386
	VL53L1_GetLimitCheckValue(Dev,
 8002640:	466a      	mov	r2, sp
 8002642:	2101      	movs	r1, #1
 8002644:	4628      	mov	r0, r5
 8002646:	f7ff feeb 	bl	8002420 <VL53L1_GetLimitCheckValue>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800264a:	f895 3385 	ldrb.w	r3, [r5, #901]	; 0x385
 800264e:	2b01      	cmp	r3, #1
 8002650:	d116      	bne.n	8002680 <VL53L1_GetRangingMeasurementData+0x138>
 8002652:	1f33      	subs	r3, r6, #4
 8002654:	425e      	negs	r6, r3
 8002656:	415e      	adcs	r6, r3
 8002658:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800265c:	7ee3      	ldrb	r3, [r4, #27]
 800265e:	b953      	cbnz	r3, 8002676 <VL53L1_GetRangingMeasurementData+0x12e>
	Range = pRangeData->RangeMilliMeter;
 8002660:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002664:	2a00      	cmp	r2, #0
 8002666:	da06      	bge.n	8002676 <VL53L1_GetRangingMeasurementData+0x12e>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8002668:	4909      	ldr	r1, [pc, #36]	; (8002690 <VL53L1_GetRangingMeasurementData+0x148>)
 800266a:	6849      	ldr	r1, [r1, #4]
 800266c:	428a      	cmp	r2, r1
			pRangeData->RangeStatus =
 800266e:	bfb6      	itet	lt
 8002670:	230e      	movlt	r3, #14
			pRangeData->RangeMilliMeter = 0;
 8002672:	8323      	strhge	r3, [r4, #24]
			pRangeData->RangeStatus =
 8002674:	76e3      	strblt	r3, [r4, #27]
		Status = SetSimpleData(Dev, 1,
 8002676:	2000      	movs	r0, #0
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002678:	b023      	add	sp, #140	; 0x8c
 800267a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800267c:	2300      	movs	r3, #0
 800267e:	e7dd      	b.n	800263c <VL53L1_GetRangingMeasurementData+0xf4>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8002680:	2600      	movs	r6, #0
 8002682:	e7e9      	b.n	8002658 <VL53L1_GetRangingMeasurementData+0x110>
 8002684:	0030cccd 	.word	0x0030cccd
 8002688:	0075b333 	.word	0x0075b333
 800268c:	08007ae0 	.word	0x08007ae0
 8002690:	20000008 	.word	0x20000008

08002694 <VL53L1_set_inter_measurement_period_ms>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8002694:	f8b0 32b4 	ldrh.w	r3, [r0, #692]	; 0x2b4
 8002698:	b913      	cbnz	r3, 80026a0 <VL53L1_set_inter_measurement_period_ms+0xc>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800269a:	f06f 000e 	mvn.w	r0, #14
 800269e:	4770      	bx	lr

	if (status == VL53L1_ERROR_NONE) {
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80026a0:	6141      	str	r1, [r0, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
 80026a2:	4359      	muls	r1, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 80026a4:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80026a8:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80026aa:	4770      	bx	lr

080026ac <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80026ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026ae:	460d      	mov	r5, r1
 80026b0:	4611      	mov	r1, r2
 80026b2:	461a      	mov	r2, r3
	VL53L1_LLDriverData_t *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80026b4:	f8b0 315e 	ldrh.w	r3, [r0, #350]	; 0x15e
 80026b8:	b91b      	cbnz	r3, 80026c2 <VL53L1_set_timeouts_us+0x16>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80026ba:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80026be:	b003      	add	sp, #12
 80026c0:	bd30      	pop	{r4, r5, pc}
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80026c2:	6085      	str	r5, [r0, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80026c4:	60c1      	str	r1, [r0, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80026c6:	6102      	str	r2, [r0, #16]
			VL53L1_calc_timeout_register_values(
 80026c8:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
 80026cc:	f500 70c2 	add.w	r0, r0, #388	; 0x184
		status =
 80026d0:	9000      	str	r0, [sp, #0]
 80026d2:	9401      	str	r4, [sp, #4]
 80026d4:	4628      	mov	r0, r5
 80026d6:	f001 f946 	bl	8003966 <VL53L1_calc_timeout_register_values>
	return status;
 80026da:	e7f0      	b.n	80026be <VL53L1_set_timeouts_us+0x12>

080026dc <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80026dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e0:	4604      	mov	r4, r0
	uint32_t  macro_period_us = 0;
	uint16_t  timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80026e2:	f8b0 015e 	ldrh.w	r0, [r0, #350]	; 0x15e
{
 80026e6:	460f      	mov	r7, r1
 80026e8:	4690      	mov	r8, r2
 80026ea:	461e      	mov	r6, r3
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80026ec:	b918      	cbnz	r0, 80026f6 <VL53L1_get_timeouts_us+0x1a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80026ee:	f06f 000e 	mvn.w	r0, #14
 80026f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (status == VL53L1_ERROR_NONE) {

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 80026f6:	f894 11a2 	ldrb.w	r1, [r4, #418]	; 0x1a2
 80026fa:	f001 f8cf 	bl	800389c <VL53L1_calc_macro_period_us>
 80026fe:	4605      	mov	r5, r0
				pdev->tim_cfg.range_config__vcsel_period_a);

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
 8002700:	4601      	mov	r1, r0
 8002702:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
 8002706:	f001 f8fd 	bl	8003904 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 800270a:	6038      	str	r0, [r7, #0]
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
 800270c:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8002710:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8002714:	4629      	mov	r1, r5
		timeout_encoded = (timeout_encoded << 8) +
 8002716:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 800271a:	b280      	uxth	r0, r0
 800271c:	f001 f917 	bl	800394e <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8002720:	f8c8 0000 	str.w	r0, [r8]
				timeout_encoded,
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
 8002724:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8002728:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800272c:	4629      	mov	r1, r5
		timeout_encoded = (timeout_encoded << 8) +
 800272e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 8002732:	b280      	uxth	r0, r0
 8002734:	f001 f90b 	bl	800394e <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 8002738:	6030      	str	r0, [r6, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800273a:	683b      	ldr	r3, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800273c:	2000      	movs	r0, #0
		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800273e:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8002740:	f8d8 3000 	ldr.w	r3, [r8]
 8002744:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8002746:	6833      	ldr	r3, [r6, #0]
 8002748:	6123      	str	r3, [r4, #16]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800274a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800274e <VL53L1_get_sequence_config_bit>:
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800274e:	2907      	cmp	r1, #7
 8002750:	d80d      	bhi.n	800276e <VL53L1_get_sequence_config_bit+0x20>
 8002752:	2301      	movs	r3, #1

		if (bit_id > 0) {
 8002754:	b101      	cbz	r1, 8002758 <VL53L1_get_sequence_config_bit+0xa>
			bit_mask  = 0x01 << bit_id;
 8002756:	408b      	lsls	r3, r1
		}

		*pvalue =
 8002758:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
 800275c:	4018      	ands	r0, r3
			pdev->dyn_cfg.system__sequence_config & bit_mask;

		if (bit_id > 0) {
 800275e:	b911      	cbnz	r1, 8002766 <VL53L1_get_sequence_config_bit+0x18>
		*pvalue =
 8002760:	7010      	strb	r0, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002762:	2000      	movs	r0, #0
 8002764:	4770      	bx	lr
			*pvalue  = *pvalue >> bit_id;
 8002766:	fa40 f101 	asr.w	r1, r0, r1
 800276a:	7011      	strb	r1, [r2, #0]
 800276c:	e7f9      	b.n	8002762 <VL53L1_get_sequence_config_bit+0x14>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800276e:	f06f 0003 	mvn.w	r0, #3
	}

	return status;
}
 8002772:	4770      	bx	lr

08002774 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	460c      	mov	r4, r1
 8002778:	4605      	mov	r5, r0
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800277a:	f200 12c3 	addw	r2, r0, #451	; 0x1c3
 800277e:	7809      	ldrb	r1, [r1, #0]
 8002780:	7860      	ldrb	r0, [r4, #1]
 8002782:	f001 f92f 	bl	80039e4 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8002786:	78a0      	ldrb	r0, [r4, #2]
 8002788:	f505 72e2 	add.w	r2, r5, #452	; 0x1c4
 800278c:	78e1      	ldrb	r1, [r4, #3]
 800278e:	f001 f93a 	bl	8003a06 <VL53L1_encode_zone_size>
	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
}
 8002792:	2000      	movs	r0, #0
 8002794:	bd38      	pop	{r3, r4, r5, pc}

08002796 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8002796:	b538      	push	{r3, r4, r5, lr}
 8002798:	460c      	mov	r4, r1
 800279a:	4605      	mov	r5, r0
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800279c:	460a      	mov	r2, r1
 800279e:	f890 01c3 	ldrb.w	r0, [r0, #451]	; 0x1c3
 80027a2:	3101      	adds	r1, #1
 80027a4:	f001 f9c0 	bl	8003b28 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 80027a8:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
 80027ac:	1ce2      	adds	r2, r4, #3
 80027ae:	1ca1      	adds	r1, r4, #2
 80027b0:	f001 f923 	bl	80039fa <VL53L1_decode_zone_size>
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
}
 80027b4:	2000      	movs	r0, #0
 80027b6:	bd38      	pop	{r3, r4, r5, pc}

080027b8 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 80027b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  x       = 0;
 80027ba:	2500      	movs	r5, #0
{
 80027bc:	460c      	mov	r4, r1
 80027be:	4606      	mov	r6, r0
	uint8_t  xy_size = 0;

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 80027c0:	f10d 0206 	add.w	r2, sp, #6
 80027c4:	f10d 0107 	add.w	r1, sp, #7
 80027c8:	f890 022a 	ldrb.w	r0, [r0, #554]	; 0x22a
	uint8_t  x       = 0;
 80027cc:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t  y       = 0;
 80027d0:	f88d 5007 	strb.w	r5, [sp, #7]
	VL53L1_decode_row_col(
 80027d4:	f001 f9a8 	bl	8003b28 <VL53L1_decode_row_col>
	pmm_roi->width  = xy_size & 0x0F;

	LOG_FUNCTION_END(status);

	return status;
}
 80027d8:	4628      	mov	r0, r5
	pmm_roi->x_centre = x;
 80027da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80027de:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 80027e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027e4:	7063      	strb	r3, [r4, #1]
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 80027e6:	f896 322b 	ldrb.w	r3, [r6, #555]	; 0x22b
	pmm_roi->height = xy_size >> 4;
 80027ea:	091a      	lsrs	r2, r3, #4
	pmm_roi->width  = xy_size & 0x0F;
 80027ec:	f003 030f 	and.w	r3, r3, #15
	pmm_roi->height = xy_size >> 4;
 80027f0:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80027f2:	70a3      	strb	r3, [r4, #2]
}
 80027f4:	b002      	add	sp, #8
 80027f6:	bd70      	pop	{r4, r5, r6, pc}

080027f8 <VL53L1_read_p2p_data>:
{
 80027f8:	b538      	push	{r3, r4, r5, lr}
		status = VL53L1_get_static_nvm_managed(
 80027fa:	f500 71ac 	add.w	r1, r0, #344	; 0x158
{
 80027fe:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 8002800:	f001 fa07 	bl	8003c12 <VL53L1_get_static_nvm_managed>
	if (status == VL53L1_ERROR_NONE)
 8002804:	b9b8      	cbnz	r0, 8002836 <VL53L1_read_p2p_data+0x3e>
		status = VL53L1_get_customer_nvm_managed(
 8002806:	f104 0142 	add.w	r1, r4, #66	; 0x42
 800280a:	4620      	mov	r0, r4
 800280c:	f001 fabe 	bl	8003d8c <VL53L1_get_customer_nvm_managed>
	if (status == VL53L1_ERROR_NONE) {
 8002810:	b988      	cbnz	r0, 8002836 <VL53L1_read_p2p_data+0x3e>
		status = VL53L1_get_nvm_copy_data(
 8002812:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
 8002816:	4629      	mov	r1, r5
 8002818:	4620      	mov	r0, r4
 800281a:	f001 fe81 	bl	8004520 <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 800281e:	b950      	cbnz	r0, 8002836 <VL53L1_read_p2p_data+0x3e>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8002820:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8002824:	4628      	mov	r0, r5
 8002826:	f000 ffa0 	bl	800376a <VL53L1_copy_rtn_good_spads_to_buffer>
		status =
 800282a:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 800282e:	21de      	movs	r1, #222	; 0xde
 8002830:	4620      	mov	r0, r4
 8002832:	f001 ff1f 	bl	8004674 <VL53L1_RdWord>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8002836:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800283e:	bf3c      	itt	cc
 8002840:	f64b 43cc 	movwcc	r3, #48332	; 0xbccc
 8002844:	f8a4 315e 	strhcc.w	r3, [r4, #350]	; 0x15e
	if (status == VL53L1_ERROR_NONE)
 8002848:	b920      	cbnz	r0, 8002854 <VL53L1_read_p2p_data+0x5c>
		status =
 800284a:	f104 019e 	add.w	r1, r4, #158	; 0x9e
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff ffb2 	bl	80027b8 <VL53L1_get_mode_mitigation_roi>
	if (pdev->optical_centre.x_centre == 0 &&
 8002854:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 8002858:	b94b      	cbnz	r3, 800286e <VL53L1_read_p2p_data+0x76>
				pdev->mm_roi.x_centre << 4;
 800285a:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 800285e:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 8002860:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
				pdev->mm_roi.y_centre << 4;
 8002864:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8002868:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 800286a:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
}
 800286e:	bd38      	pop	{r3, r4, r5, pc}

08002870 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8002870:	b530      	push	{r4, r5, lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8002872:	2908      	cmp	r1, #8
{
 8002874:	9d03      	ldr	r5, [sp, #12]
 8002876:	9c04      	ldr	r4, [sp, #16]
	switch (device_preset_mode) {
 8002878:	d810      	bhi.n	800289c <VL53L1_get_preset_mode_timing_cfg+0x2c>
 800287a:	2906      	cmp	r1, #6
 800287c:	d225      	bcs.n	80028ca <VL53L1_get_preset_mode_timing_cfg+0x5a>
 800287e:	b191      	cbz	r1, 80028a6 <VL53L1_get_preset_mode_timing_cfg+0x36>
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8002880:	f8b0 10ca 	ldrh.w	r1, [r0, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8002884:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8002886:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800288a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800288c:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*pmm_config_timeout_us =
 8002890:	602b      	str	r3, [r5, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8002892:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
				pdev->tuning_parms.tp_dss_target_timed_mcps;
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
		*prange_config_timeout_us =
 8002896:	6023      	str	r3, [r4, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002898:	2000      	movs	r0, #0
				pdev->tuning_parms.tp_range_timeout_lpa_us;
	break;
 800289a:	bd30      	pop	{r4, r5, pc}
	switch (device_preset_mode) {
 800289c:	2912      	cmp	r1, #18
 800289e:	d014      	beq.n	80028ca <VL53L1_get_preset_mode_timing_cfg+0x5a>
 80028a0:	d804      	bhi.n	80028ac <VL53L1_get_preset_mode_timing_cfg+0x3c>
 80028a2:	2911      	cmp	r1, #17
 80028a4:	d0ec      	beq.n	8002880 <VL53L1_get_preset_mode_timing_cfg+0x10>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80028a6:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80028aa:	bd30      	pop	{r4, r5, pc}
	switch (device_preset_mode) {
 80028ac:	3924      	subs	r1, #36	; 0x24
 80028ae:	2902      	cmp	r1, #2
 80028b0:	d8f9      	bhi.n	80028a6 <VL53L1_get_preset_mode_timing_cfg+0x36>
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 80028b2:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 80028b6:	8011      	strh	r1, [r2, #0]
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80028b8:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 80028bc:	601a      	str	r2, [r3, #0]
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80028be:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*pmm_config_timeout_us =
 80028c2:	602b      	str	r3, [r5, #0]
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 80028c4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80028c8:	e7e5      	b.n	8002896 <VL53L1_get_preset_mode_timing_cfg+0x26>
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 80028ca:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 80028ce:	8011      	strh	r1, [r2, #0]
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80028d0:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 80028d4:	601a      	str	r2, [r3, #0]
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 80028d6:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*pmm_config_timeout_us =
 80028da:	602b      	str	r3, [r5, #0]
				pdev->tuning_parms.tp_range_timeout_timed_us;
 80028dc:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 80028e0:	e7d9      	b.n	8002896 <VL53L1_get_preset_mode_timing_cfg+0x26>

080028e2 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80028e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e6:	4604      	mov	r4, r0
 80028e8:	4688      	mov	r8, r1
 80028ea:	b08b      	sub	sp, #44	; 0x2c
 80028ec:	9307      	str	r3, [sp, #28]
 80028ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 80028f0:	7061      	strb	r1, [r4, #1]
{
 80028f2:	9304      	str	r3, [sp, #16]
 80028f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80028f6:	4691      	mov	r9, r2
 80028f8:	9305      	str	r3, [sp, #20]
 80028fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80028fc:	f500 72ce 	add.w	r2, r0, #412	; 0x19c
{
 8002900:	9306      	str	r3, [sp, #24]
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8002902:	f500 73da 	add.w	r3, r0, #436	; 0x1b4
 8002906:	9308      	str	r3, [sp, #32]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8002908:	9b04      	ldr	r3, [sp, #16]
	pdev->range_config_timeout_us     = range_config_timeout_us;
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800290a:	2103      	movs	r1, #3
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800290c:	60c3      	str	r3, [r0, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800290e:	9b05      	ldr	r3, [sp, #20]
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8002910:	f108 38ff 	add.w	r8, r8, #4294967295
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8002914:	6103      	str	r3, [r0, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8002916:	9b06      	ldr	r3, [sp, #24]
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8002918:	9209      	str	r2, [sp, #36]	; 0x24
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800291a:	6143      	str	r3, [r0, #20]
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800291c:	f500 75b2 	add.w	r5, r0, #356	; 0x164
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8002920:	f500 76c2 	add.w	r6, r0, #388	; 0x184
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8002924:	f500 77e4 	add.w	r7, r0, #456	; 0x1c8
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8002928:	f100 0aa4 	add.w	sl, r0, #164	; 0xa4
	VL53L1_low_power_auto_data_t  *plpadata      =
 800292c:	f500 7b39 	add.w	fp, r0, #740	; 0x2e4
	VL53L1_init_ll_driver_state(
 8002930:	f000 fe58 	bl	80035e4 <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 8002934:	9b08      	ldr	r3, [sp, #32]
 8002936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002938:	f1b8 0f25 	cmp.w	r8, #37	; 0x25
 800293c:	f200 8084 	bhi.w	8002a48 <VL53L1_set_preset_mode+0x166>
 8002940:	e8df f008 	tbb	[pc, r8]
 8002944:	3c352e13 	.word	0x3c352e13
 8002948:	58514a43 	.word	0x58514a43
 800294c:	82828282 	.word	0x82828282
 8002950:	82828282 	.word	0x82828282
 8002954:	8282665f 	.word	0x8282665f
 8002958:	82828282 	.word	0x82828282
 800295c:	82828282 	.word	0x82828282
 8002960:	82828282 	.word	0x82828282
 8002964:	6d828282 	.word	0x6d828282
 8002968:	7b74      	.short	0x7b74

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800296a:	e88d 0480 	stmia.w	sp, {r7, sl}
 800296e:	4631      	mov	r1, r6
 8002970:	4628      	mov	r0, r5
 8002972:	f000 fc75 	bl	8003260 <VL53L1_preset_mode_standard_ranging>

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8002976:	2800      	cmp	r0, #0
 8002978:	d168      	bne.n	8002a4c <VL53L1_set_preset_mode+0x16a>

		pstatic->dss_config__target_total_rate_mcps =
 800297a:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800297e:	f8a4 9018 	strh.w	r9, [r4, #24]
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
		status =
 8002982:	9b05      	ldr	r3, [sp, #20]
 8002984:	9a04      	ldr	r2, [sp, #16]
 8002986:	9907      	ldr	r1, [sp, #28]
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff fe8f 	bl	80026ac <VL53L1_set_timeouts_us>
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800298e:	2800      	cmp	r0, #0
 8002990:	d15c      	bne.n	8002a4c <VL53L1_set_preset_mode+0x16a>
		status =
 8002992:	4620      	mov	r0, r4
 8002994:	9906      	ldr	r1, [sp, #24]
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
}
 8002996:	b00b      	add	sp, #44	; 0x2c
 8002998:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		status =
 800299c:	f7ff be7a 	b.w	8002694 <VL53L1_set_inter_measurement_period_ms>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80029a0:	e88d 0480 	stmia.w	sp, {r7, sl}
 80029a4:	4631      	mov	r1, r6
 80029a6:	4628      	mov	r0, r5
 80029a8:	f000 fcfe 	bl	80033a8 <VL53L1_preset_mode_standard_ranging_short_range>
		break;
 80029ac:	e7e3      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80029ae:	e88d 0480 	stmia.w	sp, {r7, sl}
 80029b2:	4631      	mov	r1, r6
 80029b4:	4628      	mov	r0, r5
 80029b6:	f000 fd15 	bl	80033e4 <VL53L1_preset_mode_standard_ranging_long_range>
		break;
 80029ba:	e7dc      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80029bc:	e88d 0480 	stmia.w	sp, {r7, sl}
 80029c0:	4631      	mov	r1, r6
 80029c2:	4628      	mov	r0, r5
 80029c4:	f000 fd2c 	bl	8003420 <VL53L1_preset_mode_standard_ranging_mm1_cal>
		break;
 80029c8:	e7d5      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80029ca:	e88d 0480 	stmia.w	sp, {r7, sl}
 80029ce:	4631      	mov	r1, r6
 80029d0:	4628      	mov	r0, r5
 80029d2:	f000 fd35 	bl	8003440 <VL53L1_preset_mode_standard_ranging_mm2_cal>
		break;
 80029d6:	e7ce      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging(
 80029d8:	e88d 0480 	stmia.w	sp, {r7, sl}
 80029dc:	4631      	mov	r1, r6
 80029de:	4628      	mov	r0, r5
 80029e0:	f000 fd3e 	bl	8003460 <VL53L1_preset_mode_timed_ranging>
		break;
 80029e4:	e7c7      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80029e6:	e88d 0480 	stmia.w	sp, {r7, sl}
 80029ea:	4631      	mov	r1, r6
 80029ec:	4628      	mov	r0, r5
 80029ee:	f000 fd52 	bl	8003496 <VL53L1_preset_mode_timed_ranging_short_range>
		break;
 80029f2:	e7c0      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 80029f4:	e88d 0480 	stmia.w	sp, {r7, sl}
 80029f8:	4631      	mov	r1, r6
 80029fa:	4628      	mov	r0, r5
 80029fc:	f000 fd67 	bl	80034ce <VL53L1_preset_mode_timed_ranging_long_range>
		break;
 8002a00:	e7b9      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_olt(
 8002a02:	e88d 0480 	stmia.w	sp, {r7, sl}
 8002a06:	4631      	mov	r1, r6
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f000 fdd2 	bl	80035b2 <VL53L1_preset_mode_olt>
		break;
 8002a0e:	e7b2      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_singleshot_ranging(
 8002a10:	e88d 0480 	stmia.w	sp, {r7, sl}
 8002a14:	4631      	mov	r1, r6
 8002a16:	4628      	mov	r0, r5
 8002a18:	f000 fdb3 	bl	8003582 <VL53L1_preset_mode_singleshot_ranging>
		break;
 8002a1c:	e7ab      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8002a1e:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 8002a22:	4631      	mov	r1, r6
 8002a24:	4628      	mov	r0, r5
 8002a26:	f000 fd82 	bl	800352e <VL53L1_preset_mode_low_power_auto_short_ranging>
		break;
 8002a2a:	e7a4      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8002a2c:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 8002a30:	4631      	mov	r1, r6
 8002a32:	4628      	mov	r0, r5
 8002a34:	f000 fd66 	bl	8003504 <VL53L1_preset_mode_low_power_auto_ranging>
		break;
 8002a38:	e79d      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8002a3a:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 8002a3e:	4631      	mov	r1, r6
 8002a40:	4628      	mov	r0, r5
 8002a42:	f000 fd89 	bl	8003558 <VL53L1_preset_mode_low_power_auto_long_ranging>
		break;
 8002a46:	e796      	b.n	8002976 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_ERROR_INVALID_PARAMS;
 8002a48:	f06f 0003 	mvn.w	r0, #3
}
 8002a4c:	b00b      	add	sp, #44	; 0x2c
 8002a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002a52 <VL53L1_data_init>:
{
 8002a52:	b530      	push	{r4, r5, lr}
 8002a54:	460d      	mov	r5, r1
 8002a56:	b085      	sub	sp, #20
	VL53L1_init_ll_driver_state(
 8002a58:	2162      	movs	r1, #98	; 0x62
{
 8002a5a:	4604      	mov	r4, r0
	VL53L1_init_ll_driver_state(
 8002a5c:	f000 fdc2 	bl	80035e4 <VL53L1_init_ll_driver_state>
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8002a60:	2201      	movs	r2, #1
 8002a62:	7062      	strb	r2, [r4, #1]
	pdev->offset_calibration_mode =
 8002a64:	70e2      	strb	r2, [r4, #3]
	pdev->offset_correction_mode  =
 8002a66:	7122      	strb	r2, [r4, #4]
	pdev->phasecal_config_timeout_us  =  1000;
 8002a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a6c:	60a2      	str	r2, [r4, #8]
	pdev->mm_config_timeout_us        =  2000;
 8002a6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a72:	60e2      	str	r2, [r4, #12]
	pdev->range_config_timeout_us     = 13000;
 8002a74:	f243 22c8 	movw	r2, #13000	; 0x32c8
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8002a78:	2300      	movs	r3, #0
	pdev->range_config_timeout_us     = 13000;
 8002a7a:	6122      	str	r2, [r4, #16]
	pdev->inter_measurement_period_ms =   100;
 8002a7c:	2264      	movs	r2, #100	; 0x64
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8002a7e:	7023      	strb	r3, [r4, #0]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8002a80:	70a3      	strb	r3, [r4, #2]
	pdev->inter_measurement_period_ms =   100;
 8002a82:	6162      	str	r2, [r4, #20]
	pdev->debug_mode                  =  0x00;
 8002a84:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8002a88:	f44f 6220 	mov.w	r2, #2560	; 0xa00
	pdev->gain_cal.standard_ranging_gain_factor =
 8002a8c:	f240 73db 	movw	r3, #2011	; 0x7db
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8002a90:	8322      	strh	r2, [r4, #24]
	pdev->gain_cal.standard_ranging_gain_factor =
 8002a92:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
	VL53L1_init_version(Dev);
 8002a96:	4620      	mov	r0, r4
 8002a98:	f000 fd97 	bl	80035ca <VL53L1_init_version>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8002a9c:	b115      	cbz	r5, 8002aa4 <VL53L1_data_init+0x52>
			status = VL53L1_read_p2p_data(Dev);
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff feaa 	bl	80027f8 <VL53L1_read_p2p_data>
	status =
 8002aa4:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8002aa8:	f000 fb37 	bl	800311a <VL53L1_init_refspadchar_config_struct>
	status =
 8002aac:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8002ab0:	f000 fb45 	bl	800313e <VL53L1_init_ssc_config_struct>
	status =
 8002ab4:	f504 7196 	add.w	r1, r4, #300	; 0x12c
 8002ab8:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8002abc:	f000 fb4e 	bl	800315c <VL53L1_init_xtalk_config_struct>
	status =
 8002ac0:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8002ac4:	f000 fb6f 	bl	80031a6 <VL53L1_init_offset_cal_config_struct>
	status =
 8002ac8:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8002acc:	f000 fb7d 	bl	80031ca <VL53L1_init_tuning_parm_storage_struct>
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8002ad0:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 8002ad4:	8b22      	ldrh	r2, [r4, #24]
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	3b80      	subs	r3, #128	; 0x80
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8002adc:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 8002ae0:	6963      	ldr	r3, [r4, #20]
 8002ae2:	7861      	ldrb	r1, [r4, #1]
 8002ae4:	9302      	str	r3, [sp, #8]
 8002ae6:	6923      	ldr	r3, [r4, #16]
 8002ae8:	4620      	mov	r0, r4
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	68e3      	ldr	r3, [r4, #12]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	68a3      	ldr	r3, [r4, #8]
 8002af2:	f7ff fef6 	bl	80028e2 <VL53L1_set_preset_mode>
 8002af6:	4605      	mov	r5, r0
	VL53L1_low_power_auto_data_init(
 8002af8:	4620      	mov	r0, r4
 8002afa:	f000 ff88 	bl	8003a0e <VL53L1_low_power_auto_data_init>
}
 8002afe:	4628      	mov	r0, r5
 8002b00:	b005      	add	sp, #20
 8002b02:	bd30      	pop	{r4, r5, pc}

08002b04 <VL53L1_get_lite_sigma_threshold>:
			pdev->tim_cfg.range_config__sigma_thresh;
 8002b04:	f8b0 31a6 	ldrh.w	r3, [r0, #422]	; 0x1a6
}
 8002b08:	2000      	movs	r0, #0
	*plite_sigma =
 8002b0a:	800b      	strh	r3, [r1, #0]
}
 8002b0c:	4770      	bx	lr

08002b0e <VL53L1_set_lite_sigma_threshold>:
	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8002b0e:	f8a0 11a6 	strh.w	r1, [r0, #422]	; 0x1a6
}
 8002b12:	2000      	movs	r0, #0
 8002b14:	4770      	bx	lr

08002b16 <VL53L1_get_lite_min_count_rate>:
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8002b16:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
}
 8002b1a:	2000      	movs	r0, #0
	*plite_mincountrate =
 8002b1c:	800b      	strh	r3, [r1, #0]
}
 8002b1e:	4770      	bx	lr

08002b20 <VL53L1_set_lite_min_count_rate>:
	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8002b20:	f8a0 11a8 	strh.w	r1, [r0, #424]	; 0x1a8
}
 8002b24:	2000      	movs	r0, #0
 8002b26:	4770      	bx	lr

08002b28 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8002b28:	b570      	push	{r4, r5, r6, lr}
	pdev->measurement_mode = measurement_mode;

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8002b2a:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
	pdev->measurement_mode = measurement_mode;
 8002b2e:	7081      	strb	r1, [r0, #2]
		(psystem->system__mode_start &
 8002b30:	f003 030f 	and.w	r3, r3, #15
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8002b34:	4319      	orrs	r1, r3
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8002b36:	f8b0 3142 	ldrh.w	r3, [r0, #322]	; 0x142
{
 8002b3a:	b0c0      	sub	sp, #256	; 0x100
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8002b3c:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8002b40:	f890 32e6 	ldrb.w	r3, [r0, #742]	; 0x2e6
{
 8002b44:	4604      	mov	r4, r0
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8002b46:	2bff      	cmp	r3, #255	; 0xff
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8002b48:	bf04      	itt	eq
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	f880 32e6 	strbeq.w	r3, [r0, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002b50:	f8d0 32e4 	ldr.w	r3, [r0, #740]	; 0x2e4
	psystem->system__mode_start =
 8002b54:	f880 11cc 	strb.w	r1, [r0, #460]	; 0x1cc
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002b58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b64:	d114      	bne.n	8002b90 <VL53L1_init_and_start_range+0x68>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
 8002b66:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
 8002b6a:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
			pdev->gen_cfg.system__interrupt_config_gpio;
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8002b74:	f890 31c5 	ldrb.w	r3, [r0, #453]	; 0x1c5
 8002b78:	f013 0f60 	tst.w	r3, #96	; 0x60
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8002b7c:	bf0a      	itet	eq
 8002b7e:	f8b0 3058 	ldrheq.w	r3, [r0, #88]	; 0x58
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8002b82:	2300      	movne	r3, #0
				pdev->customer.mm_config__outer_offset_mm * 4;
 8002b84:	009b      	lsleq	r3, r3, #2
 8002b86:	2a05      	cmp	r2, #5
 8002b88:	bf38      	it	cc
 8002b8a:	2205      	movcc	r2, #5
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8002b8c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
			device_config_level =
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002b90:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 8002b94:	494c      	ldr	r1, [pc, #304]	; (8002cc8 <VL53L1_init_and_start_range+0x1a0>)
 8002b96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b9e:	428b      	cmp	r3, r1
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8002ba0:	bf02      	ittt	eq
 8002ba2:	2206      	moveq	r2, #6
		pdev->gen_cfg.system__interrupt_config_gpio =
 8002ba4:	f894 32e7 	ldrbeq.w	r3, [r4, #743]	; 0x2e7
 8002ba8:	f884 3186 	strbeq.w	r3, [r4, #390]	; 0x186
 8002bac:	1e53      	subs	r3, r2, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	bf96      	itet	ls
 8002bb4:	4945      	ldrls	r1, [pc, #276]	; (8002ccc <VL53L1_init_and_start_range+0x1a4>)
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8002bb6:	2583      	movhi	r5, #131	; 0x83
 8002bb8:	5ccd      	ldrbls	r5, [r1, r3]
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8002bba:	2300      	movs	r3, #0
		*pbuffer++ = 0;
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	b2ad      	uxth	r5, r5
	i2c_buffer_size_bytes = \
 8002bc0:	f1c5 0688 	rsb	r6, r5, #136	; 0x88
 8002bc4:	b2b6      	uxth	r6, r6
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8002bc6:	b299      	uxth	r1, r3
 8002bc8:	42b1      	cmp	r1, r6
 8002bca:	d322      	bcc.n	8002c12 <VL53L1_init_and_start_range+0xea>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8002bcc:	2a05      	cmp	r2, #5
 8002bce:	d94f      	bls.n	8002c70 <VL53L1_init_and_start_range+0x148>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8002bd0:	f1c5 0201 	rsb	r2, r5, #1
			VL53L1_STATIC_NVM_MANAGED_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_encode_static_nvm_managed(
 8002bd4:	b292      	uxth	r2, r2
		status =
 8002bd6:	446a      	add	r2, sp
 8002bd8:	210b      	movs	r1, #11
 8002bda:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8002bde:	f000 ffb6 	bl	8003b4e <VL53L1_i2c_encode_static_nvm_managed>
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8002be2:	b9a0      	cbnz	r0, 8002c0e <VL53L1_init_and_start_range+0xe6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8002be4:	f1c5 020d 	rsb	r2, r5, #13
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
 8002be8:	b292      	uxth	r2, r2
		status =
 8002bea:	446a      	add	r2, sp
 8002bec:	2117      	movs	r1, #23
 8002bee:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8002bf2:	f001 f81d 	bl	8003c30 <VL53L1_i2c_encode_customer_nvm_managed>
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8002bf6:	b950      	cbnz	r0, 8002c0e <VL53L1_init_and_start_range+0xe6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8002bf8:	f1c5 0224 	rsb	r2, r5, #36	; 0x24
			VL53L1_STATIC_CONFIG_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_encode_static_config(
 8002bfc:	b292      	uxth	r2, r2
		status =
 8002bfe:	446a      	add	r2, sp
 8002c00:	2120      	movs	r1, #32
 8002c02:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 8002c06:	f001 f8d1 	bl	8003dac <VL53L1_i2c_encode_static_config>
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d035      	beq.n	8002c7a <VL53L1_init_and_start_range+0x152>
		status = VL53L1_update_ll_driver_cfg_state(Dev);

	LOG_FUNCTION_END(status);

	return status;
}
 8002c0e:	b040      	add	sp, #256	; 0x100
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
		*pbuffer++ = 0;
 8002c12:	f80d 0003 	strb.w	r0, [sp, r3]
 8002c16:	3301      	adds	r3, #1
 8002c18:	e7d5      	b.n	8002bc6 <VL53L1_init_and_start_range+0x9e>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8002c1a:	2a02      	cmp	r2, #2
 8002c1c:	d038      	beq.n	8002c90 <VL53L1_init_and_start_range+0x168>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8002c1e:	2a00      	cmp	r2, #0
 8002c20:	d141      	bne.n	8002ca6 <VL53L1_init_and_start_range+0x17e>
		i2c_buffer_offset_bytes = \
 8002c22:	f1c5 0283 	rsb	r2, r5, #131	; 0x83
			VL53L1_i2c_encode_system_control(
 8002c26:	b292      	uxth	r2, r2
		status =
 8002c28:	446a      	add	r2, sp
 8002c2a:	2105      	movs	r1, #5
 8002c2c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 8002c30:	f001 fa02 	bl	8004038 <VL53L1_i2c_encode_system_control>
	if (status == VL53L1_ERROR_NONE) {
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d1ea      	bne.n	8002c0e <VL53L1_init_and_start_range+0xe6>
		status =
 8002c38:	4633      	mov	r3, r6
 8002c3a:	466a      	mov	r2, sp
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f001 fcc8 	bl	80045d4 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 8002c44:	2800      	cmp	r0, #0
 8002c46:	d1e2      	bne.n	8002c0e <VL53L1_init_and_start_range+0xe6>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f000 fcde 	bl	800360a <VL53L1_update_ll_driver_rd_state>
	if (status == VL53L1_ERROR_NONE)
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	d1dd      	bne.n	8002c0e <VL53L1_init_and_start_range+0xe6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8002c52:	4620      	mov	r0, r4
 8002c54:	f000 fd4d 	bl	80036f2 <VL53L1_update_ll_driver_cfg_state>
	return status;
 8002c58:	e7d9      	b.n	8002c0e <VL53L1_init_and_start_range+0xe6>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8002c5a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8002c5e:	f043 0101 	orr.w	r1, r3, #1
 8002c62:	f884 11b4 	strb.w	r1, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8002c66:	f884 11c0 	strb.w	r1, [r4, #448]	; 0x1c0
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8002c6a:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
 8002c6e:	e021      	b.n	8002cb4 <VL53L1_init_and_start_range+0x18c>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8002c70:	d0b8      	beq.n	8002be4 <VL53L1_init_and_start_range+0xbc>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8002c72:	2a04      	cmp	r2, #4
 8002c74:	d0c0      	beq.n	8002bf8 <VL53L1_init_and_start_range+0xd0>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8002c76:	2a03      	cmp	r2, #3
 8002c78:	d1cf      	bne.n	8002c1a <VL53L1_init_and_start_range+0xf2>
		i2c_buffer_offset_bytes =
 8002c7a:	f1c5 0244 	rsb	r2, r5, #68	; 0x44
			VL53L1_i2c_encode_general_config(
 8002c7e:	b292      	uxth	r2, r2
		status =
 8002c80:	446a      	add	r2, sp
 8002c82:	2116      	movs	r1, #22
 8002c84:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 8002c88:	f001 f8fe 	bl	8003e88 <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d1be      	bne.n	8002c0e <VL53L1_init_and_start_range+0xe6>
		i2c_buffer_offset_bytes = \
 8002c90:	f1c5 025a 	rsb	r2, r5, #90	; 0x5a
			VL53L1_i2c_encode_timing_config(
 8002c94:	b292      	uxth	r2, r2
		status =
 8002c96:	446a      	add	r2, sp
 8002c98:	2117      	movs	r1, #23
 8002c9a:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8002c9e:	f001 f93c 	bl	8003f1a <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d1b3      	bne.n	8002c0e <VL53L1_init_and_start_range+0xe6>
		if ((psystem->system__mode_start &
 8002ca6:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 8002caa:	f1c5 0271 	rsb	r2, r5, #113	; 0x71
		if ((psystem->system__mode_start &
 8002cae:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 8002cb0:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 8002cb2:	d4d2      	bmi.n	8002c5a <VL53L1_init_and_start_range+0x132>
		status =
 8002cb4:	446a      	add	r2, sp
 8002cb6:	2112      	movs	r1, #18
 8002cb8:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
 8002cbc:	f001 f97a 	bl	8003fb4 <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	d1a4      	bne.n	8002c0e <VL53L1_init_and_start_range+0xe6>
 8002cc4:	e7ad      	b.n	8002c22 <VL53L1_init_and_start_range+0xfa>
 8002cc6:	bf00      	nop
 8002cc8:	00010100 	.word	0x00010100
 8002ccc:	08007af0 	.word	0x08007af0

08002cd0 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8002cd0:	b538      	push	{r3, r4, r5, lr}
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8002cd2:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
{
 8002cd6:	4604      	mov	r4, r0
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
	pdev->sys_ctrl.system__mode_start =
 8002ce0:	f880 31cc 	strb.w	r3, [r0, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8002ce4:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
 8002ce8:	f001 f9bf 	bl	800406a <VL53L1_set_system_control>
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8002cec:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 8002cf0:	4605      	mov	r5, r0
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8002cf2:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 8002cf6:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 8002cfa:	2103      	movs	r1, #3
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f000 fc71 	bl	80035e4 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8002d02:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d102      	bne.n	8002d10 <VL53L1_stop_range+0x40>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f000 fe95 	bl	8003a3a <VL53L1_low_power_auto_data_stop_range>

	return status;
}
 8002d10:	4628      	mov	r0, r5
 8002d12:	bd38      	pop	{r3, r4, r5, pc}

08002d14 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8002d14:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8002d16:	2901      	cmp	r1, #1
{
 8002d18:	b0c1      	sub	sp, #260	; 0x104
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	460d      	mov	r5, r1
	switch (device_results_level) {
 8002d1e:	d01a      	beq.n	8002d56 <VL53L1_get_measurement_results+0x42>
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
	default:
		i2c_buffer_size_bytes =
 8002d20:	2902      	cmp	r1, #2
 8002d22:	bf0c      	ite	eq
 8002d24:	2386      	moveq	r3, #134	; 0x86
 8002d26:	232c      	movne	r3, #44	; 0x2c
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status =
 8002d28:	466a      	mov	r2, sp
 8002d2a:	2188      	movs	r1, #136	; 0x88
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f001 fc71 	bl	8004614 <VL53L1_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8002d32:	2d01      	cmp	r5, #1
 8002d34:	d911      	bls.n	8002d5a <VL53L1_get_measurement_results+0x46>
 8002d36:	b9c8      	cbnz	r0, 8002d6c <VL53L1_get_measurement_results+0x58>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
 8002d38:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
 8002d3c:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 8002d40:	2038      	movs	r0, #56	; 0x38
 8002d42:	f001 fa6e 	bl	8004222 <VL53L1_i2c_decode_debug_results>
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8002d46:	b988      	cbnz	r0, 8002d6c <VL53L1_get_measurement_results+0x58>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
 8002d48:	f504 7222 	add.w	r2, r4, #648	; 0x288
 8002d4c:	a90b      	add	r1, sp, #44	; 0x2c
 8002d4e:	2021      	movs	r0, #33	; 0x21
 8002d50:	f001 fa2c 	bl	80041ac <VL53L1_i2c_decode_core_results>
 8002d54:	e003      	b.n	8002d5e <VL53L1_get_measurement_results+0x4a>
		i2c_buffer_size_bytes =
 8002d56:	234d      	movs	r3, #77	; 0x4d
 8002d58:	e7e6      	b.n	8002d28 <VL53L1_get_measurement_results+0x14>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	d1f3      	bne.n	8002d46 <VL53L1_get_measurement_results+0x32>
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8002d5e:	b928      	cbnz	r0, 8002d6c <VL53L1_get_measurement_results+0x58>

		i2c_buffer_offset_bytes = 0;
		status =
 8002d60:	f504 72e7 	add.w	r2, r4, #462	; 0x1ce
 8002d64:	4669      	mov	r1, sp
 8002d66:	202c      	movs	r0, #44	; 0x2c
 8002d68:	f001 f98f 	bl	800408a <VL53L1_i2c_decode_system_results>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002d6c:	b041      	add	sp, #260	; 0x104
 8002d6e:	bd30      	pop	{r4, r5, pc}

08002d70 <VL53L1_clear_interrupt_and_enable_next_range>:
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_init_and_start_range(
 8002d70:	2203      	movs	r2, #3
 8002d72:	f7ff bed9 	b.w	8002b28 <VL53L1_init_and_start_range>
	...

08002d78 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8002d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8002d7c:	2500      	movs	r5, #0
		pdata->time_stamp   = 0;

		if ((psys->result__stream_count == 0) &&
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8002d7e:	f04f 0813 	mov.w	r8, #19
		pdata->time_stamp   = 0;
 8002d82:	46ac      	mov	ip, r5

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
			pdata->avg_signal_count_rate_mcps =
 8002d84:	f64f 76ff 	movw	r6, #65535	; 0xffff
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;

			/* apply correction gain */
			range_mm *= gain_factor;
			range_mm += 0x0400;
			range_mm /= 0x0800;
 8002d88:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	presults->stream_count    = psys->result__stream_count;
 8002d8c:	78cf      	ldrb	r7, [r1, #3]
{
 8002d8e:	9001      	str	r0, [sp, #4]
	presults->stream_count    = psys->result__stream_count;
 8002d90:	709f      	strb	r7, [r3, #2]
 8002d92:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8002d96:	fa5f fa85 	uxtb.w	sl, r5
		pdata->range_id     = i;
 8002d9a:	f804 ac40 	strb.w	sl, [r4, #-64]
		pdata->time_stamp   = 0;
 8002d9e:	f844 cc3c 	str.w	ip, [r4, #-60]
 8002da2:	f891 9001 	ldrb.w	r9, [r1, #1]
		if ((psys->result__stream_count == 0) &&
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d159      	bne.n	8002e5e <VL53L1_copy_sys_and_core_results_to_range_results+0xe6>
 8002daa:	f009 0b1f 	and.w	fp, r9, #31
 8002dae:	f1bb 0f09 	cmp.w	fp, #9
 8002db2:	d154      	bne.n	8002e5e <VL53L1_copy_sys_and_core_results_to_range_results+0xe6>
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8002db4:	f804 8c02 	strb.w	r8, [r4, #-2]
		switch (i) {
 8002db8:	f1ba 0f01 	cmp.w	sl, #1
 8002dbc:	d05c      	beq.n	8002e78 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8002dbe:	f891 9002 	ldrb.w	r9, [r1, #2]
 8002dc2:	f1b9 0f07 	cmp.w	r9, #7
 8002dc6:	d14f      	bne.n	8002e68 <VL53L1_copy_sys_and_core_results_to_range_results+0xf0>
					psys->result__mm_inner_actual_effective_spads_sd0;
 8002dc8:	f8b1 9012 	ldrh.w	r9, [r1, #18]
				pdata->actual_effective_spads =
 8002dcc:	f824 9c30 	strh.w	r9, [r4, #-48]
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8002dd0:	f8b1 9010 	ldrh.w	r9, [r1, #16]
			range_mm *= gain_factor;
 8002dd4:	9801      	ldr	r0, [sp, #4]
			pdata->peak_signal_count_rate_mcps =
 8002dd6:	f824 9c14 	strh.w	r9, [r4, #-20]
				psys->result__avg_signal_count_rate_mcps_sd0;
 8002dda:	f8b1 9016 	ldrh.w	r9, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 8002dde:	f824 9c12 	strh.w	r9, [r4, #-18]
				psys->result__ambient_count_rate_mcps_sd0;
 8002de2:	f8b1 9008 	ldrh.w	r9, [r1, #8]
			pdata->ambient_count_rate_mcps =
 8002de6:	f824 9c10 	strh.w	r9, [r4, #-16]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8002dea:	f8b1 900a 	ldrh.w	r9, [r1, #10]
 8002dee:	ea4f 1949 	mov.w	r9, r9, lsl #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 8002df2:	45b1      	cmp	r9, r6
 8002df4:	bf28      	it	cs
 8002df6:	46b1      	movcs	r9, r6
 8002df8:	f824 9c08 	strh.w	r9, [r4, #-8]
				psys->result__phase_sd0;
 8002dfc:	f8b1 900c 	ldrh.w	r9, [r1, #12]
			pdata->median_phase =
 8002e00:	f824 9c06 	strh.w	r9, [r4, #-6]
			range_mm =
 8002e04:	f8b1 900e 	ldrh.w	r9, [r1, #14]
			range_mm *= gain_factor;
 8002e08:	fb00 f909 	mul.w	r9, r0, r9
			range_mm += 0x0400;
 8002e0c:	f509 6980 	add.w	r9, r9, #1024	; 0x400
			range_mm /= 0x0800;
 8002e10:	fb99 f9fe 	sdiv	r9, r9, lr
			pdata->ranging_total_events =
 8002e14:	6850      	ldr	r0, [r2, #4]
			pdata->median_range_mm = (int16_t)range_mm;
 8002e16:	f824 9c04 	strh.w	r9, [r4, #-4]
			pdata->ranging_total_events =
 8002e1a:	f844 0c1c 	str.w	r0, [r4, #-28]
			pdata->signal_total_events =
 8002e1e:	6890      	ldr	r0, [r2, #8]
 8002e20:	f844 0c18 	str.w	r0, [r4, #-24]
			pdata->total_periods_elapsed =
 8002e24:	68d0      	ldr	r0, [r2, #12]
 8002e26:	f844 0c2c 	str.w	r0, [r4, #-44]
			pdata->ambient_window_events =
 8002e2a:	6810      	ldr	r0, [r2, #0]
 8002e2c:	3501      	adds	r5, #1
	for (i = 0 ; i < 2 ; i++) {
 8002e2e:	2d02      	cmp	r5, #2
				pcore->result_core__ranging_total_events_sd1;
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
			pdata->ambient_window_events =
 8002e30:	f844 0c20 	str.w	r0, [r4, #-32]
 8002e34:	f104 0440 	add.w	r4, r4, #64	; 0x40
	for (i = 0 ; i < 2 ; i++) {
 8002e38:	d1ad      	bne.n	8002d96 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	70d8      	strb	r0, [r3, #3]
 8002e3e:	784a      	ldrb	r2, [r1, #1]
 8002e40:	f002 021f 	and.w	r2, r2, #31
 8002e44:	2a11      	cmp	r2, #17
 8002e46:	d807      	bhi.n	8002e58 <VL53L1_copy_sys_and_core_results_to_range_results+0xe0>
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4c24      	ldr	r4, [pc, #144]	; (8002edc <VL53L1_copy_sys_and_core_results_to_range_results+0x164>)
 8002e4c:	4091      	lsls	r1, r2
 8002e4e:	4221      	tst	r1, r4
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8002e50:	bf1c      	itt	ne
 8002e52:	70da      	strbne	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8002e54:	f883 0042 	strbne.w	r0, [r3, #66]	; 0x42
	break;

	}

	LOG_FUNCTION_END(0);
}
 8002e58:	b003      	add	sp, #12
 8002e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8002e5e:	f009 091f 	and.w	r9, r9, #31
			pdata->range_status =
 8002e62:	f804 9c02 	strb.w	r9, [r4, #-2]
 8002e66:	e7a7      	b.n	8002db8 <VL53L1_copy_sys_and_core_results_to_range_results+0x40>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8002e68:	f1b9 0f08 	cmp.w	r9, #8
						psys->result__mm_outer_actual_effective_spads_sd0;
 8002e6c:	bf0c      	ite	eq
 8002e6e:	f8b1 9014 	ldrheq.w	r9, [r1, #20]
					psys->result__dss_actual_effective_spads_sd0;
 8002e72:	f8b1 9004 	ldrhne.w	r9, [r1, #4]
 8002e76:	e7a9      	b.n	8002dcc <VL53L1_copy_sys_and_core_results_to_range_results+0x54>
				psys->result__dss_actual_effective_spads_sd1;
 8002e78:	f8b1 9018 	ldrh.w	r9, [r1, #24]
			range_mm *= gain_factor;
 8002e7c:	9801      	ldr	r0, [sp, #4]
			pdata->actual_effective_spads =
 8002e7e:	f824 9c30 	strh.w	r9, [r4, #-48]
				psys->result__peak_signal_count_rate_mcps_sd1;
 8002e82:	f8b1 901a 	ldrh.w	r9, [r1, #26]
			pdata->avg_signal_count_rate_mcps =
 8002e86:	f824 6c12 	strh.w	r6, [r4, #-18]
			pdata->peak_signal_count_rate_mcps =
 8002e8a:	f824 9c14 	strh.w	r9, [r4, #-20]
				psys->result__ambient_count_rate_mcps_sd1;
 8002e8e:	f8b1 901c 	ldrh.w	r9, [r1, #28]
			pdata->ambient_count_rate_mcps =
 8002e92:	f824 9c10 	strh.w	r9, [r4, #-16]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8002e96:	f8b1 901e 	ldrh.w	r9, [r1, #30]
 8002e9a:	ea4f 1949 	mov.w	r9, r9, lsl #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 8002e9e:	45b1      	cmp	r9, r6
 8002ea0:	bf28      	it	cs
 8002ea2:	46b1      	movcs	r9, r6
 8002ea4:	f824 9c08 	strh.w	r9, [r4, #-8]
				psys->result__phase_sd1;
 8002ea8:	f8b1 9020 	ldrh.w	r9, [r1, #32]
			pdata->median_phase =
 8002eac:	f824 9c06 	strh.w	r9, [r4, #-6]
			range_mm =
 8002eb0:	f8b1 9022 	ldrh.w	r9, [r1, #34]	; 0x22
			range_mm *= gain_factor;
 8002eb4:	fb09 f900 	mul.w	r9, r9, r0
			range_mm += 0x0400;
 8002eb8:	f509 6980 	add.w	r9, r9, #1024	; 0x400
			range_mm /= 0x0800;
 8002ebc:	fb99 f9fe 	sdiv	r9, r9, lr
			pdata->ranging_total_events =
 8002ec0:	6950      	ldr	r0, [r2, #20]
			pdata->median_range_mm = (int16_t)range_mm;
 8002ec2:	f824 9c04 	strh.w	r9, [r4, #-4]
			pdata->ranging_total_events =
 8002ec6:	f844 0c1c 	str.w	r0, [r4, #-28]
			pdata->signal_total_events =
 8002eca:	6990      	ldr	r0, [r2, #24]
 8002ecc:	f844 0c18 	str.w	r0, [r4, #-24]
			pdata->total_periods_elapsed  =
 8002ed0:	69d0      	ldr	r0, [r2, #28]
 8002ed2:	f844 0c2c 	str.w	r0, [r4, #-44]
			pdata->ambient_window_events =
 8002ed6:	6910      	ldr	r0, [r2, #16]
 8002ed8:	e7a8      	b.n	8002e2c <VL53L1_copy_sys_and_core_results_to_range_results+0xb4>
 8002eda:	bf00      	nop
 8002edc:	0002200e 	.word	0x0002200e

08002ee0 <VL53L1_get_device_results>:
{
 8002ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	4690      	mov	r8, r2
	VL53L1_range_results_t   *presults = &(pres->range_results);
 8002ee8:	f500 763d 	add.w	r6, r0, #756	; 0x2f4
		status = VL53L1_get_measurement_results(
 8002eec:	f7ff ff12 	bl	8002d14 <VL53L1_get_measurement_results>
	if (status == VL53L1_ERROR_NONE)
 8002ef0:	4605      	mov	r5, r0
 8002ef2:	b940      	cbnz	r0, 8002f06 <VL53L1_get_device_results+0x26>
		VL53L1_copy_sys_and_core_results_to_range_results(
 8002ef4:	4633      	mov	r3, r6
 8002ef6:	f504 7222 	add.w	r2, r4, #648	; 0x288
 8002efa:	f504 71e7 	add.w	r1, r4, #462	; 0x1ce
 8002efe:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 8002f02:	f7ff ff39 	bl	8002d78 <VL53L1_copy_sys_and_core_results_to_range_results>
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8002f06:	f894 72e5 	ldrb.w	r7, [r4, #741]	; 0x2e5
 8002f0a:	2f01      	cmp	r7, #1
 8002f0c:	d112      	bne.n	8002f34 <VL53L1_get_device_results+0x54>
		if ((status == VL53L1_ERROR_NONE) &&
 8002f0e:	b945      	cbnz	r5, 8002f22 <VL53L1_get_device_results+0x42>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8002f10:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8002f14:	bb0b      	cbnz	r3, 8002f5a <VL53L1_get_device_results+0x7a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8002f16:	4620      	mov	r0, r4
 8002f18:	f000 fdb5 	bl	8003a86 <VL53L1_low_power_auto_setup_manual_calibration>
 8002f1c:	4605      	mov	r5, r0
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8002f1e:	f884 72e6 	strb.w	r7, [r4, #742]	; 0x2e6
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8002f22:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8002f26:	2bff      	cmp	r3, #255	; 0xff
 8002f28:	d004      	beq.n	8002f34 <VL53L1_get_device_results+0x54>
 8002f2a:	b91d      	cbnz	r5, 8002f34 <VL53L1_get_device_results+0x54>
			status = VL53L1_low_power_auto_update_DSS(
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f000 fdc9 	bl	8003ac4 <VL53L1_low_power_auto_update_DSS>
 8002f32:	4605      	mov	r5, r0
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8002f34:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
	memcpy(
 8002f38:	2284      	movs	r2, #132	; 0x84
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8002f3a:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8002f3e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	memcpy(
 8002f42:	4631      	mov	r1, r6
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8002f44:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 8002f48:	4640      	mov	r0, r8
 8002f4a:	f001 fe91 	bl	8004c70 <memcpy>
	if (status == VL53L1_ERROR_NONE)
 8002f4e:	b955      	cbnz	r5, 8002f66 <VL53L1_get_device_results+0x86>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8002f50:	4620      	mov	r0, r4
}
 8002f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8002f56:	f000 bba0 	b.w	800369a <VL53L1_check_ll_driver_rd_state>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8002f5a:	2b01      	cmp	r3, #1
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8002f5c:	bf04      	itt	eq
 8002f5e:	2302      	moveq	r3, #2
 8002f60:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
 8002f64:	e7dd      	b.n	8002f22 <VL53L1_get_device_results+0x42>
}
 8002f66:	4628      	mov	r0, r5
 8002f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f6c <VL53L1_get_tuning_parm>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8002f6c:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8002f70:	2938      	cmp	r1, #56	; 0x38
 8002f72:	f200 80cc 	bhi.w	800310e <VL53L1_get_tuning_parm+0x1a2>
 8002f76:	e8df f001 	tbb	[pc, r1]
 8002f7a:	221d      	.short	0x221d
 8002f7c:	2e2b2825 	.word	0x2e2b2825
 8002f80:	3a373431 	.word	0x3a373431
 8002f84:	4643403d 	.word	0x4643403d
 8002f88:	524f4c49 	.word	0x524f4c49
 8002f8c:	5e5b5855 	.word	0x5e5b5855
 8002f90:	6a676461 	.word	0x6a676461
 8002f94:	7673706d 	.word	0x7673706d
 8002f98:	827f7c79 	.word	0x827f7c79
 8002f9c:	8e8b8885 	.word	0x8e8b8885
 8002fa0:	9a979491 	.word	0x9a979491
 8002fa4:	a6a3a09d 	.word	0xa6a3a09d
 8002fa8:	b2afaca9 	.word	0xb2afaca9
 8002fac:	bebbb8b5 	.word	0xbebbb8b5
 8002fb0:	c4c1      	.short	0xc4c1
 8002fb2:	c7          	.byte	0xc7
 8002fb3:	00          	.byte	0x00

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8002fb4:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
	break;
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8002fb8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002fba:	2000      	movs	r0, #0
	break;
 8002fbc:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8002fbe:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8002fc2:	e7f9      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8002fc4:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
 8002fc8:	e7f6      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8002fca:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8002fce:	e7f3      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8002fd0:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 8002fd4:	e7f0      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8002fd6:	f8b0 30b2 	ldrh.w	r3, [r0, #178]	; 0xb2
 8002fda:	e7ed      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8002fdc:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
 8002fe0:	e7ea      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8002fe2:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 8002fe6:	e7e7      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8002fe8:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
 8002fec:	e7e4      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8002fee:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 8002ff2:	e7e1      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8002ff4:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 8002ff8:	e7de      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8002ffa:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
 8002ffe:	e7db      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8003000:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
 8003004:	e7d8      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8003006:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 800300a:	e7d5      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800300c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 8003010:	e7d2      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8003012:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 8003016:	e7cf      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8003018:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 800301c:	e7cc      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800301e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003022:	e7c9      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8003024:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 8003028:	e7c6      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800302a:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 800302e:	e7c3      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8003030:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 8003034:	e7c0      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8003036:	f9b0 313e 	ldrsh.w	r3, [r0, #318]	; 0x13e
 800303a:	e7bd      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800303c:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8003040:	e7ba      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8003042:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 8003046:	e7b7      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8003048:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 800304c:	e7b4      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800304e:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 8003052:	e7b1      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8003054:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 8003058:	e7ae      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800305a:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800305e:	e7ab      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8003060:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 8003064:	e7a8      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8003066:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
 800306a:	e7a5      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800306c:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 8003070:	e7a2      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8003072:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 8003076:	e79f      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8003078:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800307c:	e79c      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->refspadchar.timeout_us;
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800307e:	f8b0 3118 	ldrh.w	r3, [r0, #280]	; 0x118
 8003082:	e799      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8003084:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
 8003088:	e796      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800308a:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
 800308e:	e793      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8003090:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
 8003094:	e790      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8003096:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 800309a:	e78d      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
 800309c:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 80030a0:	e78a      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 80030a2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80030a6:	e787      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80030a8:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
 80030ac:	e784      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80030ae:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
 80030b2:	e781      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80030b4:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
 80030b8:	e77e      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 80030ba:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
 80030be:	e77b      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 80030c0:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 80030c4:	e778      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80030c6:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
 80030ca:	e775      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80030cc:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
 80030d0:	e772      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80030d2:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
 80030d6:	e76f      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80030d8:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 80030dc:	e76c      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
	break;
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80030de:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 80030e2:	e769      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
	break;
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80030e4:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80030e8:	e766      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
	break;
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80030ea:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80030ee:	e763      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
	break;
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80030f0:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
 80030f4:	e760      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
	break;
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80030f6:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 80030fa:	e75d      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
	break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80030fc:	f890 32e4 	ldrb.w	r3, [r0, #740]	; 0x2e4
 8003100:	e75a      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003102:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8003106:	e757      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
	break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003108:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800310c:	e754      	b.n	8002fb8 <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
	break;


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800310e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003112:	f06f 0003 	mvn.w	r0, #3
		*ptuning_parm_value = 0x7FFFFFFF;
 8003116:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8003118:	4770      	bx	lr

0800311a <VL53L1_init_refspadchar_config_struct>:
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800311a:	2308      	movs	r3, #8
 800311c:	7003      	strb	r3, [r0, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800311e:	230b      	movs	r3, #11
 8003120:	7043      	strb	r3, [r0, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8003122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003126:	6043      	str	r3, [r0, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8003128:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800312c:	8103      	strh	r3, [r0, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800312e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003132:	8143      	strh	r3, [r0, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8003134:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003138:	8183      	strh	r3, [r0, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 800313a:	2000      	movs	r0, #0
 800313c:	4770      	bx	lr

0800313e <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800313e:	4603      	mov	r3, r0
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8003140:	2212      	movs	r2, #18
 8003142:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8003144:	220f      	movs	r2, #15
 8003146:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8003148:	2202      	movs	r2, #2
 800314a:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800314c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8003150:	2000      	movs	r0, #0
	pdata->timeout_us   = 36000;
 8003152:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8003154:	220c      	movs	r2, #12
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8003156:	7018      	strb	r0, [r3, #0]
	pdata->rate_limit_mcps =
 8003158:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 800315a:	4770      	bx	lr

0800315c <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800315c:	4603      	mov	r3, r0
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800315e:	8940      	ldrh	r0, [r0, #10]
{
 8003160:	b510      	push	{r4, lr}
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003162:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
{
 8003166:	460c      	mov	r4, r1
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8003168:	6008      	str	r0, [r1, #0]
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800316a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800316e:	2300      	movs	r3, #0
 8003170:	8263      	strh	r3, [r4, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8003172:	2340      	movs	r3, #64	; 0x40
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8003174:	80a1      	strh	r1, [r4, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8003176:	80e2      	strh	r2, [r4, #6]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8003178:	60a0      	str	r0, [r4, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800317a:	81a1      	strh	r1, [r4, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800317c:	81e2      	strh	r2, [r4, #14]
	pdata->crosstalk_range_ignore_threshold_mult =
 800317e:	7523      	strb	r3, [r4, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8003180:	b958      	cbnz	r0, 800319a <VL53L1_init_xtalk_config_struct+0x3e>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8003182:	6863      	ldr	r3, [r4, #4]
 8003184:	b94b      	cbnz	r3, 800319a <VL53L1_init_xtalk_config_struct+0x3e>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8003186:	7420      	strb	r0, [r4, #16]
	else
		pdata->global_crosstalk_compensation_enable = 0x01;


	if ((status == VL53L1_ERROR_NONE) &&
 8003188:	7c23      	ldrb	r3, [r4, #16]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d108      	bne.n	80031a0 <VL53L1_init_xtalk_config_struct+0x44>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800318e:	2340      	movs	r3, #64	; 0x40
 8003190:	f000 fb93 	bl	80038ba <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8003194:	82e0      	strh	r0, [r4, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8003196:	2000      	movs	r0, #0
 8003198:	bd10      	pop	{r4, pc}
		pdata->global_crosstalk_compensation_enable = 0x01;
 800319a:	2301      	movs	r3, #1
 800319c:	7423      	strb	r3, [r4, #16]
 800319e:	e7f3      	b.n	8003188 <VL53L1_init_xtalk_config_struct+0x2c>
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	82e3      	strh	r3, [r4, #22]
 80031a4:	e7f7      	b.n	8003196 <VL53L1_init_xtalk_config_struct+0x3a>

080031a6 <VL53L1_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 80031a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80031aa:	8003      	strh	r3, [r0, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 80031ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b0:	6043      	str	r3, [r0, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 80031b2:	f243 23c8 	movw	r3, #13000	; 0x32c8
 80031b6:	6083      	str	r3, [r0, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 80031b8:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 80031ba:	2308      	movs	r3, #8
 80031bc:	7403      	strb	r3, [r0, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80031be:	2328      	movs	r3, #40	; 0x28
 80031c0:	7443      	strb	r3, [r0, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80031c2:	2309      	movs	r3, #9
 80031c4:	7483      	strb	r3, [r0, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80031c6:	2000      	movs	r0, #0
 80031c8:	4770      	bx	lr

080031ca <VL53L1_init_tuning_parm_storage_struct>:
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 80031ca:	f248 0203 	movw	r2, #32771	; 0x8003
 80031ce:	8002      	strh	r2, [r0, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80031d0:	f248 0201 	movw	r2, #32769	; 0x8001
 80031d4:	8042      	strh	r2, [r0, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80031d6:	f248 0241 	movw	r2, #32833	; 0x8041
{
 80031da:	4603      	mov	r3, r0
	pdata->tp_tuning_parm_lld_version          =
 80031dc:	8082      	strh	r2, [r0, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80031de:	210a      	movs	r1, #10
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80031e0:	2206      	movs	r2, #6
	pdata->tp_init_phase_rtn_lite_med          =
 80031e2:	71d9      	strb	r1, [r3, #7]
	pdata->tp_init_phase_rtn_lite_short        =
 80031e4:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80031e6:	7299      	strb	r1, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80031e8:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80031ea:	2102      	movs	r1, #2
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80031ec:	2221      	movs	r2, #33	; 0x21
	pdata->tp_consistency_lite_phase_tolerance =
 80031ee:	7319      	strb	r1, [r3, #12]
	pdata->tp_phasecal_target                  =
 80031f0:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80031f2:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	pdata->tp_lite_long_sigma_thresh_mm        =
 80031f6:	f44f 72b4 	mov.w	r2, #360	; 0x168
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80031fa:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 80031fe:	f44f 6120 	mov.w	r1, #2560	; 0xa00
	pdata->tp_lite_long_sigma_thresh_mm        =
 8003202:	825a      	strh	r2, [r3, #18]
	pdata->tp_lite_med_sigma_thresh_mm         =
 8003204:	829a      	strh	r2, [r3, #20]
	pdata->tp_lite_short_sigma_thresh_mm       =
 8003206:	82da      	strh	r2, [r3, #22]
	pdata->tp_dss_target_lite_mcps               =
 8003208:	84d9      	strh	r1, [r3, #38]	; 0x26
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800320a:	22c0      	movs	r2, #192	; 0xc0
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800320c:	8519      	strh	r1, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800320e:	f248 0130 	movw	r1, #32816	; 0x8030
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8003212:	831a      	strh	r2, [r3, #24]
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8003214:	835a      	strh	r2, [r3, #26]
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8003216:	839a      	strh	r2, [r3, #28]
	pdata->tp_phasecal_timeout_lite_us           =
 8003218:	62d9      	str	r1, [r3, #44]	; 0x2c
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800321a:	2208      	movs	r2, #8
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800321c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	pdata->tp_init_phase_rtn_lite_long         =
 8003220:	200e      	movs	r0, #14
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8003222:	779a      	strb	r2, [r3, #30]
	pdata->tp_phasecal_timeout_timed_us          =
 8003224:	6319      	str	r1, [r3, #48]	; 0x30
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8003226:	2210      	movs	r2, #16
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8003228:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	pdata->tp_init_phase_rtn_lite_long         =
 800322c:	7198      	strb	r0, [r3, #6]
	pdata->tp_init_phase_ref_lite_long         =
 800322e:	7258      	strb	r0, [r3, #9]
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8003230:	77da      	strb	r2, [r3, #31]
	pdata->tp_cal_repeat_rate                  =
 8003232:	2000      	movs	r0, #0
	pdata->tp_lite_sigma_ref_mm                  =
 8003234:	2201      	movs	r2, #1
	pdata->tp_mm_timeout_lite_us                 =
 8003236:	6359      	str	r1, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8003238:	6399      	str	r1, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800323a:	f24f 6118 	movw	r1, #63000	; 0xf618
	pdata->tp_lite_sigma_ref_mm                  =
 800323e:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->tp_timed_seed_cfg                     =
 8003242:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pdata->tp_cal_repeat_rate                  =
 8003246:	81d8      	strh	r0, [r3, #14]
	pdata->tp_lite_min_clip                    =
 8003248:	7418      	strb	r0, [r3, #16]
	pdata->tp_lite_first_order_select            =
 800324a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	pdata->tp_range_timeout_lite_us              =
 800324e:	6419      	str	r1, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8003250:	f243 21c8 	movw	r1, #13000	; 0x32c8
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8003254:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8003256:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
	pdata->tp_range_timeout_timed_us             =
 800325a:	6459      	str	r1, [r3, #68]	; 0x44
	pdata->tp_range_timeout_lpa_us =
 800325c:	649a      	str	r2, [r3, #72]	; 0x48


	LOG_FUNCTION_END(status);

	return status;
}
 800325e:	4770      	bx	lr

08003260 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003264:	4604      	mov	r4, r0
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8003266:	f44f 6020 	mov.w	r0, #2560	; 0xa00
	 */
	pstatic->gpio_hv_mux__ctrl  = \
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800326a:	f04f 0e02 	mov.w	lr, #2
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800326e:	8020      	strh	r0, [r4, #0]
	pstatic->gpio__fio_hv_status                              = 0x00;
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8003270:	f04f 0808 	mov.w	r8, #8
	pstatic->debug__ctrl                                      = 0x00;
 8003274:	2000      	movs	r0, #0
	pstatic->gpio_hv_mux__ctrl  = \
 8003276:	2611      	movs	r6, #17
{
 8003278:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 800327a:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800327c:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800327e:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8003280:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8003282:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8003284:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 8003286:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8003288:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800328a:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800328c:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800328e:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8003292:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8003294:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8003298:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800329c:	7460      	strb	r0, [r4, #17]
	pstatic->gpio_hv_mux__ctrl  = \
 800329e:	7326      	strb	r6, [r4, #12]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
 80032a0:	7fae      	ldrb	r6, [r5, #30]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 80032a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 80032a6:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80032a8:	7fee      	ldrb	r6, [r5, #31]
{
 80032aa:	9f08      	ldr	r7, [sp, #32]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80032ac:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80032ae:	f895 6020 	ldrb.w	r6, [r5, #32]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 80032b2:	75a0      	strb	r0, [r4, #22]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80032b4:	7526      	strb	r6, [r4, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 80032b6:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 80032b8:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 80032ba:	7566      	strb	r6, [r4, #21]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 80032bc:	8320      	strh	r0, [r4, #24]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 80032be:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip                             =
 80032c2:	f895 9010 	ldrb.w	r9, [r5, #16]
 80032c6:	f884 901b 	strb.w	r9, [r4, #27]
	/*
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
 80032ca:	f895 900c 	ldrb.w	r9, [r5, #12]
			ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 80032ce:	7760      	strb	r0, [r4, #29]
	pstatic->algo__consistency_check__tolerance               =
 80032d0:	f884 901c 	strb.w	r9, [r4, #28]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 80032d4:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 80032d6:	77e0      	strb	r0, [r4, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
	pgeneral->global_config__stream_divider                   = 0x00;
	pgeneral->system__interrupt_config_gpio =
 80032d8:	f04f 0920 	mov.w	r9, #32
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 80032dc:	240b      	movs	r4, #11
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 80032de:	7008      	strb	r0, [r1, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 80032e0:	7048      	strb	r0, [r1, #1]
	pgeneral->system__interrupt_config_gpio =
 80032e2:	f881 9002 	strb.w	r9, [r1, #2]
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 80032e6:	70cc      	strb	r4, [r1, #3]
	 * Set VHV / Phase Cal repeat rate to 1 every
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
 80032e8:	f8b5 a00e 	ldrh.w	sl, [r5, #14]
			ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width                      = 0x02;
 80032ec:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->cal_config__repeat_rate                         =
 80032f0:	f8a1 a004 	strh.w	sl, [r1, #4]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 80032f4:	f04f 0a0d 	mov.w	sl, #13
 80032f8:	f881 a007 	strb.w	sl, [r1, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
 80032fc:	f895 a00d 	ldrb.w	sl, [r5, #13]
			ptuning_parms->tp_phasecal_target;
	pgeneral->phasecal_config__override                       = 0x00;
 8003300:	7248      	strb	r0, [r1, #9]
	pgeneral->phasecal_config__target                         =
 8003302:	f881 a008 	strb.w	sl, [r1, #8]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
	pgeneral->system__thresh_rate_low                         = 0x0000;
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8003306:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
 800330a:	f8a1 a010 	strh.w	sl, [r1, #16]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800330e:	f04f 0a38 	mov.w	sl, #56	; 0x38
	pgeneral->dss_config__roi_mode_control =
 8003312:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8003314:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8003316:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8003318:	7488      	strb	r0, [r1, #18]
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800331a:	f881 a013 	strb.w	sl, [r1, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800331e:	f881 c014 	strb.w	ip, [r1, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8003322:	754e      	strb	r6, [r1, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8003324:	211a      	movs	r1, #26
 8003326:	7051      	strb	r1, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8003328:	21cc      	movs	r1, #204	; 0xcc
 800332a:	7151      	strb	r1, [r2, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800332c:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800332e:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8003330:	7090      	strb	r0, [r2, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8003332:	f882 9003 	strb.w	r9, [r2, #3]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8003336:	7116      	strb	r6, [r2, #4]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8003338:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800333a:	71d6      	strb	r6, [r2, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800333c:	7211      	strb	r1, [r2, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800333e:	2109      	movs	r1, #9
 8003340:	7251      	strb	r1, [r2, #9]
	 * Sigma thresh register - format 14.2
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
 8003342:	f8b5 9014 	ldrh.w	r9, [r5, #20]
 8003346:	f8a2 900a 	strh.w	r9, [r2, #10]
	/*
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800334a:	f8b5 901a 	ldrh.w	r9, [r5, #26]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800334e:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8003352:	f04f 0878 	mov.w	r8, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8003356:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800335a:	f882 800f 	strb.w	r8, [r2, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800335e:	6110      	str	r0, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8003360:	7510      	strb	r0, [r2, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8003362:	701e      	strb	r6, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8003364:	8058      	strh	r0, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8003366:	8098      	strh	r0, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8003368:	7198      	strb	r0, [r3, #6]
	pdynamic->system__seed_config =
 800336a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			ptuning_parms->tp_lite_seed_cfg;

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800336e:	721c      	strb	r4, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8003370:	7259      	strb	r1, [r3, #9]
	pdynamic->system__seed_config =
 8003372:	71da      	strb	r2, [r3, #7]

	pdynamic->sd_config__initial_phase_sd0                     =
 8003374:	79ea      	ldrb	r2, [r5, #7]
 8003376:	729a      	strb	r2, [r3, #10]
			ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1                     =
 8003378:	7aaa      	ldrb	r2, [r5, #10]
			ptuning_parms->tp_init_phase_ref_lite_med;;

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800337a:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__initial_phase_sd1                     =
 800337c:	72da      	strb	r2, [r3, #11]
	 *        3  -> 4095
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
 800337e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8003382:	735a      	strb	r2, [r3, #13]
			ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier         =
 8003384:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8003388:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->sd_config__quantifier         =
 800338c:	739a      	strb	r2, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800338e:	22c7      	movs	r2, #199	; 0xc7
 8003390:	73da      	strb	r2, [r3, #15]


	pdynamic->system__sequence_config                          = \
 8003392:	22db      	movs	r2, #219	; 0xdb
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8003394:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->system__sequence_config                          = \
 8003398:	745a      	strb	r2, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
	psystem->firmware__enable                                  = 0x01;
	psystem->system__interrupt_clear                           = \
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800339a:	2321      	movs	r3, #33	; 0x21
	psystem->system__stream_count_ctrl                         = 0x00;
 800339c:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800339e:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 80033a0:	70fe      	strb	r6, [r7, #3]
	psystem->system__mode_start                                = \
 80033a2:	713b      	strb	r3, [r7, #4]
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 80033a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080033a8 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80033a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033aa:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80033ac:	9f08      	ldr	r7, [sp, #32]
 80033ae:	9501      	str	r5, [sp, #4]
 80033b0:	9700      	str	r7, [sp, #0]
{
 80033b2:	4614      	mov	r4, r2
 80033b4:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 80033b6:	f7ff ff53 	bl	8003260 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80033ba:	b988      	cbnz	r0, 80033e0 <VL53L1_preset_mode_standard_ranging_short_range+0x38>
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
		ptiming->range_config__vcsel_period_b                = 0x05;
 80033bc:	2305      	movs	r3, #5
		ptiming->range_config__vcsel_period_a                = 0x07;
 80033be:	2207      	movs	r2, #7
		ptiming->range_config__vcsel_period_b                = 0x05;
 80033c0:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__vcsel_period_a                = 0x07;
 80033c2:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__sigma_thresh                  =
 80033c4:	8ae9      	ldrh	r1, [r5, #22]
 80033c6:	8161      	strh	r1, [r4, #10]
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80033c8:	8ba9      	ldrh	r1, [r5, #28]
 80033ca:	81a1      	strh	r1, [r4, #12]
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low               = 0x08;
 80033cc:	2108      	movs	r1, #8
 80033ce:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 80033d0:	2138      	movs	r1, #56	; 0x38
 80033d2:	73e1      	strb	r1, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 80033d4:	7232      	strb	r2, [r6, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 80033d6:	7273      	strb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 80033d8:	7a2b      	ldrb	r3, [r5, #8]
 80033da:	72b3      	strb	r3, [r6, #10]
				ptuning_parms->tp_init_phase_rtn_lite_short;
		pdynamic->sd_config__initial_phase_sd1               =
 80033dc:	7aeb      	ldrb	r3, [r5, #11]
 80033de:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80033e0:	b003      	add	sp, #12
 80033e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033e4 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80033e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033e6:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80033e8:	9f08      	ldr	r7, [sp, #32]
 80033ea:	9501      	str	r5, [sp, #4]
 80033ec:	9700      	str	r7, [sp, #0]
{
 80033ee:	4614      	mov	r4, r2
 80033f0:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 80033f2:	f7ff ff35 	bl	8003260 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80033f6:	b988      	cbnz	r0, 800341c <VL53L1_preset_mode_standard_ranging_long_range+0x38>
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
		ptiming->range_config__vcsel_period_b                = 0x0D;
 80033f8:	230d      	movs	r3, #13
		ptiming->range_config__vcsel_period_a                = 0x0F;
 80033fa:	220f      	movs	r2, #15
		ptiming->range_config__vcsel_period_b                = 0x0D;
 80033fc:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__vcsel_period_a                = 0x0F;
 80033fe:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__sigma_thresh                  =
 8003400:	8a69      	ldrh	r1, [r5, #18]
 8003402:	8161      	strh	r1, [r4, #10]
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8003404:	8b29      	ldrh	r1, [r5, #24]
 8003406:	81a1      	strh	r1, [r4, #12]
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low               = 0x08;
 8003408:	2108      	movs	r1, #8
 800340a:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800340c:	21b8      	movs	r1, #184	; 0xb8
 800340e:	73e1      	strb	r1, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8003410:	7232      	strb	r2, [r6, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8003412:	7273      	strb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 8003414:	79ab      	ldrb	r3, [r5, #6]
 8003416:	72b3      	strb	r3, [r6, #10]
				ptuning_parms->tp_init_phase_rtn_lite_long;
		pdynamic->sd_config__initial_phase_sd1               =
 8003418:	7a6b      	ldrb	r3, [r5, #9]
 800341a:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800341c:	b003      	add	sp, #12
 800341e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003420 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003420:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8003422:	9e07      	ldr	r6, [sp, #28]
{
 8003424:	460d      	mov	r5, r1
	status = VL53L1_preset_mode_standard_ranging(
 8003426:	9601      	str	r6, [sp, #4]
 8003428:	9e06      	ldr	r6, [sp, #24]
{
 800342a:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 800342c:	9600      	str	r6, [sp, #0]
 800342e:	f7ff ff17 	bl	8003260 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003432:	b918      	cbnz	r0, 800343c <VL53L1_preset_mode_standard_ranging_mm1_cal+0x1c>

		pgeneral->dss_config__roi_mode_control =
 8003434:	2302      	movs	r3, #2
 8003436:	72ab      	strb	r3, [r5, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8003438:	233b      	movs	r3, #59	; 0x3b
 800343a:	7463      	strb	r3, [r4, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800343c:	b002      	add	sp, #8
 800343e:	bd70      	pop	{r4, r5, r6, pc}

08003440 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003440:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8003442:	9e07      	ldr	r6, [sp, #28]
{
 8003444:	460d      	mov	r5, r1
	status = VL53L1_preset_mode_standard_ranging(
 8003446:	9601      	str	r6, [sp, #4]
 8003448:	9e06      	ldr	r6, [sp, #24]
{
 800344a:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 800344c:	9600      	str	r6, [sp, #0]
 800344e:	f7ff ff07 	bl	8003260 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003452:	b918      	cbnz	r0, 800345c <VL53L1_preset_mode_standard_ranging_mm2_cal+0x1c>

		pgeneral->dss_config__roi_mode_control =
 8003454:	2302      	movs	r3, #2
 8003456:	72ab      	strb	r3, [r5, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8003458:	235b      	movs	r3, #91	; 0x5b
 800345a:	7463      	strb	r3, [r4, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800345c:	b002      	add	sp, #8
 800345e:	bd70      	pop	{r4, r5, r6, pc}

08003460 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003462:	9d08      	ldr	r5, [sp, #32]
 8003464:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003466:	4614      	mov	r4, r2

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8003468:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 800346c:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 800346e:	f7ff fef7 	bl	8003260 <VL53L1_preset_mode_standard_ranging>
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003472:	b970      	cbnz	r0, 8003492 <VL53L1_preset_mode_timed_ranging+0x32>
		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8003474:	23b1      	movs	r3, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8003476:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8003478:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800347a:	23d4      	movs	r3, #212	; 0xd4
 800347c:	7223      	strb	r3, [r4, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800347e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8003482:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8003484:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 8003486:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8003488:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800348c:	71f3      	strb	r3, [r6, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800348e:	2340      	movs	r3, #64	; 0x40
 8003490:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8003492:	b003      	add	sp, #12
 8003494:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003496 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003498:	9d08      	ldr	r5, [sp, #32]
 800349a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800349c:	4614      	mov	r4, r2

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800349e:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 80034a2:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging_short_range(
 80034a4:	f7ff ff80 	bl	80033a8 <VL53L1_preset_mode_standard_ranging_short_range>
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80034a8:	b978      	cbnz	r0, 80034ca <VL53L1_preset_mode_timed_ranging_short_range+0x34>


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80034aa:	2301      	movs	r3, #1
		pdynamic->system__grouped_parameter_hold = 0x00;
 80034ac:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80034ae:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80034b0:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 80034b2:	23b1      	movs	r3, #177	; 0xb1
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 80034b4:	2284      	movs	r2, #132	; 0x84
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 80034b6:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80034b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 80034bc:	7162      	strb	r2, [r4, #5]
		ptiming->system__intermeasurement_period = 0x00000600;
 80034be:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 80034c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80034c4:	71f3      	strb	r3, [r6, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80034c6:	2340      	movs	r3, #64	; 0x40
 80034c8:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80034ca:	b003      	add	sp, #12
 80034cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034ce <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80034ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034d0:	9d08      	ldr	r5, [sp, #32]
 80034d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80034d4:	4614      	mov	r4, r2

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 80034d6:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 80034da:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging_long_range(
 80034dc:	f7ff ff82 	bl	80033e4 <VL53L1_preset_mode_standard_ranging_long_range>
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80034e0:	b970      	cbnz	r0, 8003500 <VL53L1_preset_mode_timed_ranging_long_range+0x32>

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 80034e2:	2397      	movs	r3, #151	; 0x97
		pdynamic->system__grouped_parameter_hold = 0x00;
 80034e4:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 80034e6:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 80034e8:	23b1      	movs	r3, #177	; 0xb1
 80034ea:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80034ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80034f0:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80034f2:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 80034f4:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 80034f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80034fa:	71f3      	strb	r3, [r6, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80034fc:	2340      	movs	r3, #64	; 0x40
 80034fe:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8003500:	b003      	add	sp, #12
 8003502:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003504 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8003504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8003506:	9f09      	ldr	r7, [sp, #36]	; 0x24
{
 8003508:	460c      	mov	r4, r1
	status = VL53L1_preset_mode_timed_ranging(
 800350a:	9701      	str	r7, [sp, #4]
 800350c:	9f08      	ldr	r7, [sp, #32]
{
 800350e:	461d      	mov	r5, r3
	status = VL53L1_preset_mode_timed_ranging(
 8003510:	9700      	str	r7, [sp, #0]
{
 8003512:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging(
 8003514:	f7ff ffa4 	bl	8003460 <VL53L1_preset_mode_timed_ranging>
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8003518:	b938      	cbnz	r0, 800352a <VL53L1_preset_mode_low_power_auto_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 800351a:	4632      	mov	r2, r6
 800351c:	4629      	mov	r1, r5
 800351e:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8003520:	b003      	add	sp, #12
 8003522:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8003526:	f000 baa1 	b.w	8003a6c <VL53L1_config_low_power_auto_mode>
}
 800352a:	b003      	add	sp, #12
 800352c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800352e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800352e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8003530:	9f09      	ldr	r7, [sp, #36]	; 0x24
{
 8003532:	460c      	mov	r4, r1
	status = VL53L1_preset_mode_timed_ranging_short_range(
 8003534:	9701      	str	r7, [sp, #4]
 8003536:	9f08      	ldr	r7, [sp, #32]
{
 8003538:	461d      	mov	r5, r3
	status = VL53L1_preset_mode_timed_ranging_short_range(
 800353a:	9700      	str	r7, [sp, #0]
{
 800353c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_short_range(
 800353e:	f7ff ffaa 	bl	8003496 <VL53L1_preset_mode_timed_ranging_short_range>
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8003542:	b938      	cbnz	r0, 8003554 <VL53L1_preset_mode_low_power_auto_short_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8003544:	4632      	mov	r2, r6
 8003546:	4629      	mov	r1, r5
 8003548:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800354a:	b003      	add	sp, #12
 800354c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8003550:	f000 ba8c 	b.w	8003a6c <VL53L1_config_low_power_auto_mode>
}
 8003554:	b003      	add	sp, #12
 8003556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003558 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8003558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800355a:	9f09      	ldr	r7, [sp, #36]	; 0x24
{
 800355c:	460c      	mov	r4, r1
	status = VL53L1_preset_mode_timed_ranging_long_range(
 800355e:	9701      	str	r7, [sp, #4]
 8003560:	9f08      	ldr	r7, [sp, #32]
{
 8003562:	461d      	mov	r5, r3
	status = VL53L1_preset_mode_timed_ranging_long_range(
 8003564:	9700      	str	r7, [sp, #0]
{
 8003566:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_long_range(
 8003568:	f7ff ffb1 	bl	80034ce <VL53L1_preset_mode_timed_ranging_long_range>
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800356c:	b938      	cbnz	r0, 800357e <VL53L1_preset_mode_low_power_auto_long_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 800356e:	4632      	mov	r2, r6
 8003570:	4629      	mov	r1, r5
 8003572:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8003574:	b003      	add	sp, #12
 8003576:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 800357a:	f000 ba77 	b.w	8003a6c <VL53L1_config_low_power_auto_mode>
}
 800357e:	b003      	add	sp, #12
 8003580:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003582 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003584:	9d08      	ldr	r5, [sp, #32]
 8003586:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003588:	4614      	mov	r4, r2

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800358a:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 800358e:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8003590:	f7ff fe66 	bl	8003260 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003594:	b958      	cbnz	r0, 80035ae <VL53L1_preset_mode_singleshot_ranging+0x2c>

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8003596:	23b1      	movs	r3, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8003598:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800359a:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800359c:	23d4      	movs	r3, #212	; 0xd4
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800359e:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80035a0:	71e0      	strb	r0, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80035a2:	7223      	strb	r3, [r4, #8]

		pdynamic->system__seed_config =
 80035a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80035a8:	71f3      	strb	r3, [r6, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 80035aa:	2310      	movs	r3, #16
 80035ac:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80035ae:	b003      	add	sp, #12
 80035b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035b2 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80035b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035b4:	9c06      	ldr	r4, [sp, #24]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80035b6:	9d07      	ldr	r5, [sp, #28]
 80035b8:	e88d 0030 	stmia.w	sp, {r4, r5}
 80035bc:	f7ff fe50 	bl	8003260 <VL53L1_preset_mode_standard_ranging>
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80035c0:	b908      	cbnz	r0, 80035c6 <VL53L1_preset_mode_olt+0x14>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 80035c2:	2301      	movs	r3, #1
 80035c4:	7063      	strb	r3, [r4, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80035c6:	b003      	add	sp, #12
 80035c8:	bd30      	pop	{r4, r5, pc}

080035ca <VL53L1_init_version>:
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 80035d0:	2302      	movs	r3, #2
 80035d2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 80035d6:	230a      	movs	r3, #10
 80035d8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 80035dc:	f240 433a 	movw	r3, #1082	; 0x43a
 80035e0:	6243      	str	r3, [r0, #36]	; 0x24
 80035e2:	4770      	bx	lr

080035e4 <VL53L1_init_ll_driver_state>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state  = device_state;
	pstate->cfg_stream_count  = 0;
 80035e4:	2300      	movs	r3, #0
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80035e6:	2202      	movs	r2, #2
	pstate->cfg_device_state  = device_state;
 80035e8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_stream_count  = 0;
 80035ec:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80035f0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
	pstate->cfg_timing_status = 0;
 80035f4:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	pstate->rd_device_state   = device_state;
 80035f8:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	pstate->rd_stream_count   = 0;
 80035fc:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003600:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
	pstate->rd_timing_status  = 0;
 8003604:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8003608:	4770      	bx	lr

0800360a <VL53L1_update_ll_driver_rd_state>:

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800360a:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800360e:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 8003612:	d108      	bne.n	8003626 <VL53L1_update_ll_driver_rd_state+0x1c>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8003614:	2203      	movs	r2, #3
 8003616:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
		default:

			pstate->rd_device_state  =
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800361a:	2202      	movs	r2, #2
			pstate->rd_stream_count  = 0;
 800361c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003620:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 8003624:	e022      	b.n	800366c <VL53L1_update_ll_driver_rd_state+0x62>
		if (pstate->rd_stream_count == 0xFF) {
 8003626:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800362a:	2bff      	cmp	r3, #255	; 0xff
			pstate->rd_stream_count = 0x80;
 800362c:	bf0c      	ite	eq
 800362e:	2380      	moveq	r3, #128	; 0x80
			pstate->rd_stream_count++;
 8003630:	3301      	addne	r3, #1
 8003632:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003636:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800363a:	f083 0302 	eor.w	r3, r3, #2
 800363e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
		switch (pstate->rd_device_state) {
 8003642:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8003646:	3b03      	subs	r3, #3
 8003648:	2b05      	cmp	r3, #5
 800364a:	d821      	bhi.n	8003690 <VL53L1_update_ll_driver_rd_state+0x86>
 800364c:	e8df f003 	tbb	[pc, r3]
 8003650:	11202003 	.word	0x11202003
 8003654:	1914      	.short	0x1914
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8003656:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
 800365a:	079b      	lsls	r3, r3, #30
				pstate->rd_device_state =
 800365c:	bf4c      	ite	mi
 800365e:	2306      	movmi	r3, #6
				pstate->rd_device_state =
 8003660:	2308      	movpl	r3, #8
 8003662:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count  = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_timing_status = 0;
 800366c:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33

		break;
 8003670:	e005      	b.n	800367e <VL53L1_update_ll_driver_rd_state+0x74>
			pstate->rd_stream_count = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_device_state =
 8003678:	2308      	movs	r3, #8
 800367a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 800367e:	2000      	movs	r0, #0
 8003680:	4770      	bx	lr
			pstate->rd_timing_status ^= 0x01;
 8003682:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8003686:	f083 0301 	eor.w	r3, r3, #1
 800368a:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 800368e:	e7f3      	b.n	8003678 <VL53L1_update_ll_driver_rd_state+0x6e>
			pstate->rd_device_state  =
 8003690:	2303      	movs	r3, #3
 8003692:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count  = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	e7bf      	b.n	800361a <VL53L1_update_ll_driver_rd_state+0x10>

0800369a <VL53L1_check_ll_driver_rd_state>:
	device_gph_id = (psys_results->result__interrupt_status &
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800369a:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
{
 800369e:	4602      	mov	r2, r0
	if ((pdev->sys_ctrl.system__mode_start &
 80036a0:	f013 0320 	ands.w	r3, r3, #32
 80036a4:	d023      	beq.n	80036ee <VL53L1_check_ll_driver_rd_state+0x54>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 80036a6:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
			psys_results->result__range_status &
 80036aa:	f890 31cf 	ldrb.w	r3, [r0, #463]	; 0x1cf
		if (pstate->rd_device_state ==
 80036ae:	2906      	cmp	r1, #6
 80036b0:	d107      	bne.n	80036c2 <VL53L1_check_ll_driver_rd_state+0x28>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2b12      	cmp	r3, #18
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 80036b8:	bf0c      	ite	eq
 80036ba:	2000      	moveq	r0, #0
 80036bc:	f06f 0010 	mvnne.w	r0, #16
 80036c0:	4770      	bx	lr
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 80036c2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80036c6:	f890 11d1 	ldrb.w	r1, [r0, #465]	; 0x1d1
 80036ca:	4299      	cmp	r1, r3
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80036cc:	f892 31ce 	ldrb.w	r3, [r2, #462]	; 0x1ce

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 80036d0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80036d4:	ea4f 1323 	mov.w	r3, r3, asr #4
		if (pstate->rd_gph_id != device_gph_id) {
 80036d8:	f003 0302 	and.w	r3, r3, #2
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 80036dc:	bf14      	ite	ne
 80036de:	f06f 0011 	mvnne.w	r0, #17
 80036e2:	2000      	moveq	r0, #0
		if (pstate->rd_gph_id != device_gph_id) {
 80036e4:	429a      	cmp	r2, r3
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 80036e6:	bf18      	it	ne
 80036e8:	f06f 0012 	mvnne.w	r0, #18
 80036ec:	4770      	bx	lr
	VL53L1_Error         status = VL53L1_ERROR_NONE;
 80036ee:	4618      	mov	r0, r3
	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
}
 80036f0:	4770      	bx	lr

080036f2 <VL53L1_update_ll_driver_cfg_state>:
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 80036f2:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 80036f6:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 80036fa:	d108      	bne.n	800370e <VL53L1_update_ll_driver_cfg_state+0x1c>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80036fc:	2203      	movs	r2, #3
 80036fe:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003702:	2202      	movs	r2, #2
			pstate->cfg_stream_count = 0;
 8003704:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003708:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 800370c:	e02a      	b.n	8003764 <VL53L1_update_ll_driver_cfg_state+0x72>
		if (pstate->cfg_stream_count == 0xFF) {
 800370e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8003712:	2bff      	cmp	r3, #255	; 0xff
			pstate->cfg_stream_count = 0x80;
 8003714:	bf0c      	ite	eq
 8003716:	2380      	moveq	r3, #128	; 0x80
			pstate->cfg_stream_count++;
 8003718:	3301      	addne	r3, #1
 800371a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800371e:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8003722:	f083 0302 	eor.w	r3, r3, #2
 8003726:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
		switch (pstate->cfg_device_state) {
 800372a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800372e:	2b03      	cmp	r3, #3
 8003730:	d006      	beq.n	8003740 <VL53L1_update_ll_driver_cfg_state+0x4e>
 8003732:	2b04      	cmp	r3, #4
 8003734:	d012      	beq.n	800375c <VL53L1_update_ll_driver_cfg_state+0x6a>
			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8003736:	2303      	movs	r3, #3
 8003738:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
			pstate->cfg_stream_count = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	e7e0      	b.n	8003702 <VL53L1_update_ll_driver_cfg_state+0x10>
			pstate->cfg_timing_status ^= 0x01;
 8003740:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 800374c:	2301      	movs	r3, #1
 800374e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8003752:	2304      	movs	r3, #4
 8003754:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 8003758:	2000      	movs	r0, #0
 800375a:	4770      	bx	lr
			pstate->cfg_timing_status ^= 0x01;
 800375c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8003760:	f083 0301 	eor.w	r3, r3, #1
			pstate->cfg_timing_status = 0;
 8003764:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
		break;
 8003768:	e7f6      	b.n	8003758 <VL53L1_update_ll_driver_cfg_state+0x66>

0800376a <VL53L1_copy_rtn_good_spads_to_buffer>:
{
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800376a:	7c03      	ldrb	r3, [r0, #16]
 800376c:	700b      	strb	r3, [r1, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800376e:	7c43      	ldrb	r3, [r0, #17]
 8003770:	704b      	strb	r3, [r1, #1]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8003772:	7c83      	ldrb	r3, [r0, #18]
 8003774:	708b      	strb	r3, [r1, #2]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8003776:	7cc3      	ldrb	r3, [r0, #19]
 8003778:	70cb      	strb	r3, [r1, #3]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800377a:	7d03      	ldrb	r3, [r0, #20]
 800377c:	710b      	strb	r3, [r1, #4]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800377e:	7d43      	ldrb	r3, [r0, #21]
 8003780:	714b      	strb	r3, [r1, #5]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8003782:	7d83      	ldrb	r3, [r0, #22]
 8003784:	718b      	strb	r3, [r1, #6]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8003786:	7dc3      	ldrb	r3, [r0, #23]
 8003788:	71cb      	strb	r3, [r1, #7]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800378a:	7e03      	ldrb	r3, [r0, #24]
 800378c:	720b      	strb	r3, [r1, #8]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800378e:	7e43      	ldrb	r3, [r0, #25]
 8003790:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8003792:	7e83      	ldrb	r3, [r0, #26]
 8003794:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8003796:	7ec3      	ldrb	r3, [r0, #27]
 8003798:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800379a:	7f03      	ldrb	r3, [r0, #28]
 800379c:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800379e:	7f43      	ldrb	r3, [r0, #29]
 80037a0:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 80037a2:	7f83      	ldrb	r3, [r0, #30]
 80037a4:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 80037a6:	7fc3      	ldrb	r3, [r0, #31]
 80037a8:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80037aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80037ae:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80037b0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80037b4:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80037b6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80037ba:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 80037bc:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80037c0:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 80037c2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80037c6:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 80037c8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80037cc:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 80037ce:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80037d2:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 80037d4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80037d8:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 80037da:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80037de:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 80037e0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80037e4:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 80037e6:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80037ea:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 80037ec:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80037f0:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 80037f2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80037f6:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 80037f8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80037fc:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 80037fe:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8003802:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8003804:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8003808:	77cb      	strb	r3, [r1, #31]
 800380a:	4770      	bx	lr

0800380c <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800380c:	4411      	add	r1, r2
	uint16_t   i    = 0;
	uint16_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 800380e:	4291      	cmp	r1, r2
 8003810:	d100      	bne.n	8003814 <VL53L1_i2c_encode_uint16_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8003812:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8003814:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 8003818:	0a00      	lsrs	r0, r0, #8
 800381a:	e7f8      	b.n	800380e <VL53L1_i2c_encode_uint16_t+0x2>

0800381c <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800381c:	180b      	adds	r3, r1, r0
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800381e:	2000      	movs	r0, #0

	while (count-- > 0) {
 8003820:	4299      	cmp	r1, r3
 8003822:	d100      	bne.n	8003826 <VL53L1_i2c_decode_uint16_t+0xa>
		value = (value << 8) | (uint16_t)*pbuffer++;
	}

	return value;
}
 8003824:	4770      	bx	lr
		value = (value << 8) | (uint16_t)*pbuffer++;
 8003826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800382a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800382e:	b280      	uxth	r0, r0
 8003830:	e7f6      	b.n	8003820 <VL53L1_i2c_decode_uint16_t+0x4>

08003832 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8003832:	4411      	add	r1, r2
	uint16_t   i    = 0;
	int16_t    data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 8003834:	4291      	cmp	r1, r2
 8003836:	d100      	bne.n	800383a <VL53L1_i2c_encode_int16_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8003838:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800383a:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 800383e:	1200      	asrs	r0, r0, #8
 8003840:	e7f8      	b.n	8003834 <VL53L1_i2c_encode_int16_t+0x2>

08003842 <VL53L1_i2c_decode_int16_t>:
	 */

	int16_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8003842:	f991 3000 	ldrsb.w	r3, [r1]
 8003846:	4408      	add	r0, r1
 8003848:	17db      	asrs	r3, r3, #31
		value = 0xFFFF;
	}

	while (count-- > 0) {
 800384a:	4281      	cmp	r1, r0
 800384c:	d101      	bne.n	8003852 <VL53L1_i2c_decode_int16_t+0x10>
		value = (value << 8) | (int16_t)*pbuffer++;
	}

	return value;
}
 800384e:	4618      	mov	r0, r3
 8003850:	4770      	bx	lr
		value = (value << 8) | (int16_t)*pbuffer++;
 8003852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003856:	b25b      	sxtb	r3, r3
 8003858:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800385c:	e7f5      	b.n	800384a <VL53L1_i2c_decode_int16_t+0x8>

0800385e <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800385e:	4411      	add	r1, r2
	uint16_t   i    = 0;
	uint32_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 8003860:	4291      	cmp	r1, r2
 8003862:	d100      	bne.n	8003866 <VL53L1_i2c_encode_uint32_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8003864:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8003866:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 800386a:	0a00      	lsrs	r0, r0, #8
 800386c:	e7f8      	b.n	8003860 <VL53L1_i2c_encode_uint32_t+0x2>

0800386e <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800386e:	180b      	adds	r3, r1, r0
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8003870:	2000      	movs	r0, #0

	while (count-- > 0) {
 8003872:	4299      	cmp	r1, r3
 8003874:	d100      	bne.n	8003878 <VL53L1_i2c_decode_uint32_t+0xa>
		value = (value << 8) | (uint32_t)*pbuffer++;
	}

	return value;
}
 8003876:	4770      	bx	lr
		value = (value << 8) | (uint32_t)*pbuffer++;
 8003878:	f811 2b01 	ldrb.w	r2, [r1], #1
 800387c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8003880:	e7f7      	b.n	8003872 <VL53L1_i2c_decode_uint32_t+0x4>

08003882 <VL53L1_i2c_decode_int32_t>:
	 */

	int32_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8003882:	f991 3000 	ldrsb.w	r3, [r1]
 8003886:	4408      	add	r0, r1
 8003888:	17db      	asrs	r3, r3, #31
		value = 0xFFFFFFFF;
	}

	while (count-- > 0) {
 800388a:	4281      	cmp	r1, r0
 800388c:	d101      	bne.n	8003892 <VL53L1_i2c_decode_int32_t+0x10>
		value = (value << 8) | (int32_t)*pbuffer++;
	}

	return value;
}
 800388e:	4618      	mov	r0, r3
 8003890:	4770      	bx	lr
		value = (value << 8) | (int32_t)*pbuffer++;
 8003892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003896:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800389a:	e7f6      	b.n	800388a <VL53L1_i2c_decode_int32_t+0x8>

0800389c <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	460d      	mov	r5, r1

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 80038a0:	f000 f938 	bl	8003b14 <VL53L1_calc_pll_period_us>
 80038a4:	4604      	mov	r4, r0

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 80038a6:	4628      	mov	r0, r5
 80038a8:	f000 f939 	bl	8003b1e <VL53L1_decode_vcsel_period>
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 80038ac:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80038b0:	4363      	muls	r3, r4
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80038b2:	099b      	lsrs	r3, r3, #6

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 80038b4:	4358      	muls	r0, r3
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 80038b6:	0980      	lsrs	r0, r0, #6
 80038b8:	bd38      	pop	{r3, r4, r5, pc}

080038ba <VL53L1_calc_range_ignore_threshold>:

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0) {
 80038ba:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 80038bc:	bfba      	itte	lt
 80038be:	4249      	neglt	r1, r1
 80038c0:	b289      	uxthlt	r1, r1
 80038c2:	2100      	movge	r1, #0
	}

	if (y_gradient < 0) {
 80038c4:	2a00      	cmp	r2, #0
 80038c6:	bfae      	itee	ge
 80038c8:	2200      	movge	r2, #0
		y_gradient_int = y_gradient * -1;
 80038ca:	4252      	neglt	r2, r2
 80038cc:	b292      	uxthlt	r2, r2

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 80038ce:	b212      	sxth	r2, r2
 80038d0:	b209      	sxth	r1, r1
{
 80038d2:	b510      	push	{r4, lr}
	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 80038d4:	4411      	add	r1, r2
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80038d6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80038da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80038de:	0100      	lsls	r0, r0, #4
	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 80038e0:	0149      	lsls	r1, r1, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80038e2:	fb90 f0f4 	sdiv	r0, r0, r4
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80038e6:	fb91 f1f2 	sdiv	r1, r1, r2

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80038ea:	4408      	add	r0, r1

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80038ec:	4358      	muls	r0, r3

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80038ee:	2320      	movs	r3, #32
 80038f0:	3010      	adds	r0, #16
 80038f2:	fb90 f0f3 	sdiv	r0, r0, r3
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80038f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038fa:	4298      	cmp	r0, r3
 80038fc:	bfa8      	it	ge
 80038fe:	4618      	movge	r0, r3
}
 8003900:	b280      	uxth	r0, r0
 8003902:	bd10      	pop	{r4, pc}

08003904 <VL53L1_calc_timeout_us>:
	uint64_t tmp            = 0;

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 8003904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003908:	2300      	movs	r3, #0
 800390a:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp  = tmp >> 12;
 800390e:	0b10      	lsrs	r0, r2, #12
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
}
 8003910:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8003914:	4770      	bx	lr

08003916 <VL53L1_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 8003916:	b150      	cbz	r0, 800392e <VL53L1_encode_timeout+0x18>
		ls_byte = timeout_mclks - 1;
 8003918:	2300      	movs	r3, #0
 800391a:	3801      	subs	r0, #1

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800391c:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8003920:	b29a      	uxth	r2, r3
 8003922:	f103 0301 	add.w	r3, r3, #1
 8003926:	d103      	bne.n	8003930 <VL53L1_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8003928:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800392c:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 800392e:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8003930:	0840      	lsrs	r0, r0, #1
 8003932:	e7f3      	b.n	800391c <VL53L1_encode_timeout+0x6>

08003934 <VL53L1_calc_encoded_timeout>:
			((timeout_us << 12) + (macro_period_us>>1)) /
 8003934:	0300      	lsls	r0, r0, #12
 8003936:	eb00 0051 	add.w	r0, r0, r1, lsr #1
	timeout_encoded =
 800393a:	fbb0 f0f1 	udiv	r0, r0, r1
 800393e:	f7ff bfea 	b.w	8003916 <VL53L1_encode_timeout>

08003942 <VL53L1_decode_timeout>:
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003942:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8003944:	0a00      	lsrs	r0, r0, #8
 8003946:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 800394a:	3001      	adds	r0, #1
 800394c:	4770      	bx	lr

0800394e <VL53L1_calc_decoded_timeout_us>:
{
 800394e:	b508      	push	{r3, lr}
	timeout_mclks =
 8003950:	f7ff fff7 	bl	8003942 <VL53L1_decode_timeout>
	tmp += 0x00800;
 8003954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003958:	2300      	movs	r3, #0
 800395a:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp  = tmp >> 12;
 800395e:	0b10      	lsrs	r0, r2, #12
}
 8003960:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8003964:	bd08      	pop	{r3, pc}

08003966 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8003966:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800396a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800396c:	4605      	mov	r5, r0
 800396e:	4688      	mov	r8, r1
 8003970:	4617      	mov	r7, r2
	uint32_t timeout_mclks      = 0;
	uint16_t timeout_encoded    = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8003972:	4699      	mov	r9, r3
 8003974:	b393      	cbz	r3, 80039dc <VL53L1_calc_timeout_register_values+0x76>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 8003976:	79a1      	ldrb	r1, [r4, #6]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff8f 	bl	800389c <VL53L1_calc_macro_period_us>
 800397e:	4606      	mov	r6, r0
			((timeout_us << 12) + (macro_period_us>>1)) /
 8003980:	0328      	lsls	r0, r5, #12
 8003982:	eb00 0056 	add.w	r0, r0, r6, lsr #1
	timeout_mclks   =
 8003986:	fbb0 f0f6 	udiv	r0, r0, r6
		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800398a:	28ff      	cmp	r0, #255	; 0xff
 800398c:	bf28      	it	cs
 800398e:	20ff      	movcs	r0, #255	; 0xff
 8003990:	9b08      	ldr	r3, [sp, #32]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 8003992:	4631      	mov	r1, r6
				(uint8_t)timeout_mclks;
 8003994:	71d8      	strb	r0, [r3, #7]
		timeout_encoded =
 8003996:	4640      	mov	r0, r8
 8003998:	f7ff ffcc 	bl	8003934 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800399c:	0a03      	lsrs	r3, r0, #8
 800399e:	7023      	strb	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80039a0:	7060      	strb	r0, [r4, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 80039a2:	4631      	mov	r1, r6
 80039a4:	4638      	mov	r0, r7
 80039a6:	f7ff ffc5 	bl	8003934 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80039aa:	0a03      	lsrs	r3, r0, #8
 80039ac:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80039ae:	7160      	strb	r0, [r4, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
 80039b0:	7a61      	ldrb	r1, [r4, #9]
 80039b2:	4648      	mov	r0, r9
 80039b4:	f7ff ff72 	bl	800389c <VL53L1_calc_macro_period_us>
 80039b8:	4605      	mov	r5, r0
				VL53L1_calc_macro_period_us(
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 80039ba:	4601      	mov	r1, r0
 80039bc:	4640      	mov	r0, r8
 80039be:	f7ff ffb9 	bl	8003934 <VL53L1_calc_encoded_timeout>
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80039c2:	0a03      	lsrs	r3, r0, #8
 80039c4:	70a3      	strb	r3, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80039c6:	70e0      	strb	r0, [r4, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 80039c8:	4629      	mov	r1, r5
 80039ca:	4638      	mov	r0, r7
 80039cc:	f7ff ffb2 	bl	8003934 <VL53L1_calc_encoded_timeout>
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80039d0:	0a03      	lsrs	r3, r0, #8
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80039d2:	7220      	strb	r0, [r4, #8]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80039d4:	71e3      	strb	r3, [r4, #7]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80039d6:	2000      	movs	r0, #0
 80039d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80039dc:	f06f 000e 	mvn.w	r0, #14

	LOG_FUNCTION_END(0);

	return status;

}
 80039e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080039e4 <VL53L1_encode_row_col>:
{
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 80039e4:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15-row);
 80039e6:	bf8b      	itete	hi
 80039e8:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	} else {
		*pspad_number = ((15-col) << 3) + row;
 80039ec:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15-row);
 80039f0:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15-col) << 3) + row;
 80039f2:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 80039f6:	7010      	strb	r0, [r2, #0]
 80039f8:	4770      	bx	lr

080039fa <VL53L1_decode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 80039fa:	0903      	lsrs	r3, r0, #4
	*pwidth  = encoded_xy_size & 0x0F;
 80039fc:	f000 000f 	and.w	r0, r0, #15
	*pheight = encoded_xy_size >> 4;
 8003a00:	7013      	strb	r3, [r2, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8003a02:	7008      	strb	r0, [r1, #0]
 8003a04:	4770      	bx	lr

08003a06 <VL53L1_encode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8003a06:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003a0a:	7011      	strb	r1, [r2, #0]
 8003a0c:	4770      	bx	lr

08003a0e <VL53L1_low_power_auto_data_init>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8003a0e:	2303      	movs	r3, #3
 8003a10:	f880 32e4 	strb.w	r3, [r0, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f880 32e5 	strb.w	r3, [r0, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8003a1a:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8003a1e:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8003a22:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8003a26:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8003a2a:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8003a2e:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8003a32:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	4770      	bx	lr

08003a3a <VL53L1_low_power_auto_data_stop_range>:
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8003a3a:	22ff      	movs	r2, #255	; 0xff
 8003a3c:	f880 22e6 	strb.w	r2, [r0, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8003a40:	2200      	movs	r2, #0
 8003a42:	f880 22ea 	strb.w	r2, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8003a46:	f8c0 22ec 	str.w	r2, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8003a4a:	f8a0 22f0 	strh.w	r2, [r0, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8003a4e:	f890 22e8 	ldrb.w	r2, [r0, #744]	; 0x2e8
{
 8003a52:	4603      	mov	r3, r0
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8003a54:	b10a      	cbz	r2, 8003a5a <VL53L1_low_power_auto_data_stop_range+0x20>
		pdev->stat_nvm.vhv_config__init =
 8003a56:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8003a5a:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
 8003a5e:	b10a      	cbz	r2, 8003a64 <VL53L1_low_power_auto_data_stop_range+0x2a>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8003a60:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			pdev->low_power_auto_data.saved_vhv_timeout;

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8003a64:	2000      	movs	r0, #0
 8003a66:	f883 018d 	strb.w	r0, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
}
 8003a6a:	4770      	bx	lr

08003a6c <VL53L1_config_low_power_auto_mode>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	7053      	strb	r3, [r2, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	7093      	strb	r3, [r2, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8003a74:	228b      	movs	r2, #139	; 0x8b
 8003a76:	744a      	strb	r2, [r1, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8003a78:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8003a7c:	8202      	strh	r2, [r0, #16]
	pgeneral->dss_config__roi_mode_control =
 8003a7e:	2202      	movs	r2, #2
 8003a80:	7282      	strb	r2, [r0, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	4770      	bx	lr

08003a86 <VL53L1_low_power_auto_setup_manual_calibration>:

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8003a86:	f890 2163 	ldrb.w	r2, [r0, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8003a8a:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_init =
 8003a8e:	f880 22e8 	strb.w	r2, [r0, #744]	; 0x2e8

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8003a92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a96:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8003a9a:	f890 22e4 	ldrb.w	r2, [r0, #740]	; 0x2e4
	pdev->low_power_auto_data.saved_vhv_timeout =
 8003a9e:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8003aaa:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f880 318d 	strb.w	r3, [r0, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8003ab4:	f890 32ae 	ldrb.w	r3, [r0, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8003ab8:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8003abc:	f880 3187 	strb.w	r3, [r0, #391]	; 0x187
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	4770      	bx	lr

08003ac4 <VL53L1_low_power_auto_update_DSS>:
	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8003ac4:	f8b0 31d2 	ldrh.w	r3, [r0, #466]	; 0x1d2
 8003ac8:	b30b      	cbz	r3, 8003b0e <VL53L1_low_power_auto_update_DSS+0x4a>
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 8003aca:	f8b0 11d6 	ldrh.w	r1, [r0, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8003ace:	f8b0 21de 	ldrh.w	r2, [r0, #478]	; 0x1de
 8003ad2:	440a      	add	r2, r1
 8003ad4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ad8:	428a      	cmp	r2, r1
 8003ada:	bfa8      	it	ge
 8003adc:	460a      	movge	r2, r1
	utemp32a = utemp32a << 16;
 8003ade:	0412      	lsls	r2, r2, #16
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8003ae4:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 8003ae8:	b18b      	cbz	r3, 8003b0e <VL53L1_low_power_auto_update_DSS+0x4a>
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 8003aea:	f8b0 2164 	ldrh.w	r2, [r0, #356]	; 0x164
 8003aee:	0412      	lsls	r2, r2, #16
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
			if (utemp32a > 0xFFFF)
				utemp32a = 0xFFFF;

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 8003af4:	428b      	cmp	r3, r1
 8003af6:	bf28      	it	cs
 8003af8:	460b      	movcs	r3, r1
 8003afa:	b29b      	uxth	r3, r3
	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8003afc:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8003b00:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
		pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 8003b04:	2302      	movs	r3, #2
 8003b06:	f880 318e 	strb.w	r3, [r0, #398]	; 0x18e
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	4770      	bx	lr
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b12:	e7f3      	b.n	8003afc <VL53L1_low_power_auto_update_DSS+0x38>

08003b14 <VL53L1_calc_pll_period_us>:
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 8003b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b18:	fb93 f0f0 	sdiv	r0, r3, r0
 8003b1c:	4770      	bx	lr

08003b1e <VL53L1_decode_vcsel_period>:
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8003b1e:	3001      	adds	r0, #1
 8003b20:	0040      	lsls	r0, r0, #1

	return vcsel_period_pclks;
}
 8003b22:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8003b26:	4770      	bx	lr

08003b28 <VL53L1_decode_row_col>:
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8003b28:	0603      	lsls	r3, r0, #24
		*prow = 8 + ((255-spad_number) & 0x07);
 8003b2a:	bf49      	itett	mi
 8003b2c:	43c3      	mvnmi	r3, r0
		*pcol = (spad_number-128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 8003b2e:	f000 0307 	andpl.w	r3, r0, #7
		*prow = 8 + ((255-spad_number) & 0x07);
 8003b32:	f003 0307 	andmi.w	r3, r3, #7
		*pcol = (spad_number-128) >> 3;
 8003b36:	3880      	submi	r0, #128	; 0x80
		*pcol = (127-spad_number) >> 3;
 8003b38:	bf54      	ite	pl
 8003b3a:	f1c0 007f 	rsbpl	r0, r0, #127	; 0x7f
		*prow = 8 + ((255-spad_number) & 0x07);
 8003b3e:	3308      	addmi	r3, #8
		*pcol = (127-spad_number) >> 3;
 8003b40:	ea4f 00e0 	mov.w	r0, r0, asr #3
		*prow = 8 + ((255-spad_number) & 0x07);
 8003b44:	bf4c      	ite	mi
 8003b46:	700b      	strbmi	r3, [r1, #0]
		*prow = spad_number & 0x07;
 8003b48:	700b      	strbpl	r3, [r1, #0]
		*pcol = (127-spad_number) >> 3;
 8003b4a:	7010      	strb	r0, [r2, #0]
 8003b4c:	4770      	bx	lr

08003b4e <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003b4e:	290a      	cmp	r1, #10
{
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	4605      	mov	r5, r0
 8003b54:	4614      	mov	r4, r2
	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003b56:	d929      	bls.n	8003bac <VL53L1_i2c_encode_static_nvm_managed+0x5e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8003b58:	7803      	ldrb	r3, [r0, #0]
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
	VL53L1_i2c_encode_uint16_t(
 8003b5a:	3205      	adds	r2, #5
		pdata->i2c_slave__device_address & 0x7F;
 8003b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   0) =
 8003b60:	f802 3c05 	strb.w	r3, [r2, #-5]
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8003b64:	7843      	ldrb	r3, [r0, #1]
	VL53L1_i2c_encode_uint16_t(
 8003b66:	2102      	movs	r1, #2
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8003b68:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   1) =
 8003b6c:	f802 3c04 	strb.w	r3, [r2, #-4]
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8003b70:	7883      	ldrb	r3, [r0, #2]
 8003b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   2) =
 8003b76:	f802 3c03 	strb.w	r3, [r2, #-3]
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8003b7a:	78c3      	ldrb	r3, [r0, #3]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 8003b80:	f802 3c02 	strb.w	r3, [r2, #-2]
		pdata->ana_config__fast_osc__trim & 0x7F;
 8003b84:	7903      	ldrb	r3, [r0, #4]
 8003b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   4) =
 8003b8a:	f802 3c01 	strb.w	r3, [r2, #-1]
	VL53L1_i2c_encode_uint16_t(
 8003b8e:	88c0      	ldrh	r0, [r0, #6]
 8003b90:	f7ff fe3c 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 8003b94:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +  10) =
		pdata->vhv_config__init;
	LOG_FUNCTION_END(status);


	return status;
 8003b96:	2000      	movs	r0, #0
	*(pbuffer +   7) =
 8003b98:	71e3      	strb	r3, [r4, #7]
		pdata->vhv_config__count_thresh;
 8003b9a:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   8) =
 8003b9c:	7223      	strb	r3, [r4, #8]
		pdata->vhv_config__offset & 0x3F;
 8003b9e:	7aab      	ldrb	r3, [r5, #10]
 8003ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 8003ba4:	7263      	strb	r3, [r4, #9]
		pdata->vhv_config__init;
 8003ba6:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer +  10) =
 8003ba8:	72a3      	strb	r3, [r4, #10]
	return status;
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003bac:	f06f 0009 	mvn.w	r0, #9
}
 8003bb0:	bd38      	pop	{r3, r4, r5, pc}

08003bb2 <VL53L1_i2c_decode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003bb2:	280a      	cmp	r0, #10
{
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	460d      	mov	r5, r1
 8003bb8:	4614      	mov	r4, r2
	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003bba:	d927      	bls.n	8003c0c <VL53L1_i2c_decode_static_nvm_managed+0x5a>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8003bbc:	780b      	ldrb	r3, [r1, #0]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8003bbe:	2002      	movs	r0, #2
		(*(pbuffer +   0)) & 0x7F;
 8003bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->i2c_slave__device_address =
 8003bc4:	7013      	strb	r3, [r2, #0]
		(*(pbuffer +   1)) & 0xF;
 8003bc6:	784b      	ldrb	r3, [r1, #1]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8003bc8:	3105      	adds	r1, #5
		(*(pbuffer +   1)) & 0xF;
 8003bca:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 8003bce:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   2)) & 0x7F;
 8003bd0:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 8003bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 8003bd8:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   3)) & 0x3;
 8003bda:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8003bde:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 8003be2:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   4)) & 0x7F;
 8003be4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8003be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim =
 8003bec:	7113      	strb	r3, [r2, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8003bee:	f7ff fe15 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 8003bf2:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8003bf4:	79eb      	ldrb	r3, [r5, #7]
	pdata->vhv_config__init =
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8003bf6:	2000      	movs	r0, #0
	pdata->vhv_config__timeout_macrop_loop_bound =
 8003bf8:	7223      	strb	r3, [r4, #8]
	pdata->vhv_config__count_thresh =
 8003bfa:	7a2b      	ldrb	r3, [r5, #8]
 8003bfc:	7263      	strb	r3, [r4, #9]
		(*(pbuffer +   9)) & 0x3F;
 8003bfe:	7a6b      	ldrb	r3, [r5, #9]
 8003c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 8003c04:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 8003c06:	7aab      	ldrb	r3, [r5, #10]
 8003c08:	72e3      	strb	r3, [r4, #11]
	return status;
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003c0c:	f06f 0009 	mvn.w	r0, #9
}
 8003c10:	bd38      	pop	{r3, r4, r5, pc}

08003c12 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8003c12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c14:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8003c16:	230b      	movs	r3, #11
 8003c18:	aa01      	add	r2, sp, #4
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	f000 fcfa 	bl	8004614 <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8003c20:	b920      	cbnz	r0, 8003c2c <VL53L1_get_static_nvm_managed+0x1a>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8003c22:	4622      	mov	r2, r4
 8003c24:	a901      	add	r1, sp, #4
 8003c26:	200b      	movs	r0, #11
 8003c28:	f7ff ffc3 	bl	8003bb2 <VL53L1_i2c_decode_static_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8003c2c:	b004      	add	sp, #16
 8003c2e:	bd10      	pop	{r4, pc}

08003c30 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003c30:	2916      	cmp	r1, #22
{
 8003c32:	b538      	push	{r3, r4, r5, lr}
 8003c34:	4604      	mov	r4, r0
 8003c36:	4615      	mov	r5, r2
	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003c38:	d951      	bls.n	8003cde <VL53L1_i2c_encode_customer_nvm_managed+0xae>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8003c3a:	7803      	ldrb	r3, [r0, #0]
		pdata->global_config__ref_en_start_select;
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
	VL53L1_i2c_encode_uint16_t(
 8003c3c:	3209      	adds	r2, #9
	*(pbuffer +   0) =
 8003c3e:	f802 3c09 	strb.w	r3, [r2, #-9]
		pdata->global_config__spad_enables_ref_1;
 8003c42:	7843      	ldrb	r3, [r0, #1]
	VL53L1_i2c_encode_uint16_t(
 8003c44:	2102      	movs	r1, #2
	*(pbuffer +   1) =
 8003c46:	f802 3c08 	strb.w	r3, [r2, #-8]
		pdata->global_config__spad_enables_ref_2;
 8003c4a:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 8003c4c:	f802 3c07 	strb.w	r3, [r2, #-7]
		pdata->global_config__spad_enables_ref_3;
 8003c50:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 8003c52:	f802 3c06 	strb.w	r3, [r2, #-6]
		pdata->global_config__spad_enables_ref_4;
 8003c56:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 8003c58:	f802 3c05 	strb.w	r3, [r2, #-5]
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8003c5c:	7943      	ldrb	r3, [r0, #5]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   5) =
 8003c62:	f802 3c04 	strb.w	r3, [r2, #-4]
		pdata->global_config__ref_en_start_select;
 8003c66:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer +   6) =
 8003c68:	f802 3c03 	strb.w	r3, [r2, #-3]
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8003c6c:	79c3      	ldrb	r3, [r0, #7]
 8003c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   7) =
 8003c72:	f802 3c02 	strb.w	r3, [r2, #-2]
		pdata->ref_spad_man__ref_location & 0x3;
 8003c76:	7a03      	ldrb	r3, [r0, #8]
 8003c78:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   8) =
 8003c7c:	f802 3c01 	strb.w	r3, [r2, #-1]
	VL53L1_i2c_encode_uint16_t(
 8003c80:	8940      	ldrh	r0, [r0, #10]
 8003c82:	f7ff fdc3 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8003c86:	f105 020b 	add.w	r2, r5, #11
 8003c8a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8003c8e:	2102      	movs	r1, #2
 8003c90:	f7ff fdcf 	bl	8003832 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8003c94:	f105 020d 	add.w	r2, r5, #13
 8003c98:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	f7ff fdc8 	bl	8003832 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8003ca2:	f105 020f 	add.w	r2, r5, #15
 8003ca6:	8a20      	ldrh	r0, [r4, #16]
 8003ca8:	2102      	movs	r1, #2
 8003caa:	f7ff fdaf 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
 8003cae:	8a60      	ldrh	r0, [r4, #18]
 8003cb0:	f105 0211 	add.w	r2, r5, #17
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8003cba:	f7ff fdba 	bl	8003832 <VL53L1_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8003cbe:	f105 0213 	add.w	r2, r5, #19
 8003cc2:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	f7ff fdb3 	bl	8003832 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8003ccc:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8003cd0:	f105 0215 	add.w	r2, r5, #21
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	f7ff fdac 	bl	8003832 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8003cda:	2000      	movs	r0, #0
 8003cdc:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003cde:	f06f 0009 	mvn.w	r0, #9
}
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}

08003ce4 <VL53L1_i2c_decode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003ce4:	2816      	cmp	r0, #22
{
 8003ce6:	b538      	push	{r3, r4, r5, lr}
 8003ce8:	460d      	mov	r5, r1
 8003cea:	4614      	mov	r4, r2
	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003cec:	d94b      	bls.n	8003d86 <VL53L1_i2c_decode_customer_nvm_managed+0xa2>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8003cee:	780b      	ldrb	r3, [r1, #0]
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8003cf0:	2002      	movs	r0, #2
	pdata->global_config__spad_enables_ref_0 =
 8003cf2:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 8003cf4:	784b      	ldrb	r3, [r1, #1]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8003cf6:	3109      	adds	r1, #9
	pdata->global_config__spad_enables_ref_1 =
 8003cf8:	7053      	strb	r3, [r2, #1]
	pdata->global_config__spad_enables_ref_2 =
 8003cfa:	f811 3c07 	ldrb.w	r3, [r1, #-7]
 8003cfe:	7093      	strb	r3, [r2, #2]
	pdata->global_config__spad_enables_ref_3 =
 8003d00:	f811 3c06 	ldrb.w	r3, [r1, #-6]
 8003d04:	70d3      	strb	r3, [r2, #3]
	pdata->global_config__spad_enables_ref_4 =
 8003d06:	f811 3c05 	ldrb.w	r3, [r1, #-5]
 8003d0a:	7113      	strb	r3, [r2, #4]
		(*(pbuffer +   5)) & 0xF;
 8003d0c:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8003d10:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 8003d14:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 8003d16:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 8003d1a:	7193      	strb	r3, [r2, #6]
		(*(pbuffer +   7)) & 0x3F;
 8003d1c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8003d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 8003d24:	71d3      	strb	r3, [r2, #7]
		(*(pbuffer +   8)) & 0x3;
 8003d26:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 8003d2e:	7213      	strb	r3, [r2, #8]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8003d30:	f7ff fd74 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8003d34:	f105 010b 	add.w	r1, r5, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8003d38:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	f7ff fd81 	bl	8003842 <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8003d40:	f105 010d 	add.w	r1, r5, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8003d44:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8003d46:	2002      	movs	r0, #2
 8003d48:	f7ff fd7b 	bl	8003842 <VL53L1_i2c_decode_int16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8003d4c:	f105 010f 	add.w	r1, r5, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8003d50:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8003d52:	2002      	movs	r0, #2
 8003d54:	f7ff fd62 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8003d58:	f105 0111 	add.w	r1, r5, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 8003d5c:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8003d5e:	2002      	movs	r0, #2
 8003d60:	f7ff fd6f 	bl	8003842 <VL53L1_i2c_decode_int16_t>
 8003d64:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 8003d68:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8003d6a:	f105 0113 	add.w	r1, r5, #19
 8003d6e:	2002      	movs	r0, #2
 8003d70:	f7ff fd67 	bl	8003842 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8003d74:	f105 0115 	add.w	r1, r5, #21
	pdata->mm_config__inner_offset_mm =
 8003d78:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8003d7a:	2002      	movs	r0, #2
 8003d7c:	f7ff fd61 	bl	8003842 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 8003d80:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 8003d82:	2000      	movs	r0, #0
 8003d84:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003d86:	f06f 0009 	mvn.w	r0, #9
}
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}

08003d8c <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8003d92:	2317      	movs	r3, #23
 8003d94:	466a      	mov	r2, sp
 8003d96:	210d      	movs	r1, #13
 8003d98:	f000 fc3c 	bl	8004614 <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8003d9c:	b920      	cbnz	r0, 8003da8 <VL53L1_get_customer_nvm_managed+0x1c>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8003d9e:	4622      	mov	r2, r4
 8003da0:	4669      	mov	r1, sp
 8003da2:	2017      	movs	r0, #23
 8003da4:	f7ff ff9e 	bl	8003ce4 <VL53L1_i2c_decode_customer_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8003da8:	b006      	add	sp, #24
 8003daa:	bd10      	pop	{r4, pc}

08003dac <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003dac:	291f      	cmp	r1, #31
{
 8003dae:	b538      	push	{r3, r4, r5, lr}
 8003db0:	4604      	mov	r4, r0
 8003db2:	4615      	mov	r5, r2
	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003db4:	d965      	bls.n	8003e82 <VL53L1_i2c_encode_static_config+0xd6>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 8003db6:	2102      	movs	r1, #2
 8003db8:	8800      	ldrh	r0, [r0, #0]
 8003dba:	f7ff fd27 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8003dbe:	78a3      	ldrb	r3, [r4, #2]
		pdata->algo__crosstalk_compensation_valid_height_mm;
	*(pbuffer +  22) =
		pdata->spare_host_config__static_config_spare_0;
	*(pbuffer +  23) =
		pdata->spare_host_config__static_config_spare_1;
	VL53L1_i2c_encode_uint16_t(
 8003dc0:	f105 0218 	add.w	r2, r5, #24
		pdata->debug__ctrl & 0x1;
 8003dc4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 8003dc8:	70ab      	strb	r3, [r5, #2]
		pdata->test_mode__ctrl & 0xF;
 8003dca:	78e3      	ldrb	r3, [r4, #3]
	VL53L1_i2c_encode_uint16_t(
 8003dcc:	2102      	movs	r1, #2
		pdata->test_mode__ctrl & 0xF;
 8003dce:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   3) =
 8003dd2:	70eb      	strb	r3, [r5, #3]
		pdata->clk_gating__ctrl & 0xF;
 8003dd4:	7923      	ldrb	r3, [r4, #4]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 8003dda:	712b      	strb	r3, [r5, #4]
		pdata->nvm_bist__ctrl & 0x1F;
 8003ddc:	7963      	ldrb	r3, [r4, #5]
 8003dde:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +   5) =
 8003de2:	716b      	strb	r3, [r5, #5]
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8003de4:	79a3      	ldrb	r3, [r4, #6]
 8003de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 8003dea:	71ab      	strb	r3, [r5, #6]
		pdata->nvm_bist__start_address & 0x7F;
 8003dec:	79e3      	ldrb	r3, [r4, #7]
 8003dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   7) =
 8003df2:	71eb      	strb	r3, [r5, #7]
		pdata->host_if__status & 0x1;
 8003df4:	7a23      	ldrb	r3, [r4, #8]
 8003df6:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   8) =
 8003dfa:	722b      	strb	r3, [r5, #8]
		pdata->pad_i2c_hv__config;
 8003dfc:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   9) =
 8003dfe:	726b      	strb	r3, [r5, #9]
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8003e00:	7aa3      	ldrb	r3, [r4, #10]
 8003e02:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  10) =
 8003e06:	72ab      	strb	r3, [r5, #10]
		pdata->gpio_hv_pad__ctrl & 0x3;
 8003e08:	7ae3      	ldrb	r3, [r4, #11]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 8003e0e:	72eb      	strb	r3, [r5, #11]
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8003e10:	7b23      	ldrb	r3, [r4, #12]
 8003e12:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  12) =
 8003e16:	732b      	strb	r3, [r5, #12]
		pdata->gpio__tio_hv_status & 0x3;
 8003e18:	7b63      	ldrb	r3, [r4, #13]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  13) =
 8003e1e:	736b      	strb	r3, [r5, #13]
		pdata->gpio__fio_hv_status & 0x3;
 8003e20:	7ba3      	ldrb	r3, [r4, #14]
 8003e22:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  14) =
 8003e26:	73ab      	strb	r3, [r5, #14]
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8003e28:	7be3      	ldrb	r3, [r4, #15]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  15) =
 8003e2e:	73eb      	strb	r3, [r5, #15]
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8003e30:	7c23      	ldrb	r3, [r4, #16]
 8003e32:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  16) =
 8003e36:	742b      	strb	r3, [r5, #16]
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8003e38:	7c63      	ldrb	r3, [r4, #17]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  17) =
 8003e3e:	746b      	strb	r3, [r5, #17]
		pdata->sigma_estimator__effective_pulse_width_ns;
 8003e40:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer +  18) =
 8003e42:	74ab      	strb	r3, [r5, #18]
		pdata->sigma_estimator__effective_ambient_width_ns;
 8003e44:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer +  19) =
 8003e46:	74eb      	strb	r3, [r5, #19]
		pdata->sigma_estimator__sigma_ref_mm;
 8003e48:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer +  20) =
 8003e4a:	752b      	strb	r3, [r5, #20]
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8003e4c:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer +  21) =
 8003e4e:	756b      	strb	r3, [r5, #21]
		pdata->spare_host_config__static_config_spare_0;
 8003e50:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer +  22) =
 8003e52:	75ab      	strb	r3, [r5, #22]
		pdata->spare_host_config__static_config_spare_1;
 8003e54:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer +  23) =
 8003e56:	75eb      	strb	r3, [r5, #23]
	VL53L1_i2c_encode_uint16_t(
 8003e58:	8b20      	ldrh	r0, [r4, #24]
 8003e5a:	f7ff fcd7 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
		pdata->algo__range_ignore_valid_height_mm;
 8003e5e:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer +  31) =
		pdata->sd_config__reset_stages_lsb;
	LOG_FUNCTION_END(status);


	return status;
 8003e60:	2000      	movs	r0, #0
	*(pbuffer +  26) =
 8003e62:	76ab      	strb	r3, [r5, #26]
		pdata->algo__range_min_clip;
 8003e64:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer +  27) =
 8003e66:	76eb      	strb	r3, [r5, #27]
		pdata->algo__consistency_check__tolerance & 0xF;
 8003e68:	7f23      	ldrb	r3, [r4, #28]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  28) =
 8003e6e:	772b      	strb	r3, [r5, #28]
		pdata->spare_host_config__static_config_spare_2;
 8003e70:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer +  29) =
 8003e72:	776b      	strb	r3, [r5, #29]
		pdata->sd_config__reset_stages_msb & 0xF;
 8003e74:	7fa3      	ldrb	r3, [r4, #30]
 8003e76:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  30) =
 8003e7a:	77ab      	strb	r3, [r5, #30]
		pdata->sd_config__reset_stages_lsb;
 8003e7c:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer +  31) =
 8003e7e:	77eb      	strb	r3, [r5, #31]
	return status;
 8003e80:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003e82:	f06f 0009 	mvn.w	r0, #9
}
 8003e86:	bd38      	pop	{r3, r4, r5, pc}

08003e88 <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003e88:	2915      	cmp	r1, #21
{
 8003e8a:	b538      	push	{r3, r4, r5, lr}
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	4614      	mov	r4, r2
	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003e90:	d940      	bls.n	8003f14 <VL53L1_i2c_encode_general_config+0x8c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8003e92:	7803      	ldrb	r3, [r0, #0]
		pdata->global_config__stream_divider;
	*(pbuffer +   2) =
		pdata->system__interrupt_config_gpio;
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
	VL53L1_i2c_encode_uint16_t(
 8003e94:	3204      	adds	r2, #4
	*(pbuffer +   0) =
 8003e96:	f802 3c04 	strb.w	r3, [r2, #-4]
		pdata->global_config__stream_divider;
 8003e9a:	7843      	ldrb	r3, [r0, #1]
	VL53L1_i2c_encode_uint16_t(
 8003e9c:	2102      	movs	r1, #2
	*(pbuffer +   1) =
 8003e9e:	f802 3c03 	strb.w	r3, [r2, #-3]
		pdata->system__interrupt_config_gpio;
 8003ea2:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 8003ea4:	f802 3c02 	strb.w	r3, [r2, #-2]
		pdata->cal_config__vcsel_start & 0x7F;
 8003ea8:	78c3      	ldrb	r3, [r0, #3]
 8003eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   3) =
 8003eae:	f802 3c01 	strb.w	r3, [r2, #-1]
	VL53L1_i2c_encode_uint16_t(
 8003eb2:	8880      	ldrh	r0, [r0, #4]
 8003eb4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003eb8:	f7ff fca8 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8003ebc:	79ab      	ldrb	r3, [r5, #6]
		pdata->phasecal_config__target;
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
	VL53L1_i2c_encode_uint16_t(
 8003ebe:	f104 020c 	add.w	r2, r4, #12
		pdata->global_config__vcsel_width & 0x7F;
 8003ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 8003ec6:	71a3      	strb	r3, [r4, #6]
		pdata->phasecal_config__timeout_macrop;
 8003ec8:	79eb      	ldrb	r3, [r5, #7]
	VL53L1_i2c_encode_uint16_t(
 8003eca:	2102      	movs	r1, #2
	*(pbuffer +   7) =
 8003ecc:	71e3      	strb	r3, [r4, #7]
		pdata->phasecal_config__target;
 8003ece:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   8) =
 8003ed0:	7223      	strb	r3, [r4, #8]
		pdata->phasecal_config__override & 0x1;
 8003ed2:	7a6b      	ldrb	r3, [r5, #9]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   9) =
 8003ed8:	7263      	strb	r3, [r4, #9]
		pdata->dss_config__roi_mode_control & 0x7;
 8003eda:	7aab      	ldrb	r3, [r5, #10]
 8003edc:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  11) =
 8003ee0:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 8003ee2:	89a8      	ldrh	r0, [r5, #12]
 8003ee4:	f7ff fc92 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8003ee8:	f104 020e 	add.w	r2, r4, #14
 8003eec:	89e8      	ldrh	r0, [r5, #14]
 8003eee:	2102      	movs	r1, #2
 8003ef0:	f7ff fc8c 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8003ef4:	8a28      	ldrh	r0, [r5, #16]
 8003ef6:	f104 0210 	add.w	r2, r4, #16
 8003efa:	2102      	movs	r1, #2
 8003efc:	f7ff fc86 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
		pdata->dss_config__manual_block_select;
 8003f00:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  21) =
		pdata->dss_config__min_spads_limit;
	LOG_FUNCTION_END(status);


	return status;
 8003f02:	2000      	movs	r0, #0
	*(pbuffer +  18) =
 8003f04:	74a3      	strb	r3, [r4, #18]
		pdata->dss_config__aperture_attenuation;
 8003f06:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 8003f08:	74e3      	strb	r3, [r4, #19]
		pdata->dss_config__max_spads_limit;
 8003f0a:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 8003f0c:	7523      	strb	r3, [r4, #20]
		pdata->dss_config__min_spads_limit;
 8003f0e:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 8003f10:	7563      	strb	r3, [r4, #21]
	return status;
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003f14:	f06f 0009 	mvn.w	r0, #9
}
 8003f18:	bd38      	pop	{r3, r4, r5, pc}

08003f1a <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003f1a:	2916      	cmp	r1, #22
{
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4605      	mov	r5, r0
 8003f20:	4614      	mov	r4, r2
	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003f22:	d944      	bls.n	8003fae <VL53L1_i2c_encode_timing_config+0x94>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8003f24:	7803      	ldrb	r3, [r0, #0]
		pdata->range_config__timeout_macrop_b_hi & 0xF;
	*(pbuffer +   8) =
		pdata->range_config__timeout_macrop_b_lo;
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
	VL53L1_i2c_encode_uint16_t(
 8003f26:	320a      	adds	r2, #10
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8003f28:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   0) =
 8003f2c:	f802 3c0a 	strb.w	r3, [r2, #-10]
		pdata->mm_config__timeout_macrop_a_lo;
 8003f30:	7843      	ldrb	r3, [r0, #1]
	VL53L1_i2c_encode_uint16_t(
 8003f32:	2102      	movs	r1, #2
	*(pbuffer +   1) =
 8003f34:	f802 3c09 	strb.w	r3, [r2, #-9]
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8003f38:	7883      	ldrb	r3, [r0, #2]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   2) =
 8003f3e:	f802 3c08 	strb.w	r3, [r2, #-8]
		pdata->mm_config__timeout_macrop_b_lo;
 8003f42:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 8003f44:	f802 3c07 	strb.w	r3, [r2, #-7]
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8003f48:	7903      	ldrb	r3, [r0, #4]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 8003f4e:	f802 3c06 	strb.w	r3, [r2, #-6]
		pdata->range_config__timeout_macrop_a_lo;
 8003f52:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer +   5) =
 8003f54:	f802 3c05 	strb.w	r3, [r2, #-5]
		pdata->range_config__vcsel_period_a & 0x3F;
 8003f58:	7983      	ldrb	r3, [r0, #6]
 8003f5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   6) =
 8003f5e:	f802 3c04 	strb.w	r3, [r2, #-4]
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8003f62:	79c3      	ldrb	r3, [r0, #7]
 8003f64:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   7) =
 8003f68:	f802 3c03 	strb.w	r3, [r2, #-3]
		pdata->range_config__timeout_macrop_b_lo;
 8003f6c:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer +   8) =
 8003f6e:	f802 3c02 	strb.w	r3, [r2, #-2]
		pdata->range_config__vcsel_period_b & 0x3F;
 8003f72:	7a43      	ldrb	r3, [r0, #9]
 8003f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 8003f78:	f802 3c01 	strb.w	r3, [r2, #-1]
	VL53L1_i2c_encode_uint16_t(
 8003f7c:	8940      	ldrh	r0, [r0, #10]
 8003f7e:	f7ff fc45 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8003f82:	f104 020c 	add.w	r2, r4, #12
 8003f86:	89a8      	ldrh	r0, [r5, #12]
 8003f88:	2102      	movs	r1, #2
 8003f8a:	f7ff fc3f 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
		pdata->range_config__valid_phase_low;
 8003f8e:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->range_config__valid_phase_high;
	VL53L1_i2c_encode_uint32_t(
 8003f90:	f104 0212 	add.w	r2, r4, #18
	*(pbuffer +  14) =
 8003f94:	73a3      	strb	r3, [r4, #14]
		pdata->range_config__valid_phase_high;
 8003f96:	7beb      	ldrb	r3, [r5, #15]
	VL53L1_i2c_encode_uint32_t(
 8003f98:	2104      	movs	r1, #4
	*(pbuffer +  15) =
 8003f9a:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 8003f9c:	6928      	ldr	r0, [r5, #16]
 8003f9e:	f7ff fc5e 	bl	800385e <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8003fa2:	7d2b      	ldrb	r3, [r5, #20]
	LOG_FUNCTION_END(status);


	return status;
 8003fa4:	2000      	movs	r0, #0
		pdata->system__fractional_enable & 0x1;
 8003fa6:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  22) =
 8003faa:	75a3      	strb	r3, [r4, #22]
	return status;
 8003fac:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003fae:	f06f 0009 	mvn.w	r0, #9
}
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}

08003fb4 <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003fb4:	2911      	cmp	r1, #17
{
 8003fb6:	b538      	push	{r3, r4, r5, lr}
 8003fb8:	4604      	mov	r4, r0
 8003fba:	4615      	mov	r5, r2
	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003fbc:	d939      	bls.n	8004032 <VL53L1_i2c_encode_dynamic_config+0x7e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8003fbe:	7803      	ldrb	r3, [r0, #0]
	VL53L1_i2c_encode_uint16_t(
 8003fc0:	2102      	movs	r1, #2
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8003fc2:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   0) =
 8003fc6:	f802 3b01 	strb.w	r3, [r2], #1
	VL53L1_i2c_encode_uint16_t(
 8003fca:	8840      	ldrh	r0, [r0, #2]
 8003fcc:	f7ff fc1e 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8003fd0:	88a0      	ldrh	r0, [r4, #4]
 8003fd2:	1cea      	adds	r2, r5, #3
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	f7ff fc19 	bl	800380c <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8003fda:	79a3      	ldrb	r3, [r4, #6]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
	LOG_FUNCTION_END(status);


	return status;
 8003fdc:	2000      	movs	r0, #0
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8003fde:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   5) =
 8003fe2:	716b      	strb	r3, [r5, #5]
		pdata->system__seed_config & 0x7;
 8003fe4:	79e3      	ldrb	r3, [r4, #7]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +   6) =
 8003fea:	71ab      	strb	r3, [r5, #6]
		pdata->sd_config__woi_sd0;
 8003fec:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer +   7) =
 8003fee:	71eb      	strb	r3, [r5, #7]
		pdata->sd_config__woi_sd1;
 8003ff0:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   8) =
 8003ff2:	722b      	strb	r3, [r5, #8]
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8003ff4:	7aa3      	ldrb	r3, [r4, #10]
 8003ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   9) =
 8003ffa:	726b      	strb	r3, [r5, #9]
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8003ffc:	7ae3      	ldrb	r3, [r4, #11]
 8003ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +  10) =
 8004002:	72ab      	strb	r3, [r5, #10]
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8004004:	7b23      	ldrb	r3, [r4, #12]
 8004006:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800400a:	72eb      	strb	r3, [r5, #11]
		pdata->sd_config__first_order_select & 0x3;
 800400c:	7b63      	ldrb	r3, [r4, #13]
 800400e:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  12) =
 8004012:	732b      	strb	r3, [r5, #12]
		pdata->sd_config__quantifier & 0xF;
 8004014:	7ba3      	ldrb	r3, [r4, #14]
 8004016:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  13) =
 800401a:	736b      	strb	r3, [r5, #13]
		pdata->roi_config__user_roi_centre_spad;
 800401c:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer +  14) =
 800401e:	73ab      	strb	r3, [r5, #14]
		pdata->roi_config__user_roi_requested_global_xy_size;
 8004020:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer +  15) =
 8004022:	73eb      	strb	r3, [r5, #15]
		pdata->system__sequence_config;
 8004024:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer +  16) =
 8004026:	742b      	strb	r3, [r5, #16]
		pdata->system__grouped_parameter_hold & 0x3;
 8004028:	7ca3      	ldrb	r3, [r4, #18]
 800402a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  17) =
 800402e:	746b      	strb	r3, [r5, #17]
	return status;
 8004030:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8004032:	f06f 0009 	mvn.w	r0, #9
}
 8004036:	bd38      	pop	{r3, r4, r5, pc}

08004038 <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8004038:	2904      	cmp	r1, #4
 800403a:	d913      	bls.n	8004064 <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800403c:	7803      	ldrb	r3, [r0, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   0) =
 8004042:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8004044:	7843      	ldrb	r3, [r0, #1]
 8004046:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   1) =
 800404a:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800404c:	7883      	ldrb	r3, [r0, #2]
 800404e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 8004052:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8004054:	78c3      	ldrb	r3, [r0, #3]
 8004056:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800405a:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->system__mode_start;
 800405c:	7903      	ldrb	r3, [r0, #4]
	LOG_FUNCTION_END(status);


	return status;
 800405e:	2000      	movs	r0, #0
	*(pbuffer +   4) =
 8004060:	7113      	strb	r3, [r2, #4]
	return status;
 8004062:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8004064:	f06f 0009 	mvn.w	r0, #9
}
 8004068:	4770      	bx	lr

0800406a <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800406a:	b513      	push	{r0, r1, r4, lr}
 800406c:	4604      	mov	r4, r0
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_i2c_encode_system_control(
 800406e:	466a      	mov	r2, sp
{
 8004070:	4608      	mov	r0, r1
		status = VL53L1_i2c_encode_system_control(
 8004072:	2105      	movs	r1, #5
 8004074:	f7ff ffe0 	bl	8004038 <VL53L1_i2c_encode_system_control>
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8004078:	b928      	cbnz	r0, 8004086 <VL53L1_set_system_control+0x1c>
		status = VL53L1_WriteMulti(
 800407a:	2305      	movs	r3, #5
 800407c:	466a      	mov	r2, sp
 800407e:	2183      	movs	r1, #131	; 0x83
 8004080:	4620      	mov	r0, r4
 8004082:	f000 faa7 	bl	80045d4 <VL53L1_WriteMulti>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 8004086:	b002      	add	sp, #8
 8004088:	bd10      	pop	{r4, pc}

0800408a <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800408a:	282b      	cmp	r0, #43	; 0x2b
{
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	460d      	mov	r5, r1
 8004090:	4614      	mov	r4, r2
	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8004092:	f240 8088 	bls.w	80041a6 <VL53L1_i2c_decode_system_results+0x11c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8004096:	780b      	ldrb	r3, [r1, #0]
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
	pdata->result__stream_count =
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8004098:	2002      	movs	r0, #2
		(*(pbuffer +   0)) & 0x3F;
 800409a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 800409e:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 80040a0:	784b      	ldrb	r3, [r1, #1]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 80040a2:	3104      	adds	r1, #4
	pdata->result__range_status =
 80040a4:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   2)) & 0xF;
 80040a6:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80040aa:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 80040ae:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 80040b0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80040b4:	70d3      	strb	r3, [r2, #3]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 80040b6:	f7ff fbb1 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 80040ba:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 80040bc:	80a0      	strh	r0, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 80040be:	2002      	movs	r0, #2
 80040c0:	f7ff fbac 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 80040c4:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80040c8:	80e0      	strh	r0, [r4, #6]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 80040ca:	2002      	movs	r0, #2
 80040cc:	f7ff fba6 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 80040d0:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 80040d4:	8120      	strh	r0, [r4, #8]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 80040d6:	2002      	movs	r0, #2
 80040d8:	f7ff fba0 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 80040dc:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 80040e0:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 80040e2:	2002      	movs	r0, #2
 80040e4:	f7ff fb9a 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 80040e8:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 80040ec:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 80040ee:	2002      	movs	r0, #2
 80040f0:	f7ff fb94 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 80040f4:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 80040f8:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 80040fa:	2002      	movs	r0, #2
 80040fc:	f7ff fb8e 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8004100:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8004104:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8004106:	2002      	movs	r0, #2
 8004108:	f7ff fb88 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800410c:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8004110:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8004112:	2002      	movs	r0, #2
 8004114:	f7ff fb82 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8004118:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800411c:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800411e:	2002      	movs	r0, #2
 8004120:	f7ff fb7c 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8004124:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8004128:	82e0      	strh	r0, [r4, #22]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800412a:	2002      	movs	r0, #2
 800412c:	f7ff fb76 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8004130:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 8004134:	8320      	strh	r0, [r4, #24]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8004136:	2002      	movs	r0, #2
 8004138:	f7ff fb70 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800413c:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8004140:	8360      	strh	r0, [r4, #26]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8004142:	2002      	movs	r0, #2
 8004144:	f7ff fb6a 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8004148:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 800414c:	83a0      	strh	r0, [r4, #28]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800414e:	2002      	movs	r0, #2
 8004150:	f7ff fb64 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8004154:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 8004158:	83e0      	strh	r0, [r4, #30]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800415a:	2002      	movs	r0, #2
 800415c:	f7ff fb5e 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8004160:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 8004164:	8420      	strh	r0, [r4, #32]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8004166:	2002      	movs	r0, #2
 8004168:	f7ff fb58 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800416c:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8004170:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8004172:	2002      	movs	r0, #2
 8004174:	f7ff fb52 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8004178:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 800417c:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800417e:	2002      	movs	r0, #2
 8004180:	f7ff fb4c 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8004184:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 8004188:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800418a:	2002      	movs	r0, #2
 800418c:	f7ff fb46 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 8004190:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8004192:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
	pdata->result__thresh_info =
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8004196:	2000      	movs	r0, #0
	pdata->result__spare_3_sd1 =
 8004198:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->result__thresh_info =
 800419c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80041a0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	return status;
 80041a4:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80041a6:	f06f 0009 	mvn.w	r0, #9
}
 80041aa:	bd38      	pop	{r3, r4, r5, pc}

080041ac <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 80041ac:	2820      	cmp	r0, #32
{
 80041ae:	b538      	push	{r3, r4, r5, lr}
 80041b0:	460d      	mov	r5, r1
 80041b2:	4614      	mov	r4, r2
	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 80041b4:	d932      	bls.n	800421c <VL53L1_i2c_decode_core_results+0x70>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80041b6:	2004      	movs	r0, #4
 80041b8:	f7ff fb59 	bl	800386e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80041bc:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 80041be:	6020      	str	r0, [r4, #0]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80041c0:	2004      	movs	r0, #4
 80041c2:	f7ff fb54 	bl	800386e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80041c6:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 80041ca:	6060      	str	r0, [r4, #4]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80041cc:	2004      	movs	r0, #4
 80041ce:	f7ff fb58 	bl	8003882 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 80041d2:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 80041d6:	60a0      	str	r0, [r4, #8]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 80041d8:	2004      	movs	r0, #4
 80041da:	f7ff fb48 	bl	800386e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 80041de:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 80041e2:	60e0      	str	r0, [r4, #12]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 80041e4:	2004      	movs	r0, #4
 80041e6:	f7ff fb42 	bl	800386e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 80041ea:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 80041ee:	6120      	str	r0, [r4, #16]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 80041f0:	2004      	movs	r0, #4
 80041f2:	f7ff fb3c 	bl	800386e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 80041f6:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 80041fa:	6160      	str	r0, [r4, #20]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 80041fc:	2004      	movs	r0, #4
 80041fe:	f7ff fb40 	bl	8003882 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8004202:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 8004206:	61a0      	str	r0, [r4, #24]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8004208:	2004      	movs	r0, #4
 800420a:	f7ff fb30 	bl	800386e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 800420e:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 8004210:	f895 3020 	ldrb.w	r3, [r5, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8004214:	2000      	movs	r0, #0
	pdata->result_core__spare_0 =
 8004216:	f884 3020 	strb.w	r3, [r4, #32]
	return status;
 800421a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800421c:	f06f 0009 	mvn.w	r0, #9
}
 8004220:	bd38      	pop	{r3, r4, r5, pc}

08004222 <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8004222:	2837      	cmp	r0, #55	; 0x37
{
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	460d      	mov	r5, r1
 8004228:	4614      	mov	r4, r2
	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800422a:	f240 80d0 	bls.w	80043ce <VL53L1_i2c_decode_debug_results+0x1ac>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800422e:	2002      	movs	r0, #2
 8004230:	f7ff faf4 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 8004234:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8004236:	78ab      	ldrb	r3, [r5, #2]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8004238:	f105 0108 	add.w	r1, r5, #8
		(*(pbuffer +   2)) & 0x7F;
 800423c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 8004240:	70a3      	strb	r3, [r4, #2]
		(*(pbuffer +   3)) & 0x3F;
 8004242:	78eb      	ldrb	r3, [r5, #3]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8004244:	2002      	movs	r0, #2
		(*(pbuffer +   3)) & 0x3F;
 8004246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800424a:	70e3      	strb	r3, [r4, #3]
		(*(pbuffer +   4)) & 0x3;
 800424c:	792b      	ldrb	r3, [r5, #4]
 800424e:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 8004252:	7123      	strb	r3, [r4, #4]
		(*(pbuffer +   5)) & 0x1;
 8004254:	796b      	ldrb	r3, [r5, #5]
 8004256:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 800425a:	7163      	strb	r3, [r4, #5]
		(*(pbuffer +   6)) & 0x3F;
 800425c:	79ab      	ldrb	r3, [r5, #6]
 800425e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 8004262:	71a3      	strb	r3, [r4, #6]
		(*(pbuffer +   7)) & 0x3F;
 8004264:	79eb      	ldrb	r3, [r5, #7]
 8004266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 800426a:	71e3      	strb	r3, [r4, #7]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800426c:	f7ff fad6 	bl	800381c <VL53L1_i2c_decode_uint16_t>
 8004270:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 8004274:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8004276:	7aab      	ldrb	r3, [r5, #10]
	pdata->firmware__mode_status =
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8004278:	f105 0112 	add.w	r1, r5, #18
		(*(pbuffer +  10)) & 0x3;
 800427c:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 8004280:	72a3      	strb	r3, [r4, #10]
		(*(pbuffer +  11)) & 0x3;
 8004282:	7aeb      	ldrb	r3, [r5, #11]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8004284:	2002      	movs	r0, #2
		(*(pbuffer +  11)) & 0x3;
 8004286:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 800428a:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer +  12)) & 0xF;
 800428c:	7b2b      	ldrb	r3, [r5, #12]
 800428e:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 8004292:	7323      	strb	r3, [r4, #12]
		(*(pbuffer +  13)) & 0x7;
 8004294:	7b6b      	ldrb	r3, [r5, #13]
 8004296:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 800429a:	7363      	strb	r3, [r4, #13]
		(*(pbuffer +  14)) & 0x1;
 800429c:	7bab      	ldrb	r3, [r5, #14]
 800429e:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 80042a2:	73a3      	strb	r3, [r4, #14]
		(*(pbuffer +  15)) & 0x3;
 80042a4:	7beb      	ldrb	r3, [r5, #15]
 80042a6:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 80042aa:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 80042ac:	7c2b      	ldrb	r3, [r5, #16]
 80042ae:	7423      	strb	r3, [r4, #16]
	pdata->firmware__secondary_mode_status =
 80042b0:	7c6b      	ldrb	r3, [r5, #17]
 80042b2:	7463      	strb	r3, [r4, #17]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80042b4:	f7ff fab2 	bl	800381c <VL53L1_i2c_decode_uint16_t>
 80042b8:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 80042bc:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80042be:	f105 0116 	add.w	r1, r5, #22
 80042c2:	2002      	movs	r0, #2
 80042c4:	f7ff faaa 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80042c8:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 80042cc:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80042ce:	2002      	movs	r0, #2
 80042d0:	f7ff faa4 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 80042d4:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80042d6:	7eab      	ldrb	r3, [r5, #26]
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80042d8:	f105 012e 	add.w	r1, r5, #46	; 0x2e
		(*(pbuffer +  26)) & 0x1;
 80042dc:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 80042e0:	7623      	strb	r3, [r4, #24]
		(*(pbuffer +  27)) & 0x7;
 80042e2:	7eeb      	ldrb	r3, [r5, #27]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80042e4:	2004      	movs	r0, #4
		(*(pbuffer +  27)) & 0x7;
 80042e6:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 80042ea:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 80042ec:	7f2b      	ldrb	r3, [r5, #28]
 80042ee:	76a3      	strb	r3, [r4, #26]
	pdata->gph__sd_config__woi_sd1 =
 80042f0:	7f6b      	ldrb	r3, [r5, #29]
 80042f2:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  30)) & 0x7F;
 80042f4:	7fab      	ldrb	r3, [r5, #30]
 80042f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 80042fa:	7723      	strb	r3, [r4, #28]
		(*(pbuffer +  31)) & 0x7F;
 80042fc:	7feb      	ldrb	r3, [r5, #31]
 80042fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 8004302:	7763      	strb	r3, [r4, #29]
		(*(pbuffer +  32)) & 0x3;
 8004304:	f895 3020 	ldrb.w	r3, [r5, #32]
 8004308:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 800430c:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer +  33)) & 0xF;
 800430e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8004312:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 8004316:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8004318:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800431c:	f884 3020 	strb.w	r3, [r4, #32]
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8004320:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8004324:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	pdata->gph__system__sequence_config =
 8004328:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800432c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  37)) & 0x1;
 8004330:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8004334:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 8004338:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		(*(pbuffer +  38)) & 0x3;
 800433c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8004340:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 8004344:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		(*(pbuffer +  39)) & 0x1F;
 8004348:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800434c:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 8004350:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		(*(pbuffer +  40)) & 0x1F;
 8004354:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004358:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 800435c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		(*(pbuffer +  41)) & 0x1F;
 8004360:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8004364:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 8004368:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		(*(pbuffer +  42)) & 0x1;
 800436c:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8004370:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 8004374:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		(*(pbuffer +  43)) & 0x1;
 8004378:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800437c:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 8004380:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		(*(pbuffer +  44)) & 0x3;
 8004384:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8004388:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 800438c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  45)) & 0x3F;
 8004390:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8004394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 8004398:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800439c:	f7ff fa67 	bl	800386e <VL53L1_i2c_decode_uint32_t>
 80043a0:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 80043a4:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80043a6:	f105 0132 	add.w	r1, r5, #50	; 0x32
 80043aa:	2004      	movs	r0, #4
 80043ac:	f7ff fa5f 	bl	800386e <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 80043b0:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80043b2:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;

	LOG_FUNCTION_END(status);

	return status;
 80043b6:	2000      	movs	r0, #0
		(*(pbuffer +  54)) & 0x1;
 80043b8:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 80043bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		(*(pbuffer +  55)) & 0x1;
 80043c0:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 80043c4:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 80043c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return status;
 80043cc:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80043ce:	f06f 0009 	mvn.w	r0, #9
}
 80043d2:	bd38      	pop	{r3, r4, r5, pc}

080043d4 <VL53L1_i2c_decode_nvm_copy_data>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80043d4:	2830      	cmp	r0, #48	; 0x30
{
 80043d6:	b538      	push	{r3, r4, r5, lr}
 80043d8:	460d      	mov	r5, r1
 80043da:	4614      	mov	r4, r2
	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80043dc:	f240 809d 	bls.w	800451a <VL53L1_i2c_decode_nvm_copy_data+0x146>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80043e0:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__module_type =
		(*(pbuffer +   1));
	pdata->identification__revision_id =
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 80043e2:	2002      	movs	r0, #2
	pdata->identification__model_id =
 80043e4:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 80043e6:	784b      	ldrb	r3, [r1, #1]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 80043e8:	3103      	adds	r1, #3
	pdata->identification__module_type =
 80043ea:	7053      	strb	r3, [r2, #1]
	pdata->identification__revision_id =
 80043ec:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80043f0:	7093      	strb	r3, [r2, #2]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 80043f2:	f7ff fa13 	bl	800381c <VL53L1_i2c_decode_uint16_t>
	pdata->identification__module_id =
 80043f6:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80043f8:	796b      	ldrb	r3, [r5, #5]
	pdata->roi_config__mode_roi_xy_size =
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80043fa:	2000      	movs	r0, #0
		(*(pbuffer +   5)) & 0x7F;
 80043fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim_max =
 8004400:	71a3      	strb	r3, [r4, #6]
		(*(pbuffer +   6)) & 0x7;
 8004402:	79ab      	ldrb	r3, [r5, #6]
 8004404:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 8004408:	71e3      	strb	r3, [r4, #7]
		(*(pbuffer +   7)) & 0x7;
 800440a:	79eb      	ldrb	r3, [r5, #7]
 800440c:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 8004410:	7223      	strb	r3, [r4, #8]
		(*(pbuffer +   8)) & 0x3F;
 8004412:	7a2b      	ldrb	r3, [r5, #8]
 8004414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion =
 8004418:	7263      	strb	r3, [r4, #9]
		(*(pbuffer +   9)) & 0x3F;
 800441a:	7a6b      	ldrb	r3, [r5, #9]
 800441c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion_max =
 8004420:	72a3      	strb	r3, [r4, #10]
		(*(pbuffer +  10)) & 0x1;
 8004422:	7aab      	ldrb	r3, [r5, #10]
 8004424:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 8004428:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer +  11)) & 0x7F;
 800442a:	7aeb      	ldrb	r3, [r5, #11]
 800442c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->laser_safety__key =
 8004430:	7323      	strb	r3, [r4, #12]
		(*(pbuffer +  12)) & 0x1;
 8004432:	7b2b      	ldrb	r3, [r5, #12]
 8004434:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 8004438:	7363      	strb	r3, [r4, #13]
		(*(pbuffer +  13)) & 0x3F;
 800443a:	7b6b      	ldrb	r3, [r5, #13]
 800443c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__clip =
 8004440:	73a3      	strb	r3, [r4, #14]
		(*(pbuffer +  14)) & 0x3F;
 8004442:	7bab      	ldrb	r3, [r5, #14]
 8004444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__mult =
 8004448:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800444a:	7beb      	ldrb	r3, [r5, #15]
 800444c:	7423      	strb	r3, [r4, #16]
	pdata->global_config__spad_enables_rtn_1 =
 800444e:	7c2b      	ldrb	r3, [r5, #16]
 8004450:	7463      	strb	r3, [r4, #17]
	pdata->global_config__spad_enables_rtn_2 =
 8004452:	7c6b      	ldrb	r3, [r5, #17]
 8004454:	74a3      	strb	r3, [r4, #18]
	pdata->global_config__spad_enables_rtn_3 =
 8004456:	7cab      	ldrb	r3, [r5, #18]
 8004458:	74e3      	strb	r3, [r4, #19]
	pdata->global_config__spad_enables_rtn_4 =
 800445a:	7ceb      	ldrb	r3, [r5, #19]
 800445c:	7523      	strb	r3, [r4, #20]
	pdata->global_config__spad_enables_rtn_5 =
 800445e:	7d2b      	ldrb	r3, [r5, #20]
 8004460:	7563      	strb	r3, [r4, #21]
	pdata->global_config__spad_enables_rtn_6 =
 8004462:	7d6b      	ldrb	r3, [r5, #21]
 8004464:	75a3      	strb	r3, [r4, #22]
	pdata->global_config__spad_enables_rtn_7 =
 8004466:	7dab      	ldrb	r3, [r5, #22]
 8004468:	75e3      	strb	r3, [r4, #23]
	pdata->global_config__spad_enables_rtn_8 =
 800446a:	7deb      	ldrb	r3, [r5, #23]
 800446c:	7623      	strb	r3, [r4, #24]
	pdata->global_config__spad_enables_rtn_9 =
 800446e:	7e2b      	ldrb	r3, [r5, #24]
 8004470:	7663      	strb	r3, [r4, #25]
	pdata->global_config__spad_enables_rtn_10 =
 8004472:	7e6b      	ldrb	r3, [r5, #25]
 8004474:	76a3      	strb	r3, [r4, #26]
	pdata->global_config__spad_enables_rtn_11 =
 8004476:	7eab      	ldrb	r3, [r5, #26]
 8004478:	76e3      	strb	r3, [r4, #27]
	pdata->global_config__spad_enables_rtn_12 =
 800447a:	7eeb      	ldrb	r3, [r5, #27]
 800447c:	7723      	strb	r3, [r4, #28]
	pdata->global_config__spad_enables_rtn_13 =
 800447e:	7f2b      	ldrb	r3, [r5, #28]
 8004480:	7763      	strb	r3, [r4, #29]
	pdata->global_config__spad_enables_rtn_14 =
 8004482:	7f6b      	ldrb	r3, [r5, #29]
 8004484:	77a3      	strb	r3, [r4, #30]
	pdata->global_config__spad_enables_rtn_15 =
 8004486:	7fab      	ldrb	r3, [r5, #30]
 8004488:	77e3      	strb	r3, [r4, #31]
	pdata->global_config__spad_enables_rtn_16 =
 800448a:	7feb      	ldrb	r3, [r5, #31]
 800448c:	f884 3020 	strb.w	r3, [r4, #32]
	pdata->global_config__spad_enables_rtn_17 =
 8004490:	f895 3020 	ldrb.w	r3, [r5, #32]
 8004494:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	pdata->global_config__spad_enables_rtn_18 =
 8004498:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800449c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	pdata->global_config__spad_enables_rtn_19 =
 80044a0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80044a4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->global_config__spad_enables_rtn_20 =
 80044a8:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80044ac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->global_config__spad_enables_rtn_21 =
 80044b0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80044b4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->global_config__spad_enables_rtn_22 =
 80044b8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80044bc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->global_config__spad_enables_rtn_23 =
 80044c0:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 80044c4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->global_config__spad_enables_rtn_24 =
 80044c8:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 80044cc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->global_config__spad_enables_rtn_25 =
 80044d0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80044d4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->global_config__spad_enables_rtn_26 =
 80044d8:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80044dc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->global_config__spad_enables_rtn_27 =
 80044e0:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 80044e4:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->global_config__spad_enables_rtn_28 =
 80044e8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80044ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	pdata->global_config__spad_enables_rtn_29 =
 80044f0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80044f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pdata->global_config__spad_enables_rtn_30 =
 80044f8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80044fc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	pdata->global_config__spad_enables_rtn_31 =
 8004500:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 8004504:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	pdata->roi_config__mode_roi_centre_spad =
 8004508:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800450c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	pdata->roi_config__mode_roi_xy_size =
 8004510:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8004514:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	return status;
 8004518:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800451a:	f06f 0009 	mvn.w	r0, #9
}
 800451e:	bd38      	pop	{r3, r4, r5, pc}

08004520 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8004520:	b510      	push	{r4, lr}
 8004522:	b08e      	sub	sp, #56	; 0x38
 8004524:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8004526:	2331      	movs	r3, #49	; 0x31
 8004528:	aa01      	add	r2, sp, #4
 800452a:	f240 110f 	movw	r1, #271	; 0x10f
 800452e:	f000 f871 	bl	8004614 <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8004532:	b920      	cbnz	r0, 800453e <VL53L1_get_nvm_copy_data+0x1e>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8004534:	4622      	mov	r2, r4
 8004536:	a901      	add	r1, sp, #4
 8004538:	2031      	movs	r0, #49	; 0x31
 800453a:	f7ff ff4b 	bl	80043d4 <VL53L1_i2c_decode_nvm_copy_data>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800453e:	b00e      	add	sp, #56	; 0x38
 8004540:	bd10      	pop	{r4, pc}

08004542 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8004542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004544:	460e      	mov	r6, r1
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8004546:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 800454a:	4605      	mov	r5, r0
	status = VL53L1_WaitUs(
 800454c:	f000 f8b0 	bl	80046b0 <VL53L1_WaitUs>
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8004550:	4604      	mov	r4, r0
 8004552:	b968      	cbnz	r0, 8004570 <VL53L1_poll_for_boot_completion+0x2e>
		status =
 8004554:	2301      	movs	r3, #1
 8004556:	22e5      	movs	r2, #229	; 0xe5
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	4631      	mov	r1, r6
 800455e:	4628      	mov	r0, r5
 8004560:	f000 f8b0 	bl	80046c4 <VL53L1_WaitValueMaskEx>
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8004564:	4604      	mov	r4, r0
 8004566:	b918      	cbnz	r0, 8004570 <VL53L1_poll_for_boot_completion+0x2e>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8004568:	2103      	movs	r1, #3
 800456a:	4628      	mov	r0, r5
 800456c:	f7ff f83a 	bl	80035e4 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
}
 8004570:	4620      	mov	r0, r4
 8004572:	b002      	add	sp, #8
 8004574:	bd70      	pop	{r4, r5, r6, pc}

08004576 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8004576:	b507      	push	{r0, r1, r2, lr}
	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
		interrupt_ready = 0x01;
	else
		interrupt_ready = 0x00;

	status =
 8004578:	2201      	movs	r2, #1
	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800457a:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
	status =
 800457e:	9201      	str	r2, [sp, #4]
	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8004580:	f083 0310 	eor.w	r3, r3, #16
	status =
 8004584:	9200      	str	r2, [sp, #0]
 8004586:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800458a:	2231      	movs	r2, #49	; 0x31
 800458c:	f000 f89a 	bl	80046c4 <VL53L1_WaitValueMaskEx>
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
}
 8004590:	b003      	add	sp, #12
 8004592:	f85d fb04 	ldr.w	pc, [sp], #4

08004596 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8004596:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004598:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800459c:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 80045a6:	b293      	uxth	r3, r2
 80045a8:	460a      	mov	r2, r1
 80045aa:	4621      	mov	r1, r4
 80045ac:	f7fc ff32 	bl	8001414 <HAL_I2C_Master_Transmit>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 80045b0:	b002      	add	sp, #8
 80045b2:	bd10      	pop	{r4, pc}

080045b4 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80045b4:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80045b6:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80045ba:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 80045c4:	b293      	uxth	r3, r2
 80045c6:	460a      	mov	r2, r1
 80045c8:	f044 0101 	orr.w	r1, r4, #1
 80045cc:	f7fc fff8 	bl	80015c0 <HAL_I2C_Master_Receive>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 80045d0:	b002      	add	sp, #8
 80045d2:	bd10      	pop	{r4, pc}

080045d4 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    if (count > sizeof(_I2CBuffer) - 1) {
 80045d4:	2bff      	cmp	r3, #255	; 0xff
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80045d6:	b570      	push	{r4, r5, r6, lr}
 80045d8:	4606      	mov	r6, r0
 80045da:	461d      	mov	r5, r3
 80045dc:	4610      	mov	r0, r2
    if (count > sizeof(_I2CBuffer) - 1) {
 80045de:	d813      	bhi.n	8004608 <VL53L1_WriteMulti+0x34>
        return VL53L1_ERROR_INVALID_PARAMS;
    }
    _I2CBuffer[0] = index>>8;
 80045e0:	4c0b      	ldr	r4, [pc, #44]	; (8004610 <VL53L1_WriteMulti+0x3c>)
 80045e2:	0a0b      	lsrs	r3, r1, #8
    _I2CBuffer[1] = index&0xFF;
 80045e4:	7061      	strb	r1, [r4, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80045e6:	462a      	mov	r2, r5
 80045e8:	4601      	mov	r1, r0
 80045ea:	1ca0      	adds	r0, r4, #2
    _I2CBuffer[0] = index>>8;
 80045ec:	7023      	strb	r3, [r4, #0]
    memcpy(&_I2CBuffer[2], pdata, count);
 80045ee:	f000 fb3f 	bl	8004c70 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80045f2:	1caa      	adds	r2, r5, #2
 80045f4:	4621      	mov	r1, r4
 80045f6:	4630      	mov	r0, r6
 80045f8:	f7ff ffcd 	bl	8004596 <_I2CWrite>
    if (status_int != 0) {
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80045fc:	2800      	cmp	r0, #0
 80045fe:	bf0c      	ite	eq
 8004600:	2000      	moveq	r0, #0
 8004602:	f06f 000c 	mvnne.w	r0, #12
 8004606:	bd70      	pop	{r4, r5, r6, pc}
        return VL53L1_ERROR_INVALID_PARAMS;
 8004608:	f06f 0003 	mvn.w	r0, #3
    }
    VL53L1_PutI2cBus();
    return Status;
}
 800460c:	bd70      	pop	{r4, r5, r6, pc}
 800460e:	bf00      	nop
 8004610:	200006ec 	.word	0x200006ec

08004614 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	460c      	mov	r4, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8004618:	4909      	ldr	r1, [pc, #36]	; (8004640 <VL53L1_ReadMulti+0x2c>)
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800461a:	4616      	mov	r6, r2
 800461c:	461f      	mov	r7, r3
    _I2CBuffer[1] = index&0xFF;
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800461e:	2202      	movs	r2, #2
    _I2CBuffer[0] = index>>8;
 8004620:	0a23      	lsrs	r3, r4, #8
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8004622:	4605      	mov	r5, r0
    _I2CBuffer[0] = index>>8;
 8004624:	700b      	strb	r3, [r1, #0]
    _I2CBuffer[1] = index&0xFF;
 8004626:	704c      	strb	r4, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004628:	f7ff ffb5 	bl	8004596 <_I2CWrite>
    if (status_int != 0) {
 800462c:	b928      	cbnz	r0, 800463a <VL53L1_ReadMulti+0x26>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, pdata, count);
 800462e:	463a      	mov	r2, r7
 8004630:	4631      	mov	r1, r6
 8004632:	4628      	mov	r0, r5
 8004634:	f7ff ffbe 	bl	80045b4 <_I2CRead>
    if (status_int != 0) {
 8004638:	b108      	cbz	r0, 800463e <VL53L1_ReadMulti+0x2a>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800463a:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 800463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004640:	200006ec 	.word	0x200006ec

08004644 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8004644:	b538      	push	{r3, r4, r5, lr}
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <VL53L1_RdByte+0x2c>)
VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8004648:	4615      	mov	r5, r2
	_I2CBuffer[0] = index>>8;
 800464a:	0a0a      	lsrs	r2, r1, #8
 800464c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800464e:	7059      	strb	r1, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004650:	2202      	movs	r2, #2
 8004652:	4619      	mov	r1, r3
VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8004654:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004656:	f7ff ff9e 	bl	8004596 <_I2CWrite>
    if( status_int ){
 800465a:	b928      	cbnz	r0, 8004668 <VL53L1_RdByte+0x24>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
 800465c:	2201      	movs	r2, #1
 800465e:	4629      	mov	r1, r5
 8004660:	4620      	mov	r0, r4
 8004662:	f7ff ffa7 	bl	80045b4 <_I2CRead>
    if (status_int != 0) {
 8004666:	b108      	cbz	r0, 800466c <VL53L1_RdByte+0x28>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004668:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 800466c:	bd38      	pop	{r3, r4, r5, pc}
 800466e:	bf00      	nop
 8004670:	200006ec 	.word	0x200006ec

08004674 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8004674:	b570      	push	{r4, r5, r6, lr}
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8004676:	4c0d      	ldr	r4, [pc, #52]	; (80046ac <VL53L1_RdWord+0x38>)
 8004678:	0a0b      	lsrs	r3, r1, #8
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800467a:	4615      	mov	r5, r2
	_I2CBuffer[1] = index&0xFF;
 800467c:	7061      	strb	r1, [r4, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800467e:	2202      	movs	r2, #2
 8004680:	4621      	mov	r1, r4
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8004682:	4606      	mov	r6, r0
    _I2CBuffer[0] = index>>8;
 8004684:	7023      	strb	r3, [r4, #0]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004686:	f7ff ff86 	bl	8004596 <_I2CWrite>

    if( status_int ){
 800468a:	b110      	cbz	r0, 8004692 <VL53L1_RdWord+0x1e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800468c:	f06f 000c 	mvn.w	r0, #12
 8004690:	bd70      	pop	{r4, r5, r6, pc}
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8004692:	2202      	movs	r2, #2
 8004694:	4621      	mov	r1, r4
 8004696:	4630      	mov	r0, r6
 8004698:	f7ff ff8c 	bl	80045b4 <_I2CRead>
    if (status_int != 0) {
 800469c:	2800      	cmp	r0, #0
 800469e:	d1f5      	bne.n	800468c <VL53L1_RdWord+0x18>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80046a0:	7822      	ldrb	r2, [r4, #0]
 80046a2:	7863      	ldrb	r3, [r4, #1]
 80046a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80046a8:	802b      	strh	r3, [r5, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
}
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	200006ec 	.word	0x200006ec

080046b0 <VL53L1_WaitUs>:
    return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
	(void)pdev;
	HAL_Delay(wait_us/1000);
 80046b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 80046b4:	b508      	push	{r3, lr}
	HAL_Delay(wait_us/1000);
 80046b6:	fb91 f0f0 	sdiv	r0, r1, r0
 80046ba:	f7fc fbb1 	bl	8000e20 <HAL_Delay>
    return VL53L1_ERROR_NONE;
}
 80046be:	2000      	movs	r0, #0
 80046c0:	bd08      	pop	{r3, pc}
	...

080046c4 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80046c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	VL53L1_Error status         = VL53L1_ERROR_NONE;
	uint32_t     start_time_ms = 0;
	uint32_t     current_time_ms = 0;
	uint32_t     polling_time_ms = 0;
	uint8_t      byte_value      = 0;
 80046c8:	2400      	movs	r4, #0
{
 80046ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80046ce:	4606      	mov	r6, r0
 80046d0:	460f      	mov	r7, r1
 80046d2:	4690      	mov	r8, r2
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 80046d4:	4919      	ldr	r1, [pc, #100]	; (800473c <VL53L1_WaitValueMaskEx+0x78>)
 80046d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046da:	a802      	add	r0, sp, #8
{
 80046dc:	4699      	mov	r9, r3
 80046de:	f89d a228 	ldrb.w	sl, [sp, #552]	; 0x228
 80046e2:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
	uint8_t      byte_value      = 0;
 80046e4:	f88d 4007 	strb.w	r4, [sp, #7]
	VL53L1_COPYSTRING(register_name, "");
 80046e8:	f000 fafa 	bl	8004ce0 <strncpy>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 80046ec:	b1ff      	cbz	r7, 800472e <VL53L1_WaitValueMaskEx+0x6a>
		   (polling_time_ms < timeout_ms) &&
 80046ee:	b12c      	cbz	r4, 80046fc <VL53L1_WaitValueMaskEx+0x38>
 80046f0:	2300      	movs	r3, #0

	if (found == 0 && status == VL53L1_ERROR_NONE)
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 80046f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			status = VL53L1_RdByte(
 80046fc:	f10d 0207 	add.w	r2, sp, #7
 8004700:	4641      	mov	r1, r8
 8004702:	4630      	mov	r0, r6
 8004704:	f7ff ff9e 	bl	8004644 <VL53L1_RdByte>
		if ((byte_value & mask) == value)
 8004708:	f89d 2007 	ldrb.w	r2, [sp, #7]
			status = VL53L1_RdByte(
 800470c:	4603      	mov	r3, r0
		if ((byte_value & mask) == value)
 800470e:	ea0a 0202 	and.w	r2, sl, r2
 8004712:	454a      	cmp	r2, r9
 8004714:	d103      	bne.n	800471e <VL53L1_WaitValueMaskEx+0x5a>
	while ((status == VL53L1_ERROR_NONE) &&
 8004716:	2800      	cmp	r0, #0
 8004718:	d1eb      	bne.n	80046f2 <VL53L1_WaitValueMaskEx+0x2e>
			found = 1;
 800471a:	2401      	movs	r4, #1
 800471c:	e7e6      	b.n	80046ec <VL53L1_WaitValueMaskEx+0x28>
		if (status == VL53L1_ERROR_NONE  &&
 800471e:	2800      	cmp	r0, #0
 8004720:	d1e7      	bne.n	80046f2 <VL53L1_WaitValueMaskEx+0x2e>
			found == 0 &&
 8004722:	2d00      	cmp	r5, #0
 8004724:	d0e2      	beq.n	80046ec <VL53L1_WaitValueMaskEx+0x28>
	HAL_Delay(wait_ms);
 8004726:	4628      	mov	r0, r5
 8004728:	f7fc fb7a 	bl	8000e20 <HAL_Delay>
 800472c:	e7de      	b.n	80046ec <VL53L1_WaitValueMaskEx+0x28>
		status = VL53L1_ERROR_TIME_OUT;
 800472e:	2c00      	cmp	r4, #0
 8004730:	bf14      	ite	ne
 8004732:	2300      	movne	r3, #0
 8004734:	f06f 0306 	mvneq.w	r3, #6
 8004738:	e7db      	b.n	80046f2 <VL53L1_WaitValueMaskEx+0x2e>
 800473a:	bf00      	nop
 800473c:	08007b0a 	.word	0x08007b0a

08004740 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004740:	2301      	movs	r3, #1
{
 8004742:	b510      	push	{r4, lr}
 8004744:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004746:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004748:	2310      	movs	r3, #16
 800474a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800474c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800474e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8004750:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004752:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004756:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004758:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800475a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800475c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800475e:	f7fd f8b1 	bl	80018c4 <HAL_RCC_OscConfig>
 8004762:	b100      	cbz	r0, 8004766 <SystemClock_Config+0x26>
 8004764:	e7fe      	b.n	8004764 <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004766:	230f      	movs	r3, #15
 8004768:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800476a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800476e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004770:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004772:	4621      	mov	r1, r4
 8004774:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004776:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004778:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800477a:	f7fd fa6b 	bl	8001c54 <HAL_RCC_ClockConfig>
 800477e:	4604      	mov	r4, r0
 8004780:	b100      	cbz	r0, 8004784 <SystemClock_Config+0x44>
 8004782:	e7fe      	b.n	8004782 <SystemClock_Config+0x42>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004784:	f7fd fb0a 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8004788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800478c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004790:	f7fc fbaa 	bl	8000ee8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004794:	2004      	movs	r0, #4
 8004796:	f7fc fbbd 	bl	8000f14 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800479a:	4622      	mov	r2, r4
 800479c:	4621      	mov	r1, r4
 800479e:	f04f 30ff 	mov.w	r0, #4294967295
 80047a2:	f7fc fb61 	bl	8000e68 <HAL_NVIC_SetPriority>
}
 80047a6:	b010      	add	sp, #64	; 0x40
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	0000      	movs	r0, r0
 80047ac:	0000      	movs	r0, r0
	...

080047b0 <main>:
{
 80047b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b4:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
  HAL_Init();
 80047b8:	f7fc fb0e 	bl	8000dd8 <HAL_Init>
  SystemClock_Config();
 80047bc:	f7ff ffc0 	bl	8004740 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c0:	4b93      	ldr	r3, [pc, #588]	; (8004a10 <main+0x260>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80047c2:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80047c6:	4893      	ldr	r0, [pc, #588]	; (8004a14 <main+0x264>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c8:	f042 0210 	orr.w	r2, r2, #16
 80047cc:	619a      	str	r2, [r3, #24]
 80047ce:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d0:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047d2:	f002 0210 	and.w	r2, r2, #16
 80047d6:	9205      	str	r2, [sp, #20]
 80047d8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047da:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047dc:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047de:	f042 0220 	orr.w	r2, r2, #32
 80047e2:	619a      	str	r2, [r3, #24]
 80047e4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e6:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047e8:	f002 0220 	and.w	r2, r2, #32
 80047ec:	9206      	str	r2, [sp, #24]
 80047ee:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f0:	699a      	ldr	r2, [r3, #24]
  hi2c1.Instance = I2C1;
 80047f2:	4c89      	ldr	r4, [pc, #548]	; (8004a18 <main+0x268>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f4:	f042 0204 	orr.w	r2, r2, #4
 80047f8:	619a      	str	r2, [r3, #24]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	f002 0204 	and.w	r2, r2, #4
 8004800:	9207      	str	r2, [sp, #28]
 8004802:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	f042 0208 	orr.w	r2, r2, #8
 800480a:	619a      	str	r2, [r3, #24]
 800480c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800480e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	9308      	str	r3, [sp, #32]
 8004816:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004818:	f7fc fc6e 	bl	80010f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800481c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004820:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004822:	4b7e      	ldr	r3, [pc, #504]	; (8004a1c <main+0x26c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004824:	a91d      	add	r1, sp, #116	; 0x74
 8004826:	487e      	ldr	r0, [pc, #504]	; (8004a20 <main+0x270>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004828:	931e      	str	r3, [sp, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482a:	951f      	str	r5, [sp, #124]	; 0x7c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800482c:	f7fc fb84 	bl	8000f38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8004830:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004832:	a91d      	add	r1, sp, #116	; 0x74
 8004834:	4877      	ldr	r0, [pc, #476]	; (8004a14 <main+0x264>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8004836:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004838:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	951f      	str	r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483c:	9620      	str	r6, [sp, #128]	; 0x80
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800483e:	f7fc fb7b 	bl	8000f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004842:	462a      	mov	r2, r5
 8004844:	4629      	mov	r1, r5
 8004846:	2028      	movs	r0, #40	; 0x28
 8004848:	f7fc fb0e 	bl	8000e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800484c:	2028      	movs	r0, #40	; 0x28
 800484e:	f7fc fb3f 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.ClockSpeed = 100000;
 8004852:	4874      	ldr	r0, [pc, #464]	; (8004a24 <main+0x274>)
 8004854:	4b74      	ldr	r3, [pc, #464]	; (8004a28 <main+0x278>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004856:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8004858:	e884 0009 	stmia.w	r4, {r0, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800485c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004860:	4620      	mov	r0, r4
  hi2c1.Init.OwnAddress1 = 0;
 8004862:	60e5      	str	r5, [r4, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004864:	6123      	str	r3, [r4, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004866:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004868:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800486a:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800486c:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800486e:	f7fc fd51 	bl	8001314 <HAL_I2C_Init>
 8004872:	b100      	cbz	r0, 8004876 <main+0xc6>
 8004874:	e7fe      	b.n	8004874 <main+0xc4>
  huart2.Init.BaudRate = 115200;
 8004876:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Instance = USART2;
 800487a:	4b6c      	ldr	r3, [pc, #432]	; (8004a2c <main+0x27c>)
  huart2.Init.BaudRate = 115200;
 800487c:	496c      	ldr	r1, [pc, #432]	; (8004a30 <main+0x280>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800487e:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 115200;
 8004880:	e883 0006 	stmia.w	r3, {r1, r2}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004884:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004886:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004888:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800488a:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800488c:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800488e:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004890:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004892:	f7fd fb6f 	bl	8001f74 <HAL_UART_Init>
 8004896:	b100      	cbz	r0, 800489a <main+0xea>
 8004898:	e7fe      	b.n	8004898 <main+0xe8>
  Dev->I2cDevAddr = 0x52;
 800489a:	2352      	movs	r3, #82	; 0x52
 800489c:	f88d 340c 	strb.w	r3, [sp, #1036]	; 0x40c
  buff[0] = 0x14; // GPDR (GPIO set direction register)
 80048a0:	2314      	movs	r3, #20
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 3, 0xFFFF );
 80048a2:	f64f 75ff 	movw	r5, #65535	; 0xffff
  buff[0] = 0x14; // GPDR (GPIO set direction register)
 80048a6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  buff[1] = 0xFF; // GPIO_0 - GPIO_7
 80048aa:	23ff      	movs	r3, #255	; 0xff
  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 80048ac:	f04f 0813 	mov.w	r8, #19
  buff[1] = 0xFF; // GPIO_0 - GPIO_7
 80048b0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
  buff[2] = 0xFF; // GPIO_8 - GPIO_15
 80048b4:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 3, 0xFFFF );
 80048b8:	aa10      	add	r2, sp, #64	; 0x40
 80048ba:	2303      	movs	r3, #3
 80048bc:	2184      	movs	r1, #132	; 0x84
 80048be:	4620      	mov	r0, r4
 80048c0:	9500      	str	r5, [sp, #0]
  Dev->I2cHandle = &hi2c1;
 80048c2:	f8cd 4414 	str.w	r4, [sp, #1044]	; 0x414
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 3, 0xFFFF );
 80048c6:	f7fc fda5 	bl	8001414 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, buff, 3, 0xFFFF );
 80048ca:	2303      	movs	r3, #3
 80048cc:	aa10      	add	r2, sp, #64	; 0x40
 80048ce:	2186      	movs	r1, #134	; 0x86
 80048d0:	4620      	mov	r0, r4
 80048d2:	9500      	str	r5, [sp, #0]
 80048d4:	f7fc fd9e 	bl	8001414 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
 80048d8:	463b      	mov	r3, r7
 80048da:	aa10      	add	r2, sp, #64	; 0x40
 80048dc:	2184      	movs	r1, #132	; 0x84
 80048de:	4620      	mov	r0, r4
 80048e0:	9500      	str	r5, [sp, #0]
  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 80048e2:	f88d 8040 	strb.w	r8, [sp, #64]	; 0x40
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
 80048e6:	f7fc fd95 	bl	8001414 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
 80048ea:	463b      	mov	r3, r7
 80048ec:	aa10      	add	r2, sp, #64	; 0x40
 80048ee:	2184      	movs	r1, #132	; 0x84
 80048f0:	4620      	mov	r0, r4
 80048f2:	9500      	str	r5, [sp, #0]
 80048f4:	f7fc fe64 	bl	80015c0 <HAL_I2C_Master_Receive>
  buff[1] = buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 80048f8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );
 80048fc:	aa10      	add	r2, sp, #64	; 0x40
  buff[1] = buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 80048fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );
 8004902:	2184      	movs	r1, #132	; 0x84
  buff[1] = buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 8004904:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );
 8004908:	4620      	mov	r0, r4
 800490a:	4633      	mov	r3, r6
 800490c:	9500      	str	r5, [sp, #0]
  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 800490e:	f88d 8040 	strb.w	r8, [sp, #64]	; 0x40
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );
 8004912:	f7fc fd7f 	bl	8001414 <HAL_I2C_Master_Transmit>
  HAL_Delay( 2 ); // 2ms reset time
 8004916:	4630      	mov	r0, r6
 8004918:	f7fc fa82 	bl	8000e20 <HAL_Delay>
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
 800491c:	463b      	mov	r3, r7
 800491e:	aa10      	add	r2, sp, #64	; 0x40
 8004920:	2184      	movs	r1, #132	; 0x84
 8004922:	4620      	mov	r0, r4
 8004924:	9500      	str	r5, [sp, #0]
  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 8004926:	f88d 8040 	strb.w	r8, [sp, #64]	; 0x40
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
 800492a:	f7fc fd73 	bl	8001414 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
 800492e:	463b      	mov	r3, r7
 8004930:	aa10      	add	r2, sp, #64	; 0x40
 8004932:	2184      	movs	r1, #132	; 0x84
 8004934:	4620      	mov	r0, r4
 8004936:	9500      	str	r5, [sp, #0]
 8004938:	f7fc fe42 	bl	80015c0 <HAL_I2C_Master_Receive>
  buff[1] = buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 800493c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );
 8004940:	aa10      	add	r2, sp, #64	; 0x40
  buff[1] = buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 8004942:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );
 8004946:	2184      	movs	r1, #132	; 0x84
  buff[1] = buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 8004948:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );
 800494c:	4620      	mov	r0, r4
 800494e:	4633      	mov	r3, r6
 8004950:	9500      	str	r5, [sp, #0]
  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8004952:	f88d 8040 	strb.w	r8, [sp, #64]	; 0x40
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );
 8004956:	f7fc fd5d 	bl	8001414 <HAL_I2C_Master_Transmit>
    sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 800495a:	f20f 09ac 	addw	r9, pc, #172	; 0xac
 800495e:	e9d9 8900 	ldrd	r8, r9, [r9]
  HAL_Delay( 2 );
 8004962:	4630      	mov	r0, r6
 8004964:	f7fc fa5c 	bl	8000e20 <HAL_Delay>
  VL53L1_WaitDeviceBooted( Dev );
 8004968:	a81d      	add	r0, sp, #116	; 0x74
 800496a:	f7fd fc06 	bl	800217a <VL53L1_WaitDeviceBooted>
  VL53L1_DataInit( Dev );
 800496e:	a81d      	add	r0, sp, #116	; 0x74
 8004970:	f7fd fd2e 	bl	80023d0 <VL53L1_DataInit>
  VL53L1_StaticInit( Dev );
 8004974:	a81d      	add	r0, sp, #116	; 0x74
 8004976:	f7fd fce5 	bl	8002344 <VL53L1_StaticInit>
  VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 800497a:	2103      	movs	r1, #3
 800497c:	a81d      	add	r0, sp, #116	; 0x74
 800497e:	f7fd fc00 	bl	8002182 <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 8004982:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004986:	a81d      	add	r0, sp, #116	; 0x74
 8004988:	f7fd fc36 	bl	80021f8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 800498c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004990:	a81d      	add	r0, sp, #116	; 0x74
 8004992:	f7fd fce5 	bl	8002360 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
  VL53L1_StartMeasurement( Dev );
 8004996:	a81d      	add	r0, sp, #116	; 0x74
 8004998:	f7fd fd6f 	bl	800247a <VL53L1_StartMeasurement>
    sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 800499c:	2600      	movs	r6, #0
 800499e:	4f25      	ldr	r7, [pc, #148]	; (8004a34 <main+0x284>)
 80049a0:	4c25      	ldr	r4, [pc, #148]	; (8004a38 <main+0x288>)
    VL53L1_WaitMeasurementDataReady( Dev );
 80049a2:	a81d      	add	r0, sp, #116	; 0x74
 80049a4:	f7fd fdcb 	bl	800253e <VL53L1_WaitMeasurementDataReady>
    VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 80049a8:	a909      	add	r1, sp, #36	; 0x24
 80049aa:	a81d      	add	r0, sp, #116	; 0x74
 80049ac:	f7fd fdcc 	bl	8002548 <VL53L1_GetRangingMeasurementData>
    sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 80049b0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80049b2:	f7fb fd17 	bl	80003e4 <__aeabi_ui2d>
 80049b6:	4642      	mov	r2, r8
 80049b8:	464b      	mov	r3, r9
 80049ba:	f7fb feb3 	bl	8000724 <__aeabi_ddiv>
 80049be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80049c4:	f7fb fd0e 	bl	80003e4 <__aeabi_ui2d>
 80049c8:	4632      	mov	r2, r6
 80049ca:	463b      	mov	r3, r7
 80049cc:	f7fb fd80 	bl	80004d0 <__aeabi_dmul>
 80049d0:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80049d4:	f89d 503f 	ldrb.w	r5, [sp, #63]	; 0x3f
 80049d8:	e9cd 0100 	strd	r0, r1, [sp]
 80049dc:	4653      	mov	r3, sl
 80049de:	462a      	mov	r2, r5
 80049e0:	4621      	mov	r1, r4
 80049e2:	a810      	add	r0, sp, #64	; 0x40
 80049e4:	f000 f958 	bl	8004c98 <sprintf>
    HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );
 80049e8:	a810      	add	r0, sp, #64	; 0x40
 80049ea:	f7fb fbb1 	bl	8000150 <strlen>
 80049ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049f2:	b282      	uxth	r2, r0
 80049f4:	a910      	add	r1, sp, #64	; 0x40
 80049f6:	480d      	ldr	r0, [pc, #52]	; (8004a2c <main+0x27c>)
 80049f8:	f7fd faea 	bl	8001fd0 <HAL_UART_Transmit>
    VL53L1_ClearInterruptAndStartMeasurement( Dev );
 80049fc:	a81d      	add	r0, sp, #116	; 0x74
 80049fe:	f7fd fd5a 	bl	80024b6 <VL53L1_ClearInterruptAndStartMeasurement>
 8004a02:	e7ce      	b.n	80049a2 <main+0x1f2>
 8004a04:	f3af 8000 	nop.w
 8004a08:	00000000 	.word	0x00000000
 8004a0c:	40efe700 	.word	0x40efe700
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40010800 	.word	0x40010800
 8004a18:	200007ec 	.word	0x200007ec
 8004a1c:	10110000 	.word	0x10110000
 8004a20:	40011000 	.word	0x40011000
 8004a24:	40005400 	.word	0x40005400
 8004a28:	000186a0 	.word	0x000186a0
 8004a2c:	20000840 	.word	0x20000840
 8004a30:	40004400 	.word	0x40004400
 8004a34:	3ef00000 	.word	0x3ef00000
 8004a38:	08007af6 	.word	0x08007af6

08004a3c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004a3c:	4b25      	ldr	r3, [pc, #148]	; (8004ad4 <HAL_MspInit+0x98>)
{
 8004a3e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004a40:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a42:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	619a      	str	r2, [r3, #24]
 8004a4a:	699a      	ldr	r2, [r3, #24]
 8004a4c:	f002 0201 	and.w	r2, r2, #1
 8004a50:	9200      	str	r2, [sp, #0]
 8004a52:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a5a:	61da      	str	r2, [r3, #28]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a66:	f7fc f9ed 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f06f 000b 	mvn.w	r0, #11
 8004a70:	4611      	mov	r1, r2
 8004a72:	f7fc f9f9 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004a76:	2200      	movs	r2, #0
 8004a78:	f06f 000a 	mvn.w	r0, #10
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	f7fc f9f3 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004a82:	2200      	movs	r2, #0
 8004a84:	f06f 0009 	mvn.w	r0, #9
 8004a88:	4611      	mov	r1, r2
 8004a8a:	f7fc f9ed 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f06f 0004 	mvn.w	r0, #4
 8004a94:	4611      	mov	r1, r2
 8004a96:	f7fc f9e7 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f06f 0003 	mvn.w	r0, #3
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	f7fc f9e1 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f06f 0001 	mvn.w	r0, #1
 8004aac:	4611      	mov	r1, r2
 8004aae:	f7fc f9db 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab8:	4611      	mov	r1, r2
 8004aba:	f7fc f9d5 	bl	8000e68 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004abe:	4a06      	ldr	r2, [pc, #24]	; (8004ad8 <HAL_MspInit+0x9c>)
 8004ac0:	6853      	ldr	r3, [r2, #4]
 8004ac2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004ac6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004aca:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004acc:	b003      	add	sp, #12
 8004ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40010000 	.word	0x40010000

08004adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004adc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8004ade:	6802      	ldr	r2, [r0, #0]
 8004ae0:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <HAL_I2C_MspInit+0x48>)
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d11b      	bne.n	8004b1e <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ae6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004aea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aec:	2312      	movs	r3, #18
 8004aee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004af0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af2:	a902      	add	r1, sp, #8
 8004af4:	480c      	ldr	r0, [pc, #48]	; (8004b28 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004af6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af8:	f7fc fa1e 	bl	8000f38 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004afc:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <HAL_I2C_MspInit+0x50>)
 8004afe:	6853      	ldr	r3, [r2, #4]
 8004b00:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <HAL_I2C_MspInit+0x54>)
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004b12:	61da      	str	r2, [r3, #28]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b1e:	b007      	add	sp, #28
 8004b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b24:	40005400 	.word	0x40005400
 8004b28:	40010c00 	.word	0x40010c00
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40021000 	.word	0x40021000

08004b34 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8004b36:	6802      	ldr	r2, [r0, #0]
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_UART_MspInit+0x38>)
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d113      	bne.n	8004b66 <HAL_UART_MspInit+0x32>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b3e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8004b42:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b44:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004b4a:	61da      	str	r2, [r3, #28]
 8004b4c:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4e:	4808      	ldr	r0, [pc, #32]	; (8004b70 <HAL_UART_MspInit+0x3c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b58:	230c      	movs	r3, #12
 8004b5a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b60:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b62:	f7fc f9e9 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004b66:	b007      	add	sp, #28
 8004b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b6c:	40004400 	.word	0x40004400
 8004b70:	40010800 	.word	0x40010800

08004b74 <SVC_Handler>:
 8004b74:	4770      	bx	lr

08004b76 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004b76:	4770      	bx	lr

08004b78 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004b78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b7a:	f7fc f93f 	bl	8000dfc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8004b82:	f7fc b9d4 	b.w	8000f2e <HAL_SYSTICK_IRQHandler>

08004b86 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004b86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b8a:	f7fc babb 	b.w	8001104 <HAL_GPIO_EXTI_IRQHandler>
	...

08004b90 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <SystemInit+0x40>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004b9a:	6859      	ldr	r1, [r3, #4]
 8004b9c:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <SystemInit+0x44>)
 8004b9e:	400a      	ands	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004ba8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bb4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004bbc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004bbe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004bc2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004bc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bc8:	4b03      	ldr	r3, [pc, #12]	; (8004bd8 <SystemInit+0x48>)
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	f8ff0000 	.word	0xf8ff0000
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004bdc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004bde:	e003      	b.n	8004be8 <LoopCopyDataInit>

08004be0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004be2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004be4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004be6:	3104      	adds	r1, #4

08004be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004be8:	480a      	ldr	r0, [pc, #40]	; (8004c14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004bec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004bee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004bf0:	d3f6      	bcc.n	8004be0 <CopyDataInit>
  ldr r2, =_sbss
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004bf4:	e002      	b.n	8004bfc <LoopFillZerobss>

08004bf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004bf6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004bf8:	f842 3b04 	str.w	r3, [r2], #4

08004bfc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004bfc:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004bfe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004c00:	d3f9      	bcc.n	8004bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c02:	f7ff ffc5 	bl	8004b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c06:	f000 f80f 	bl	8004c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c0a:	f7ff fdd1 	bl	80047b0 <main>
  bx lr
 8004c0e:	4770      	bx	lr
  ldr r3, =_sidata
 8004c10:	08007da0 	.word	0x08007da0
  ldr r0, =_sdata
 8004c14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004c18:	20000694 	.word	0x20000694
  ldr r2, =_sbss
 8004c1c:	20000694 	.word	0x20000694
  ldr r3, = _ebss
 8004c20:	20000890 	.word	0x20000890

08004c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c24:	e7fe      	b.n	8004c24 <ADC1_2_IRQHandler>
	...

08004c28 <__libc_init_array>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	2500      	movs	r5, #0
 8004c2c:	4e0c      	ldr	r6, [pc, #48]	; (8004c60 <__libc_init_array+0x38>)
 8004c2e:	4c0d      	ldr	r4, [pc, #52]	; (8004c64 <__libc_init_array+0x3c>)
 8004c30:	1ba4      	subs	r4, r4, r6
 8004c32:	10a4      	asrs	r4, r4, #2
 8004c34:	42a5      	cmp	r5, r4
 8004c36:	d109      	bne.n	8004c4c <__libc_init_array+0x24>
 8004c38:	f002 ff3e 	bl	8007ab8 <_init>
 8004c3c:	2500      	movs	r5, #0
 8004c3e:	4e0a      	ldr	r6, [pc, #40]	; (8004c68 <__libc_init_array+0x40>)
 8004c40:	4c0a      	ldr	r4, [pc, #40]	; (8004c6c <__libc_init_array+0x44>)
 8004c42:	1ba4      	subs	r4, r4, r6
 8004c44:	10a4      	asrs	r4, r4, #2
 8004c46:	42a5      	cmp	r5, r4
 8004c48:	d105      	bne.n	8004c56 <__libc_init_array+0x2e>
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c50:	4798      	blx	r3
 8004c52:	3501      	adds	r5, #1
 8004c54:	e7ee      	b.n	8004c34 <__libc_init_array+0xc>
 8004c56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c5a:	4798      	blx	r3
 8004c5c:	3501      	adds	r5, #1
 8004c5e:	e7f2      	b.n	8004c46 <__libc_init_array+0x1e>
 8004c60:	08007d98 	.word	0x08007d98
 8004c64:	08007d98 	.word	0x08007d98
 8004c68:	08007d98 	.word	0x08007d98
 8004c6c:	08007d9c 	.word	0x08007d9c

08004c70 <memcpy>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	1e43      	subs	r3, r0, #1
 8004c74:	440a      	add	r2, r1
 8004c76:	4291      	cmp	r1, r2
 8004c78:	d100      	bne.n	8004c7c <memcpy+0xc>
 8004c7a:	bd10      	pop	{r4, pc}
 8004c7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c84:	e7f7      	b.n	8004c76 <memcpy+0x6>

08004c86 <memset>:
 8004c86:	4603      	mov	r3, r0
 8004c88:	4402      	add	r2, r0
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d100      	bne.n	8004c90 <memset+0xa>
 8004c8e:	4770      	bx	lr
 8004c90:	f803 1b01 	strb.w	r1, [r3], #1
 8004c94:	e7f9      	b.n	8004c8a <memset+0x4>
	...

08004c98 <sprintf>:
 8004c98:	b40e      	push	{r1, r2, r3}
 8004c9a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004c9e:	b500      	push	{lr}
 8004ca0:	b09c      	sub	sp, #112	; 0x70
 8004ca2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004ca6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004caa:	9104      	str	r1, [sp, #16]
 8004cac:	9107      	str	r1, [sp, #28]
 8004cae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8004cb4:	9002      	str	r0, [sp, #8]
 8004cb6:	9006      	str	r0, [sp, #24]
 8004cb8:	4808      	ldr	r0, [pc, #32]	; (8004cdc <sprintf+0x44>)
 8004cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cbe:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004cc2:	6800      	ldr	r0, [r0, #0]
 8004cc4:	a902      	add	r1, sp, #8
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	f000 f820 	bl	8004d0c <_svfprintf_r>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	9b02      	ldr	r3, [sp, #8]
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	b01c      	add	sp, #112	; 0x70
 8004cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cd8:	b003      	add	sp, #12
 8004cda:	4770      	bx	lr
 8004cdc:	20000024 	.word	0x20000024

08004ce0 <strncpy>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	b902      	cbnz	r2, 8004ce8 <strncpy+0x8>
 8004ce6:	bd70      	pop	{r4, r5, r6, pc}
 8004ce8:	4623      	mov	r3, r4
 8004cea:	f811 5b01 	ldrb.w	r5, [r1], #1
 8004cee:	1e56      	subs	r6, r2, #1
 8004cf0:	f803 5b01 	strb.w	r5, [r3], #1
 8004cf4:	b91d      	cbnz	r5, 8004cfe <strncpy+0x1e>
 8004cf6:	4414      	add	r4, r2
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d103      	bne.n	8004d04 <strncpy+0x24>
 8004cfc:	bd70      	pop	{r4, r5, r6, pc}
 8004cfe:	461c      	mov	r4, r3
 8004d00:	4632      	mov	r2, r6
 8004d02:	e7ef      	b.n	8004ce4 <strncpy+0x4>
 8004d04:	f803 5b01 	strb.w	r5, [r3], #1
 8004d08:	e7f6      	b.n	8004cf8 <strncpy+0x18>
	...

08004d0c <_svfprintf_r>:
 8004d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d10:	b0bf      	sub	sp, #252	; 0xfc
 8004d12:	4689      	mov	r9, r1
 8004d14:	4615      	mov	r5, r2
 8004d16:	461f      	mov	r7, r3
 8004d18:	4682      	mov	sl, r0
 8004d1a:	f001 fe29 	bl	8006970 <_localeconv_r>
 8004d1e:	6803      	ldr	r3, [r0, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	9311      	str	r3, [sp, #68]	; 0x44
 8004d24:	f7fb fa14 	bl	8000150 <strlen>
 8004d28:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004d2c:	900a      	str	r0, [sp, #40]	; 0x28
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	d518      	bpl.n	8004d64 <_svfprintf_r+0x58>
 8004d32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004d36:	b9ab      	cbnz	r3, 8004d64 <_svfprintf_r+0x58>
 8004d38:	2140      	movs	r1, #64	; 0x40
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	f001 fe2e 	bl	800699c <_malloc_r>
 8004d40:	f8c9 0000 	str.w	r0, [r9]
 8004d44:	f8c9 0010 	str.w	r0, [r9, #16]
 8004d48:	b948      	cbnz	r0, 8004d5e <_svfprintf_r+0x52>
 8004d4a:	230c      	movs	r3, #12
 8004d4c:	f8ca 3000 	str.w	r3, [sl]
 8004d50:	f04f 33ff 	mov.w	r3, #4294967295
 8004d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d56:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004d58:	b03f      	add	sp, #252	; 0xfc
 8004d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5e:	2340      	movs	r3, #64	; 0x40
 8004d60:	f8c9 3014 	str.w	r3, [r9, #20]
 8004d64:	2300      	movs	r3, #0
 8004d66:	ac2e      	add	r4, sp, #184	; 0xb8
 8004d68:	9421      	str	r4, [sp, #132]	; 0x84
 8004d6a:	9323      	str	r3, [sp, #140]	; 0x8c
 8004d6c:	9322      	str	r3, [sp, #136]	; 0x88
 8004d6e:	9509      	str	r5, [sp, #36]	; 0x24
 8004d70:	9307      	str	r3, [sp, #28]
 8004d72:	930d      	str	r3, [sp, #52]	; 0x34
 8004d74:	930e      	str	r3, [sp, #56]	; 0x38
 8004d76:	9315      	str	r3, [sp, #84]	; 0x54
 8004d78:	9314      	str	r3, [sp, #80]	; 0x50
 8004d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d7c:	9312      	str	r3, [sp, #72]	; 0x48
 8004d7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d82:	462b      	mov	r3, r5
 8004d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d88:	b112      	cbz	r2, 8004d90 <_svfprintf_r+0x84>
 8004d8a:	2a25      	cmp	r2, #37	; 0x25
 8004d8c:	f040 8083 	bne.w	8004e96 <_svfprintf_r+0x18a>
 8004d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d92:	1aee      	subs	r6, r5, r3
 8004d94:	d00d      	beq.n	8004db2 <_svfprintf_r+0xa6>
 8004d96:	e884 0048 	stmia.w	r4, {r3, r6}
 8004d9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d9c:	4433      	add	r3, r6
 8004d9e:	9323      	str	r3, [sp, #140]	; 0x8c
 8004da0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004da2:	3301      	adds	r3, #1
 8004da4:	2b07      	cmp	r3, #7
 8004da6:	9322      	str	r3, [sp, #136]	; 0x88
 8004da8:	dc77      	bgt.n	8004e9a <_svfprintf_r+0x18e>
 8004daa:	3408      	adds	r4, #8
 8004dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dae:	4433      	add	r3, r6
 8004db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db2:	782b      	ldrb	r3, [r5, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8725 	beq.w	8005c04 <_svfprintf_r+0xef8>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	1c69      	adds	r1, r5, #1
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f04f 3bff 	mov.w	fp, #4294967295
 8004dc4:	461d      	mov	r5, r3
 8004dc6:	200a      	movs	r0, #10
 8004dc8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004dcc:	930c      	str	r3, [sp, #48]	; 0x30
 8004dce:	1c4e      	adds	r6, r1, #1
 8004dd0:	7809      	ldrb	r1, [r1, #0]
 8004dd2:	9609      	str	r6, [sp, #36]	; 0x24
 8004dd4:	9106      	str	r1, [sp, #24]
 8004dd6:	9906      	ldr	r1, [sp, #24]
 8004dd8:	3920      	subs	r1, #32
 8004dda:	2958      	cmp	r1, #88	; 0x58
 8004ddc:	f200 8414 	bhi.w	8005608 <_svfprintf_r+0x8fc>
 8004de0:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004de4:	041200a5 	.word	0x041200a5
 8004de8:	00aa0412 	.word	0x00aa0412
 8004dec:	04120412 	.word	0x04120412
 8004df0:	04120412 	.word	0x04120412
 8004df4:	04120412 	.word	0x04120412
 8004df8:	006500ad 	.word	0x006500ad
 8004dfc:	00b50412 	.word	0x00b50412
 8004e00:	041200b8 	.word	0x041200b8
 8004e04:	00d800d5 	.word	0x00d800d5
 8004e08:	00d800d8 	.word	0x00d800d8
 8004e0c:	00d800d8 	.word	0x00d800d8
 8004e10:	00d800d8 	.word	0x00d800d8
 8004e14:	00d800d8 	.word	0x00d800d8
 8004e18:	04120412 	.word	0x04120412
 8004e1c:	04120412 	.word	0x04120412
 8004e20:	04120412 	.word	0x04120412
 8004e24:	04120412 	.word	0x04120412
 8004e28:	04120412 	.word	0x04120412
 8004e2c:	0122010c 	.word	0x0122010c
 8004e30:	01220412 	.word	0x01220412
 8004e34:	04120412 	.word	0x04120412
 8004e38:	04120412 	.word	0x04120412
 8004e3c:	041200eb 	.word	0x041200eb
 8004e40:	033c0412 	.word	0x033c0412
 8004e44:	04120412 	.word	0x04120412
 8004e48:	04120412 	.word	0x04120412
 8004e4c:	03a40412 	.word	0x03a40412
 8004e50:	04120412 	.word	0x04120412
 8004e54:	04120085 	.word	0x04120085
 8004e58:	04120412 	.word	0x04120412
 8004e5c:	04120412 	.word	0x04120412
 8004e60:	04120412 	.word	0x04120412
 8004e64:	04120412 	.word	0x04120412
 8004e68:	00fe0412 	.word	0x00fe0412
 8004e6c:	0122006b 	.word	0x0122006b
 8004e70:	01220122 	.word	0x01220122
 8004e74:	006b00ee 	.word	0x006b00ee
 8004e78:	04120412 	.word	0x04120412
 8004e7c:	041200f1 	.word	0x041200f1
 8004e80:	033e031e 	.word	0x033e031e
 8004e84:	00f80372 	.word	0x00f80372
 8004e88:	03830412 	.word	0x03830412
 8004e8c:	03a60412 	.word	0x03a60412
 8004e90:	04120412 	.word	0x04120412
 8004e94:	03be      	.short	0x03be
 8004e96:	461d      	mov	r5, r3
 8004e98:	e773      	b.n	8004d82 <_svfprintf_r+0x76>
 8004e9a:	aa21      	add	r2, sp, #132	; 0x84
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	4650      	mov	r0, sl
 8004ea0:	f002 fa84 	bl	80073ac <__ssprint_r>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f040 868e 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8004eaa:	ac2e      	add	r4, sp, #184	; 0xb8
 8004eac:	e77e      	b.n	8004dac <_svfprintf_r+0xa0>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	222b      	movs	r2, #43	; 0x2b
 8004eb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004eb4:	e78b      	b.n	8004dce <_svfprintf_r+0xc2>
 8004eb6:	460f      	mov	r7, r1
 8004eb8:	e7fb      	b.n	8004eb2 <_svfprintf_r+0x1a6>
 8004eba:	b10b      	cbz	r3, 8004ec0 <_svfprintf_r+0x1b4>
 8004ebc:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004ec0:	06ae      	lsls	r6, r5, #26
 8004ec2:	f140 80a1 	bpl.w	8005008 <_svfprintf_r+0x2fc>
 8004ec6:	3707      	adds	r7, #7
 8004ec8:	f027 0707 	bic.w	r7, r7, #7
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	9308      	str	r3, [sp, #32]
 8004ed2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	f177 0300 	sbcs.w	r3, r7, #0
 8004edc:	da05      	bge.n	8004eea <_svfprintf_r+0x1de>
 8004ede:	232d      	movs	r3, #45	; 0x2d
 8004ee0:	4276      	negs	r6, r6
 8004ee2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004ee6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004eea:	2301      	movs	r3, #1
 8004eec:	e2c7      	b.n	800547e <_svfprintf_r+0x772>
 8004eee:	b10b      	cbz	r3, 8004ef4 <_svfprintf_r+0x1e8>
 8004ef0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004ef4:	4ba0      	ldr	r3, [pc, #640]	; (8005178 <_svfprintf_r+0x46c>)
 8004ef6:	9315      	str	r3, [sp, #84]	; 0x54
 8004ef8:	06ab      	lsls	r3, r5, #26
 8004efa:	f140 8336 	bpl.w	800556a <_svfprintf_r+0x85e>
 8004efe:	3707      	adds	r7, #7
 8004f00:	f027 0707 	bic.w	r7, r7, #7
 8004f04:	f107 0308 	add.w	r3, r7, #8
 8004f08:	9308      	str	r3, [sp, #32]
 8004f0a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004f0e:	07e8      	lsls	r0, r5, #31
 8004f10:	d50b      	bpl.n	8004f2a <_svfprintf_r+0x21e>
 8004f12:	ea56 0307 	orrs.w	r3, r6, r7
 8004f16:	d008      	beq.n	8004f2a <_svfprintf_r+0x21e>
 8004f18:	2330      	movs	r3, #48	; 0x30
 8004f1a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8004f1e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004f22:	f045 0502 	orr.w	r5, r5, #2
 8004f26:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e2a4      	b.n	8005478 <_svfprintf_r+0x76c>
 8004f2e:	2a00      	cmp	r2, #0
 8004f30:	d1bf      	bne.n	8004eb2 <_svfprintf_r+0x1a6>
 8004f32:	2301      	movs	r3, #1
 8004f34:	2220      	movs	r2, #32
 8004f36:	e7bc      	b.n	8004eb2 <_svfprintf_r+0x1a6>
 8004f38:	f045 0501 	orr.w	r5, r5, #1
 8004f3c:	e7b9      	b.n	8004eb2 <_svfprintf_r+0x1a6>
 8004f3e:	683e      	ldr	r6, [r7, #0]
 8004f40:	1d39      	adds	r1, r7, #4
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	960c      	str	r6, [sp, #48]	; 0x30
 8004f46:	dab6      	bge.n	8004eb6 <_svfprintf_r+0x1aa>
 8004f48:	460f      	mov	r7, r1
 8004f4a:	4276      	negs	r6, r6
 8004f4c:	960c      	str	r6, [sp, #48]	; 0x30
 8004f4e:	f045 0504 	orr.w	r5, r5, #4
 8004f52:	e7ae      	b.n	8004eb2 <_svfprintf_r+0x1a6>
 8004f54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f56:	1c4e      	adds	r6, r1, #1
 8004f58:	7809      	ldrb	r1, [r1, #0]
 8004f5a:	292a      	cmp	r1, #42	; 0x2a
 8004f5c:	9106      	str	r1, [sp, #24]
 8004f5e:	d010      	beq.n	8004f82 <_svfprintf_r+0x276>
 8004f60:	f04f 0b00 	mov.w	fp, #0
 8004f64:	9609      	str	r6, [sp, #36]	; 0x24
 8004f66:	9906      	ldr	r1, [sp, #24]
 8004f68:	3930      	subs	r1, #48	; 0x30
 8004f6a:	2909      	cmp	r1, #9
 8004f6c:	f63f af33 	bhi.w	8004dd6 <_svfprintf_r+0xca>
 8004f70:	fb00 1b0b 	mla	fp, r0, fp, r1
 8004f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f76:	460e      	mov	r6, r1
 8004f78:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004f7c:	9106      	str	r1, [sp, #24]
 8004f7e:	9609      	str	r6, [sp, #36]	; 0x24
 8004f80:	e7f1      	b.n	8004f66 <_svfprintf_r+0x25a>
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	9609      	str	r6, [sp, #36]	; 0x24
 8004f86:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8004f8a:	3704      	adds	r7, #4
 8004f8c:	e791      	b.n	8004eb2 <_svfprintf_r+0x1a6>
 8004f8e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004f92:	e78e      	b.n	8004eb2 <_svfprintf_r+0x1a6>
 8004f94:	2100      	movs	r1, #0
 8004f96:	910c      	str	r1, [sp, #48]	; 0x30
 8004f98:	9906      	ldr	r1, [sp, #24]
 8004f9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004f9c:	3930      	subs	r1, #48	; 0x30
 8004f9e:	fb00 1106 	mla	r1, r0, r6, r1
 8004fa2:	910c      	str	r1, [sp, #48]	; 0x30
 8004fa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fa6:	460e      	mov	r6, r1
 8004fa8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004fac:	9106      	str	r1, [sp, #24]
 8004fae:	9906      	ldr	r1, [sp, #24]
 8004fb0:	9609      	str	r6, [sp, #36]	; 0x24
 8004fb2:	3930      	subs	r1, #48	; 0x30
 8004fb4:	2909      	cmp	r1, #9
 8004fb6:	d9ef      	bls.n	8004f98 <_svfprintf_r+0x28c>
 8004fb8:	e70d      	b.n	8004dd6 <_svfprintf_r+0xca>
 8004fba:	f045 0508 	orr.w	r5, r5, #8
 8004fbe:	e778      	b.n	8004eb2 <_svfprintf_r+0x1a6>
 8004fc0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004fc4:	e775      	b.n	8004eb2 <_svfprintf_r+0x1a6>
 8004fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fc8:	7809      	ldrb	r1, [r1, #0]
 8004fca:	296c      	cmp	r1, #108	; 0x6c
 8004fcc:	d105      	bne.n	8004fda <_svfprintf_r+0x2ce>
 8004fce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fd0:	3101      	adds	r1, #1
 8004fd2:	9109      	str	r1, [sp, #36]	; 0x24
 8004fd4:	f045 0520 	orr.w	r5, r5, #32
 8004fd8:	e76b      	b.n	8004eb2 <_svfprintf_r+0x1a6>
 8004fda:	f045 0510 	orr.w	r5, r5, #16
 8004fde:	e768      	b.n	8004eb2 <_svfprintf_r+0x1a6>
 8004fe0:	2600      	movs	r6, #0
 8004fe2:	1d3b      	adds	r3, r7, #4
 8004fe4:	9308      	str	r3, [sp, #32]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8004fec:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8004ff0:	f04f 0b01 	mov.w	fp, #1
 8004ff4:	4637      	mov	r7, r6
 8004ff6:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8004ffa:	e11c      	b.n	8005236 <_svfprintf_r+0x52a>
 8004ffc:	b10b      	cbz	r3, 8005002 <_svfprintf_r+0x2f6>
 8004ffe:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005002:	f045 0510 	orr.w	r5, r5, #16
 8005006:	e75b      	b.n	8004ec0 <_svfprintf_r+0x1b4>
 8005008:	f015 0f10 	tst.w	r5, #16
 800500c:	f107 0304 	add.w	r3, r7, #4
 8005010:	d003      	beq.n	800501a <_svfprintf_r+0x30e>
 8005012:	683e      	ldr	r6, [r7, #0]
 8005014:	9308      	str	r3, [sp, #32]
 8005016:	17f7      	asrs	r7, r6, #31
 8005018:	e75d      	b.n	8004ed6 <_svfprintf_r+0x1ca>
 800501a:	683e      	ldr	r6, [r7, #0]
 800501c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005020:	9308      	str	r3, [sp, #32]
 8005022:	bf18      	it	ne
 8005024:	b236      	sxthne	r6, r6
 8005026:	e7f6      	b.n	8005016 <_svfprintf_r+0x30a>
 8005028:	b10b      	cbz	r3, 800502e <_svfprintf_r+0x322>
 800502a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800502e:	3707      	adds	r7, #7
 8005030:	f027 0707 	bic.w	r7, r7, #7
 8005034:	f107 0308 	add.w	r3, r7, #8
 8005038:	9308      	str	r3, [sp, #32]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f04f 32ff 	mov.w	r2, #4294967295
 8005040:	930d      	str	r3, [sp, #52]	; 0x34
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005046:	930e      	str	r3, [sp, #56]	; 0x38
 8005048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800504a:	4638      	mov	r0, r7
 800504c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8005050:	4631      	mov	r1, r6
 8005052:	4b4a      	ldr	r3, [pc, #296]	; (800517c <_svfprintf_r+0x470>)
 8005054:	f7fb fcd6 	bl	8000a04 <__aeabi_dcmpun>
 8005058:	2800      	cmp	r0, #0
 800505a:	f040 85dc 	bne.w	8005c16 <_svfprintf_r+0xf0a>
 800505e:	f04f 32ff 	mov.w	r2, #4294967295
 8005062:	4b46      	ldr	r3, [pc, #280]	; (800517c <_svfprintf_r+0x470>)
 8005064:	4638      	mov	r0, r7
 8005066:	4631      	mov	r1, r6
 8005068:	f7fb fcae 	bl	80009c8 <__aeabi_dcmple>
 800506c:	2800      	cmp	r0, #0
 800506e:	f040 85d2 	bne.w	8005c16 <_svfprintf_r+0xf0a>
 8005072:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005074:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005076:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005078:	990e      	ldr	r1, [sp, #56]	; 0x38
 800507a:	f7fb fc9b 	bl	80009b4 <__aeabi_dcmplt>
 800507e:	b110      	cbz	r0, 8005086 <_svfprintf_r+0x37a>
 8005080:	232d      	movs	r3, #45	; 0x2d
 8005082:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <_svfprintf_r+0x474>)
 8005088:	4a3e      	ldr	r2, [pc, #248]	; (8005184 <_svfprintf_r+0x478>)
 800508a:	9906      	ldr	r1, [sp, #24]
 800508c:	f04f 0b03 	mov.w	fp, #3
 8005090:	2947      	cmp	r1, #71	; 0x47
 8005092:	bfcc      	ite	gt
 8005094:	4690      	movgt	r8, r2
 8005096:	4698      	movle	r8, r3
 8005098:	2600      	movs	r6, #0
 800509a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800509e:	4637      	mov	r7, r6
 80050a0:	e0c9      	b.n	8005236 <_svfprintf_r+0x52a>
 80050a2:	f1bb 3fff 	cmp.w	fp, #4294967295
 80050a6:	d026      	beq.n	80050f6 <_svfprintf_r+0x3ea>
 80050a8:	9b06      	ldr	r3, [sp, #24]
 80050aa:	f023 0320 	bic.w	r3, r3, #32
 80050ae:	2b47      	cmp	r3, #71	; 0x47
 80050b0:	d104      	bne.n	80050bc <_svfprintf_r+0x3b0>
 80050b2:	f1bb 0f00 	cmp.w	fp, #0
 80050b6:	bf08      	it	eq
 80050b8:	f04f 0b01 	moveq.w	fp, #1
 80050bc:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80050c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80050c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050c4:	1e1f      	subs	r7, r3, #0
 80050c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050c8:	bfa8      	it	ge
 80050ca:	9710      	strge	r7, [sp, #64]	; 0x40
 80050cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80050ce:	bfbd      	ittte	lt
 80050d0:	463b      	movlt	r3, r7
 80050d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80050d6:	9310      	strlt	r3, [sp, #64]	; 0x40
 80050d8:	2300      	movge	r3, #0
 80050da:	bfb8      	it	lt
 80050dc:	232d      	movlt	r3, #45	; 0x2d
 80050de:	9316      	str	r3, [sp, #88]	; 0x58
 80050e0:	9b06      	ldr	r3, [sp, #24]
 80050e2:	f023 0720 	bic.w	r7, r3, #32
 80050e6:	2f46      	cmp	r7, #70	; 0x46
 80050e8:	d008      	beq.n	80050fc <_svfprintf_r+0x3f0>
 80050ea:	2f45      	cmp	r7, #69	; 0x45
 80050ec:	d142      	bne.n	8005174 <_svfprintf_r+0x468>
 80050ee:	f10b 0601 	add.w	r6, fp, #1
 80050f2:	2302      	movs	r3, #2
 80050f4:	e004      	b.n	8005100 <_svfprintf_r+0x3f4>
 80050f6:	f04f 0b06 	mov.w	fp, #6
 80050fa:	e7df      	b.n	80050bc <_svfprintf_r+0x3b0>
 80050fc:	465e      	mov	r6, fp
 80050fe:	2303      	movs	r3, #3
 8005100:	aa1f      	add	r2, sp, #124	; 0x7c
 8005102:	9204      	str	r2, [sp, #16]
 8005104:	aa1c      	add	r2, sp, #112	; 0x70
 8005106:	9203      	str	r2, [sp, #12]
 8005108:	aa1b      	add	r2, sp, #108	; 0x6c
 800510a:	9202      	str	r2, [sp, #8]
 800510c:	e88d 0048 	stmia.w	sp, {r3, r6}
 8005110:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005112:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005114:	4650      	mov	r0, sl
 8005116:	f000 fe57 	bl	8005dc8 <_dtoa_r>
 800511a:	2f47      	cmp	r7, #71	; 0x47
 800511c:	4680      	mov	r8, r0
 800511e:	d102      	bne.n	8005126 <_svfprintf_r+0x41a>
 8005120:	07e8      	lsls	r0, r5, #31
 8005122:	f140 8585 	bpl.w	8005c30 <_svfprintf_r+0xf24>
 8005126:	eb08 0306 	add.w	r3, r8, r6
 800512a:	2f46      	cmp	r7, #70	; 0x46
 800512c:	9307      	str	r3, [sp, #28]
 800512e:	d111      	bne.n	8005154 <_svfprintf_r+0x448>
 8005130:	f898 3000 	ldrb.w	r3, [r8]
 8005134:	2b30      	cmp	r3, #48	; 0x30
 8005136:	d109      	bne.n	800514c <_svfprintf_r+0x440>
 8005138:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800513a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800513c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800513e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005140:	f7fb fc2e 	bl	80009a0 <__aeabi_dcmpeq>
 8005144:	b910      	cbnz	r0, 800514c <_svfprintf_r+0x440>
 8005146:	f1c6 0601 	rsb	r6, r6, #1
 800514a:	961b      	str	r6, [sp, #108]	; 0x6c
 800514c:	9a07      	ldr	r2, [sp, #28]
 800514e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005150:	441a      	add	r2, r3
 8005152:	9207      	str	r2, [sp, #28]
 8005154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005158:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800515a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800515c:	f7fb fc20 	bl	80009a0 <__aeabi_dcmpeq>
 8005160:	b990      	cbnz	r0, 8005188 <_svfprintf_r+0x47c>
 8005162:	2230      	movs	r2, #48	; 0x30
 8005164:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005166:	9907      	ldr	r1, [sp, #28]
 8005168:	4299      	cmp	r1, r3
 800516a:	d90f      	bls.n	800518c <_svfprintf_r+0x480>
 800516c:	1c59      	adds	r1, r3, #1
 800516e:	911f      	str	r1, [sp, #124]	; 0x7c
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e7f7      	b.n	8005164 <_svfprintf_r+0x458>
 8005174:	465e      	mov	r6, fp
 8005176:	e7bc      	b.n	80050f2 <_svfprintf_r+0x3e6>
 8005178:	08007b33 	.word	0x08007b33
 800517c:	7fefffff 	.word	0x7fefffff
 8005180:	08007b23 	.word	0x08007b23
 8005184:	08007b27 	.word	0x08007b27
 8005188:	9b07      	ldr	r3, [sp, #28]
 800518a:	931f      	str	r3, [sp, #124]	; 0x7c
 800518c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800518e:	2f47      	cmp	r7, #71	; 0x47
 8005190:	eba3 0308 	sub.w	r3, r3, r8
 8005194:	9307      	str	r3, [sp, #28]
 8005196:	f040 8100 	bne.w	800539a <_svfprintf_r+0x68e>
 800519a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800519c:	1cd9      	adds	r1, r3, #3
 800519e:	db02      	blt.n	80051a6 <_svfprintf_r+0x49a>
 80051a0:	459b      	cmp	fp, r3
 80051a2:	f280 8126 	bge.w	80053f2 <_svfprintf_r+0x6e6>
 80051a6:	9b06      	ldr	r3, [sp, #24]
 80051a8:	3b02      	subs	r3, #2
 80051aa:	9306      	str	r3, [sp, #24]
 80051ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80051ae:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80051b2:	1e53      	subs	r3, r2, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bfa8      	it	ge
 80051b8:	222b      	movge	r2, #43	; 0x2b
 80051ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80051bc:	bfbc      	itt	lt
 80051be:	f1c2 0301 	rsblt	r3, r2, #1
 80051c2:	222d      	movlt	r2, #45	; 0x2d
 80051c4:	2b09      	cmp	r3, #9
 80051c6:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 80051ca:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 80051ce:	f340 8100 	ble.w	80053d2 <_svfprintf_r+0x6c6>
 80051d2:	260a      	movs	r6, #10
 80051d4:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 80051d8:	fb93 f0f6 	sdiv	r0, r3, r6
 80051dc:	fb06 3310 	mls	r3, r6, r0, r3
 80051e0:	2809      	cmp	r0, #9
 80051e2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80051e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80051ea:	f102 31ff 	add.w	r1, r2, #4294967295
 80051ee:	4603      	mov	r3, r0
 80051f0:	f300 80e8 	bgt.w	80053c4 <_svfprintf_r+0x6b8>
 80051f4:	3330      	adds	r3, #48	; 0x30
 80051f6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80051fa:	3a02      	subs	r2, #2
 80051fc:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8005200:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8005204:	4282      	cmp	r2, r0
 8005206:	4619      	mov	r1, r3
 8005208:	f0c0 80de 	bcc.w	80053c8 <_svfprintf_r+0x6bc>
 800520c:	9a07      	ldr	r2, [sp, #28]
 800520e:	ab1d      	add	r3, sp, #116	; 0x74
 8005210:	1acb      	subs	r3, r1, r3
 8005212:	2a01      	cmp	r2, #1
 8005214:	9314      	str	r3, [sp, #80]	; 0x50
 8005216:	eb03 0b02 	add.w	fp, r3, r2
 800521a:	dc02      	bgt.n	8005222 <_svfprintf_r+0x516>
 800521c:	f015 0701 	ands.w	r7, r5, #1
 8005220:	d002      	beq.n	8005228 <_svfprintf_r+0x51c>
 8005222:	2700      	movs	r7, #0
 8005224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005226:	449b      	add	fp, r3
 8005228:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800522a:	b113      	cbz	r3, 8005232 <_svfprintf_r+0x526>
 800522c:	232d      	movs	r3, #45	; 0x2d
 800522e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005232:	2600      	movs	r6, #0
 8005234:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005236:	455e      	cmp	r6, fp
 8005238:	4633      	mov	r3, r6
 800523a:	bfb8      	it	lt
 800523c:	465b      	movlt	r3, fp
 800523e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005240:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8005244:	b113      	cbz	r3, 800524c <_svfprintf_r+0x540>
 8005246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005248:	3301      	adds	r3, #1
 800524a:	930f      	str	r3, [sp, #60]	; 0x3c
 800524c:	f015 0302 	ands.w	r3, r5, #2
 8005250:	9316      	str	r3, [sp, #88]	; 0x58
 8005252:	bf1e      	ittt	ne
 8005254:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8005256:	3302      	addne	r3, #2
 8005258:	930f      	strne	r3, [sp, #60]	; 0x3c
 800525a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800525e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005260:	d118      	bne.n	8005294 <_svfprintf_r+0x588>
 8005262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	9310      	str	r3, [sp, #64]	; 0x40
 800526c:	dd12      	ble.n	8005294 <_svfprintf_r+0x588>
 800526e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005270:	2b10      	cmp	r3, #16
 8005272:	4bab      	ldr	r3, [pc, #684]	; (8005520 <_svfprintf_r+0x814>)
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	f300 81d9 	bgt.w	800562c <_svfprintf_r+0x920>
 800527a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800527c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800527e:	6063      	str	r3, [r4, #4]
 8005280:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005282:	4413      	add	r3, r2
 8005284:	9323      	str	r3, [sp, #140]	; 0x8c
 8005286:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005288:	3301      	adds	r3, #1
 800528a:	2b07      	cmp	r3, #7
 800528c:	9322      	str	r3, [sp, #136]	; 0x88
 800528e:	f300 81e6 	bgt.w	800565e <_svfprintf_r+0x952>
 8005292:	3408      	adds	r4, #8
 8005294:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8005298:	b173      	cbz	r3, 80052b8 <_svfprintf_r+0x5ac>
 800529a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800529e:	6023      	str	r3, [r4, #0]
 80052a0:	2301      	movs	r3, #1
 80052a2:	6063      	str	r3, [r4, #4]
 80052a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052a6:	3301      	adds	r3, #1
 80052a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80052aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052ac:	3301      	adds	r3, #1
 80052ae:	2b07      	cmp	r3, #7
 80052b0:	9322      	str	r3, [sp, #136]	; 0x88
 80052b2:	f300 81de 	bgt.w	8005672 <_svfprintf_r+0x966>
 80052b6:	3408      	adds	r4, #8
 80052b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052ba:	b16b      	cbz	r3, 80052d8 <_svfprintf_r+0x5cc>
 80052bc:	ab1a      	add	r3, sp, #104	; 0x68
 80052be:	6023      	str	r3, [r4, #0]
 80052c0:	2302      	movs	r3, #2
 80052c2:	6063      	str	r3, [r4, #4]
 80052c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052c6:	3302      	adds	r3, #2
 80052c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80052ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052cc:	3301      	adds	r3, #1
 80052ce:	2b07      	cmp	r3, #7
 80052d0:	9322      	str	r3, [sp, #136]	; 0x88
 80052d2:	f300 81d8 	bgt.w	8005686 <_svfprintf_r+0x97a>
 80052d6:	3408      	adds	r4, #8
 80052d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052da:	2b80      	cmp	r3, #128	; 0x80
 80052dc:	d118      	bne.n	8005310 <_svfprintf_r+0x604>
 80052de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	9310      	str	r3, [sp, #64]	; 0x40
 80052e8:	dd12      	ble.n	8005310 <_svfprintf_r+0x604>
 80052ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	4b8d      	ldr	r3, [pc, #564]	; (8005524 <_svfprintf_r+0x818>)
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	f300 81d2 	bgt.w	800569a <_svfprintf_r+0x98e>
 80052f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052fa:	6063      	str	r3, [r4, #4]
 80052fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052fe:	4413      	add	r3, r2
 8005300:	9323      	str	r3, [sp, #140]	; 0x8c
 8005302:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005304:	3301      	adds	r3, #1
 8005306:	2b07      	cmp	r3, #7
 8005308:	9322      	str	r3, [sp, #136]	; 0x88
 800530a:	f300 81df 	bgt.w	80056cc <_svfprintf_r+0x9c0>
 800530e:	3408      	adds	r4, #8
 8005310:	eba6 060b 	sub.w	r6, r6, fp
 8005314:	2e00      	cmp	r6, #0
 8005316:	dd0f      	ble.n	8005338 <_svfprintf_r+0x62c>
 8005318:	4b82      	ldr	r3, [pc, #520]	; (8005524 <_svfprintf_r+0x818>)
 800531a:	2e10      	cmp	r6, #16
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	f300 81df 	bgt.w	80056e0 <_svfprintf_r+0x9d4>
 8005322:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005324:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005326:	3301      	adds	r3, #1
 8005328:	6066      	str	r6, [r4, #4]
 800532a:	2b07      	cmp	r3, #7
 800532c:	4406      	add	r6, r0
 800532e:	9623      	str	r6, [sp, #140]	; 0x8c
 8005330:	9322      	str	r3, [sp, #136]	; 0x88
 8005332:	f300 81ec 	bgt.w	800570e <_svfprintf_r+0xa02>
 8005336:	3408      	adds	r4, #8
 8005338:	05eb      	lsls	r3, r5, #23
 800533a:	f100 81f2 	bmi.w	8005722 <_svfprintf_r+0xa16>
 800533e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005340:	e884 0900 	stmia.w	r4, {r8, fp}
 8005344:	445b      	add	r3, fp
 8005346:	9323      	str	r3, [sp, #140]	; 0x8c
 8005348:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800534a:	3301      	adds	r3, #1
 800534c:	2b07      	cmp	r3, #7
 800534e:	9322      	str	r3, [sp, #136]	; 0x88
 8005350:	f340 8419 	ble.w	8005b86 <_svfprintf_r+0xe7a>
 8005354:	aa21      	add	r2, sp, #132	; 0x84
 8005356:	4649      	mov	r1, r9
 8005358:	4650      	mov	r0, sl
 800535a:	f002 f827 	bl	80073ac <__ssprint_r>
 800535e:	2800      	cmp	r0, #0
 8005360:	f040 8431 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8005364:	ac2e      	add	r4, sp, #184	; 0xb8
 8005366:	076b      	lsls	r3, r5, #29
 8005368:	f100 8410 	bmi.w	8005b8c <_svfprintf_r+0xe80>
 800536c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800536e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005370:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005372:	428a      	cmp	r2, r1
 8005374:	bfac      	ite	ge
 8005376:	189b      	addge	r3, r3, r2
 8005378:	185b      	addlt	r3, r3, r1
 800537a:	930b      	str	r3, [sp, #44]	; 0x2c
 800537c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800537e:	b13b      	cbz	r3, 8005390 <_svfprintf_r+0x684>
 8005380:	aa21      	add	r2, sp, #132	; 0x84
 8005382:	4649      	mov	r1, r9
 8005384:	4650      	mov	r0, sl
 8005386:	f002 f811 	bl	80073ac <__ssprint_r>
 800538a:	2800      	cmp	r0, #0
 800538c:	f040 841b 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8005390:	2300      	movs	r3, #0
 8005392:	9f08      	ldr	r7, [sp, #32]
 8005394:	9322      	str	r3, [sp, #136]	; 0x88
 8005396:	ac2e      	add	r4, sp, #184	; 0xb8
 8005398:	e4f2      	b.n	8004d80 <_svfprintf_r+0x74>
 800539a:	9b06      	ldr	r3, [sp, #24]
 800539c:	2b65      	cmp	r3, #101	; 0x65
 800539e:	f77f af05 	ble.w	80051ac <_svfprintf_r+0x4a0>
 80053a2:	9b06      	ldr	r3, [sp, #24]
 80053a4:	2b66      	cmp	r3, #102	; 0x66
 80053a6:	d124      	bne.n	80053f2 <_svfprintf_r+0x6e6>
 80053a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	dd19      	ble.n	80053e2 <_svfprintf_r+0x6d6>
 80053ae:	f1bb 0f00 	cmp.w	fp, #0
 80053b2:	d101      	bne.n	80053b8 <_svfprintf_r+0x6ac>
 80053b4:	07ea      	lsls	r2, r5, #31
 80053b6:	d502      	bpl.n	80053be <_svfprintf_r+0x6b2>
 80053b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ba:	4413      	add	r3, r2
 80053bc:	445b      	add	r3, fp
 80053be:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80053c0:	469b      	mov	fp, r3
 80053c2:	e731      	b.n	8005228 <_svfprintf_r+0x51c>
 80053c4:	460a      	mov	r2, r1
 80053c6:	e707      	b.n	80051d8 <_svfprintf_r+0x4cc>
 80053c8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80053cc:	f803 1b01 	strb.w	r1, [r3], #1
 80053d0:	e718      	b.n	8005204 <_svfprintf_r+0x4f8>
 80053d2:	2230      	movs	r2, #48	; 0x30
 80053d4:	4413      	add	r3, r2
 80053d6:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 80053da:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80053de:	a91e      	add	r1, sp, #120	; 0x78
 80053e0:	e714      	b.n	800520c <_svfprintf_r+0x500>
 80053e2:	f1bb 0f00 	cmp.w	fp, #0
 80053e6:	d101      	bne.n	80053ec <_svfprintf_r+0x6e0>
 80053e8:	07eb      	lsls	r3, r5, #31
 80053ea:	d515      	bpl.n	8005418 <_svfprintf_r+0x70c>
 80053ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ee:	3301      	adds	r3, #1
 80053f0:	e7e4      	b.n	80053bc <_svfprintf_r+0x6b0>
 80053f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80053f4:	9b07      	ldr	r3, [sp, #28]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	db06      	blt.n	8005408 <_svfprintf_r+0x6fc>
 80053fa:	07ef      	lsls	r7, r5, #31
 80053fc:	d50e      	bpl.n	800541c <_svfprintf_r+0x710>
 80053fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005400:	4413      	add	r3, r2
 8005402:	2267      	movs	r2, #103	; 0x67
 8005404:	9206      	str	r2, [sp, #24]
 8005406:	e7da      	b.n	80053be <_svfprintf_r+0x6b2>
 8005408:	9b07      	ldr	r3, [sp, #28]
 800540a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800540c:	2a00      	cmp	r2, #0
 800540e:	440b      	add	r3, r1
 8005410:	dcf7      	bgt.n	8005402 <_svfprintf_r+0x6f6>
 8005412:	f1c2 0201 	rsb	r2, r2, #1
 8005416:	e7f3      	b.n	8005400 <_svfprintf_r+0x6f4>
 8005418:	2301      	movs	r3, #1
 800541a:	e7d0      	b.n	80053be <_svfprintf_r+0x6b2>
 800541c:	4613      	mov	r3, r2
 800541e:	e7f0      	b.n	8005402 <_svfprintf_r+0x6f6>
 8005420:	b10b      	cbz	r3, 8005426 <_svfprintf_r+0x71a>
 8005422:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005426:	f015 0f20 	tst.w	r5, #32
 800542a:	f107 0304 	add.w	r3, r7, #4
 800542e:	d008      	beq.n	8005442 <_svfprintf_r+0x736>
 8005430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	17ce      	asrs	r6, r1, #31
 8005436:	4608      	mov	r0, r1
 8005438:	4631      	mov	r1, r6
 800543a:	e9c2 0100 	strd	r0, r1, [r2]
 800543e:	461f      	mov	r7, r3
 8005440:	e49e      	b.n	8004d80 <_svfprintf_r+0x74>
 8005442:	06ee      	lsls	r6, r5, #27
 8005444:	d503      	bpl.n	800544e <_svfprintf_r+0x742>
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800544a:	6011      	str	r1, [r2, #0]
 800544c:	e7f7      	b.n	800543e <_svfprintf_r+0x732>
 800544e:	0668      	lsls	r0, r5, #25
 8005450:	d5f9      	bpl.n	8005446 <_svfprintf_r+0x73a>
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8005458:	8011      	strh	r1, [r2, #0]
 800545a:	e7f0      	b.n	800543e <_svfprintf_r+0x732>
 800545c:	f045 0510 	orr.w	r5, r5, #16
 8005460:	f015 0320 	ands.w	r3, r5, #32
 8005464:	d022      	beq.n	80054ac <_svfprintf_r+0x7a0>
 8005466:	3707      	adds	r7, #7
 8005468:	f027 0707 	bic.w	r7, r7, #7
 800546c:	f107 0308 	add.w	r3, r7, #8
 8005470:	9308      	str	r3, [sp, #32]
 8005472:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005476:	2300      	movs	r3, #0
 8005478:	2200      	movs	r2, #0
 800547a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800547e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005482:	f000 83db 	beq.w	8005c3c <_svfprintf_r+0xf30>
 8005486:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800548a:	920f      	str	r2, [sp, #60]	; 0x3c
 800548c:	ea56 0207 	orrs.w	r2, r6, r7
 8005490:	f040 83d9 	bne.w	8005c46 <_svfprintf_r+0xf3a>
 8005494:	f1bb 0f00 	cmp.w	fp, #0
 8005498:	f000 80aa 	beq.w	80055f0 <_svfprintf_r+0x8e4>
 800549c:	2b01      	cmp	r3, #1
 800549e:	d076      	beq.n	800558e <_svfprintf_r+0x882>
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	f000 8091 	beq.w	80055c8 <_svfprintf_r+0x8bc>
 80054a6:	2600      	movs	r6, #0
 80054a8:	2700      	movs	r7, #0
 80054aa:	e3d2      	b.n	8005c52 <_svfprintf_r+0xf46>
 80054ac:	1d3a      	adds	r2, r7, #4
 80054ae:	f015 0110 	ands.w	r1, r5, #16
 80054b2:	9208      	str	r2, [sp, #32]
 80054b4:	d002      	beq.n	80054bc <_svfprintf_r+0x7b0>
 80054b6:	683e      	ldr	r6, [r7, #0]
 80054b8:	2700      	movs	r7, #0
 80054ba:	e7dd      	b.n	8005478 <_svfprintf_r+0x76c>
 80054bc:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80054c0:	d0f9      	beq.n	80054b6 <_svfprintf_r+0x7aa>
 80054c2:	883e      	ldrh	r6, [r7, #0]
 80054c4:	2700      	movs	r7, #0
 80054c6:	e7d6      	b.n	8005476 <_svfprintf_r+0x76a>
 80054c8:	1d3b      	adds	r3, r7, #4
 80054ca:	9308      	str	r3, [sp, #32]
 80054cc:	2330      	movs	r3, #48	; 0x30
 80054ce:	2278      	movs	r2, #120	; 0x78
 80054d0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <_svfprintf_r+0x81c>)
 80054d6:	683e      	ldr	r6, [r7, #0]
 80054d8:	9315      	str	r3, [sp, #84]	; 0x54
 80054da:	2700      	movs	r7, #0
 80054dc:	f045 0502 	orr.w	r5, r5, #2
 80054e0:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80054e4:	2302      	movs	r3, #2
 80054e6:	9206      	str	r2, [sp, #24]
 80054e8:	e7c6      	b.n	8005478 <_svfprintf_r+0x76c>
 80054ea:	2600      	movs	r6, #0
 80054ec:	1d3b      	adds	r3, r7, #4
 80054ee:	f1bb 3fff 	cmp.w	fp, #4294967295
 80054f2:	9308      	str	r3, [sp, #32]
 80054f4:	f8d7 8000 	ldr.w	r8, [r7]
 80054f8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80054fc:	d00a      	beq.n	8005514 <_svfprintf_r+0x808>
 80054fe:	465a      	mov	r2, fp
 8005500:	4631      	mov	r1, r6
 8005502:	4640      	mov	r0, r8
 8005504:	f001 fc56 	bl	8006db4 <memchr>
 8005508:	2800      	cmp	r0, #0
 800550a:	f000 808d 	beq.w	8005628 <_svfprintf_r+0x91c>
 800550e:	eba0 0b08 	sub.w	fp, r0, r8
 8005512:	e5c4      	b.n	800509e <_svfprintf_r+0x392>
 8005514:	4640      	mov	r0, r8
 8005516:	f7fa fe1b 	bl	8000150 <strlen>
 800551a:	4683      	mov	fp, r0
 800551c:	e5bf      	b.n	800509e <_svfprintf_r+0x392>
 800551e:	bf00      	nop
 8005520:	08007b57 	.word	0x08007b57
 8005524:	08007b67 	.word	0x08007b67
 8005528:	08007b44 	.word	0x08007b44
 800552c:	f045 0510 	orr.w	r5, r5, #16
 8005530:	06a9      	lsls	r1, r5, #26
 8005532:	d509      	bpl.n	8005548 <_svfprintf_r+0x83c>
 8005534:	3707      	adds	r7, #7
 8005536:	f027 0707 	bic.w	r7, r7, #7
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	9308      	str	r3, [sp, #32]
 8005540:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005544:	2301      	movs	r3, #1
 8005546:	e797      	b.n	8005478 <_svfprintf_r+0x76c>
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	f015 0f10 	tst.w	r5, #16
 800554e:	9308      	str	r3, [sp, #32]
 8005550:	d001      	beq.n	8005556 <_svfprintf_r+0x84a>
 8005552:	683e      	ldr	r6, [r7, #0]
 8005554:	e002      	b.n	800555c <_svfprintf_r+0x850>
 8005556:	066a      	lsls	r2, r5, #25
 8005558:	d5fb      	bpl.n	8005552 <_svfprintf_r+0x846>
 800555a:	883e      	ldrh	r6, [r7, #0]
 800555c:	2700      	movs	r7, #0
 800555e:	e7f1      	b.n	8005544 <_svfprintf_r+0x838>
 8005560:	b10b      	cbz	r3, 8005566 <_svfprintf_r+0x85a>
 8005562:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005566:	4ba3      	ldr	r3, [pc, #652]	; (80057f4 <_svfprintf_r+0xae8>)
 8005568:	e4c5      	b.n	8004ef6 <_svfprintf_r+0x1ea>
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	f015 0f10 	tst.w	r5, #16
 8005570:	9308      	str	r3, [sp, #32]
 8005572:	d001      	beq.n	8005578 <_svfprintf_r+0x86c>
 8005574:	683e      	ldr	r6, [r7, #0]
 8005576:	e002      	b.n	800557e <_svfprintf_r+0x872>
 8005578:	066e      	lsls	r6, r5, #25
 800557a:	d5fb      	bpl.n	8005574 <_svfprintf_r+0x868>
 800557c:	883e      	ldrh	r6, [r7, #0]
 800557e:	2700      	movs	r7, #0
 8005580:	e4c5      	b.n	8004f0e <_svfprintf_r+0x202>
 8005582:	4643      	mov	r3, r8
 8005584:	e366      	b.n	8005c54 <_svfprintf_r+0xf48>
 8005586:	2f00      	cmp	r7, #0
 8005588:	bf08      	it	eq
 800558a:	2e0a      	cmpeq	r6, #10
 800558c:	d205      	bcs.n	800559a <_svfprintf_r+0x88e>
 800558e:	3630      	adds	r6, #48	; 0x30
 8005590:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8005594:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005598:	e377      	b.n	8005c8a <_svfprintf_r+0xf7e>
 800559a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800559e:	4630      	mov	r0, r6
 80055a0:	4639      	mov	r1, r7
 80055a2:	220a      	movs	r2, #10
 80055a4:	2300      	movs	r3, #0
 80055a6:	f7fb fa6b 	bl	8000a80 <__aeabi_uldivmod>
 80055aa:	3230      	adds	r2, #48	; 0x30
 80055ac:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80055b0:	2300      	movs	r3, #0
 80055b2:	4630      	mov	r0, r6
 80055b4:	4639      	mov	r1, r7
 80055b6:	220a      	movs	r2, #10
 80055b8:	f7fb fa62 	bl	8000a80 <__aeabi_uldivmod>
 80055bc:	4606      	mov	r6, r0
 80055be:	460f      	mov	r7, r1
 80055c0:	ea56 0307 	orrs.w	r3, r6, r7
 80055c4:	d1eb      	bne.n	800559e <_svfprintf_r+0x892>
 80055c6:	e360      	b.n	8005c8a <_svfprintf_r+0xf7e>
 80055c8:	2600      	movs	r6, #0
 80055ca:	2700      	movs	r7, #0
 80055cc:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80055d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80055d2:	f006 030f 	and.w	r3, r6, #15
 80055d6:	5cd3      	ldrb	r3, [r2, r3]
 80055d8:	093a      	lsrs	r2, r7, #4
 80055da:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80055de:	0933      	lsrs	r3, r6, #4
 80055e0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80055e4:	461e      	mov	r6, r3
 80055e6:	4617      	mov	r7, r2
 80055e8:	ea56 0307 	orrs.w	r3, r6, r7
 80055ec:	d1f0      	bne.n	80055d0 <_svfprintf_r+0x8c4>
 80055ee:	e34c      	b.n	8005c8a <_svfprintf_r+0xf7e>
 80055f0:	b93b      	cbnz	r3, 8005602 <_svfprintf_r+0x8f6>
 80055f2:	07ea      	lsls	r2, r5, #31
 80055f4:	d505      	bpl.n	8005602 <_svfprintf_r+0x8f6>
 80055f6:	2330      	movs	r3, #48	; 0x30
 80055f8:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80055fc:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005600:	e343      	b.n	8005c8a <_svfprintf_r+0xf7e>
 8005602:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005606:	e340      	b.n	8005c8a <_svfprintf_r+0xf7e>
 8005608:	b10b      	cbz	r3, 800560e <_svfprintf_r+0x902>
 800560a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800560e:	9b06      	ldr	r3, [sp, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 82f7 	beq.w	8005c04 <_svfprintf_r+0xef8>
 8005616:	2600      	movs	r6, #0
 8005618:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800561c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005620:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8005624:	9708      	str	r7, [sp, #32]
 8005626:	e4e3      	b.n	8004ff0 <_svfprintf_r+0x2e4>
 8005628:	4606      	mov	r6, r0
 800562a:	e538      	b.n	800509e <_svfprintf_r+0x392>
 800562c:	2310      	movs	r3, #16
 800562e:	6063      	str	r3, [r4, #4]
 8005630:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005632:	3310      	adds	r3, #16
 8005634:	9323      	str	r3, [sp, #140]	; 0x8c
 8005636:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005638:	3301      	adds	r3, #1
 800563a:	2b07      	cmp	r3, #7
 800563c:	9322      	str	r3, [sp, #136]	; 0x88
 800563e:	dc04      	bgt.n	800564a <_svfprintf_r+0x93e>
 8005640:	3408      	adds	r4, #8
 8005642:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005644:	3b10      	subs	r3, #16
 8005646:	9310      	str	r3, [sp, #64]	; 0x40
 8005648:	e611      	b.n	800526e <_svfprintf_r+0x562>
 800564a:	aa21      	add	r2, sp, #132	; 0x84
 800564c:	4649      	mov	r1, r9
 800564e:	4650      	mov	r0, sl
 8005650:	f001 feac 	bl	80073ac <__ssprint_r>
 8005654:	2800      	cmp	r0, #0
 8005656:	f040 82b6 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 800565a:	ac2e      	add	r4, sp, #184	; 0xb8
 800565c:	e7f1      	b.n	8005642 <_svfprintf_r+0x936>
 800565e:	aa21      	add	r2, sp, #132	; 0x84
 8005660:	4649      	mov	r1, r9
 8005662:	4650      	mov	r0, sl
 8005664:	f001 fea2 	bl	80073ac <__ssprint_r>
 8005668:	2800      	cmp	r0, #0
 800566a:	f040 82ac 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 800566e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005670:	e610      	b.n	8005294 <_svfprintf_r+0x588>
 8005672:	aa21      	add	r2, sp, #132	; 0x84
 8005674:	4649      	mov	r1, r9
 8005676:	4650      	mov	r0, sl
 8005678:	f001 fe98 	bl	80073ac <__ssprint_r>
 800567c:	2800      	cmp	r0, #0
 800567e:	f040 82a2 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8005682:	ac2e      	add	r4, sp, #184	; 0xb8
 8005684:	e618      	b.n	80052b8 <_svfprintf_r+0x5ac>
 8005686:	aa21      	add	r2, sp, #132	; 0x84
 8005688:	4649      	mov	r1, r9
 800568a:	4650      	mov	r0, sl
 800568c:	f001 fe8e 	bl	80073ac <__ssprint_r>
 8005690:	2800      	cmp	r0, #0
 8005692:	f040 8298 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8005696:	ac2e      	add	r4, sp, #184	; 0xb8
 8005698:	e61e      	b.n	80052d8 <_svfprintf_r+0x5cc>
 800569a:	2310      	movs	r3, #16
 800569c:	6063      	str	r3, [r4, #4]
 800569e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056a0:	3310      	adds	r3, #16
 80056a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80056a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056a6:	3301      	adds	r3, #1
 80056a8:	2b07      	cmp	r3, #7
 80056aa:	9322      	str	r3, [sp, #136]	; 0x88
 80056ac:	dc04      	bgt.n	80056b8 <_svfprintf_r+0x9ac>
 80056ae:	3408      	adds	r4, #8
 80056b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056b2:	3b10      	subs	r3, #16
 80056b4:	9310      	str	r3, [sp, #64]	; 0x40
 80056b6:	e618      	b.n	80052ea <_svfprintf_r+0x5de>
 80056b8:	aa21      	add	r2, sp, #132	; 0x84
 80056ba:	4649      	mov	r1, r9
 80056bc:	4650      	mov	r0, sl
 80056be:	f001 fe75 	bl	80073ac <__ssprint_r>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	f040 827f 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 80056c8:	ac2e      	add	r4, sp, #184	; 0xb8
 80056ca:	e7f1      	b.n	80056b0 <_svfprintf_r+0x9a4>
 80056cc:	aa21      	add	r2, sp, #132	; 0x84
 80056ce:	4649      	mov	r1, r9
 80056d0:	4650      	mov	r0, sl
 80056d2:	f001 fe6b 	bl	80073ac <__ssprint_r>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f040 8275 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 80056dc:	ac2e      	add	r4, sp, #184	; 0xb8
 80056de:	e617      	b.n	8005310 <_svfprintf_r+0x604>
 80056e0:	2310      	movs	r3, #16
 80056e2:	6063      	str	r3, [r4, #4]
 80056e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056e6:	3310      	adds	r3, #16
 80056e8:	9323      	str	r3, [sp, #140]	; 0x8c
 80056ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ec:	3301      	adds	r3, #1
 80056ee:	2b07      	cmp	r3, #7
 80056f0:	9322      	str	r3, [sp, #136]	; 0x88
 80056f2:	dc02      	bgt.n	80056fa <_svfprintf_r+0x9ee>
 80056f4:	3408      	adds	r4, #8
 80056f6:	3e10      	subs	r6, #16
 80056f8:	e60e      	b.n	8005318 <_svfprintf_r+0x60c>
 80056fa:	aa21      	add	r2, sp, #132	; 0x84
 80056fc:	4649      	mov	r1, r9
 80056fe:	4650      	mov	r0, sl
 8005700:	f001 fe54 	bl	80073ac <__ssprint_r>
 8005704:	2800      	cmp	r0, #0
 8005706:	f040 825e 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 800570a:	ac2e      	add	r4, sp, #184	; 0xb8
 800570c:	e7f3      	b.n	80056f6 <_svfprintf_r+0x9ea>
 800570e:	aa21      	add	r2, sp, #132	; 0x84
 8005710:	4649      	mov	r1, r9
 8005712:	4650      	mov	r0, sl
 8005714:	f001 fe4a 	bl	80073ac <__ssprint_r>
 8005718:	2800      	cmp	r0, #0
 800571a:	f040 8254 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 800571e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005720:	e60a      	b.n	8005338 <_svfprintf_r+0x62c>
 8005722:	9b06      	ldr	r3, [sp, #24]
 8005724:	2b65      	cmp	r3, #101	; 0x65
 8005726:	f340 81a9 	ble.w	8005a7c <_svfprintf_r+0xd70>
 800572a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800572c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800572e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005730:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005732:	f7fb f935 	bl	80009a0 <__aeabi_dcmpeq>
 8005736:	2800      	cmp	r0, #0
 8005738:	d062      	beq.n	8005800 <_svfprintf_r+0xaf4>
 800573a:	4b2f      	ldr	r3, [pc, #188]	; (80057f8 <_svfprintf_r+0xaec>)
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	2301      	movs	r3, #1
 8005740:	6063      	str	r3, [r4, #4]
 8005742:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005744:	3301      	adds	r3, #1
 8005746:	9323      	str	r3, [sp, #140]	; 0x8c
 8005748:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800574a:	3301      	adds	r3, #1
 800574c:	2b07      	cmp	r3, #7
 800574e:	9322      	str	r3, [sp, #136]	; 0x88
 8005750:	dc25      	bgt.n	800579e <_svfprintf_r+0xa92>
 8005752:	3408      	adds	r4, #8
 8005754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005756:	9a07      	ldr	r2, [sp, #28]
 8005758:	4293      	cmp	r3, r2
 800575a:	db02      	blt.n	8005762 <_svfprintf_r+0xa56>
 800575c:	07ee      	lsls	r6, r5, #31
 800575e:	f57f ae02 	bpl.w	8005366 <_svfprintf_r+0x65a>
 8005762:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800576a:	6063      	str	r3, [r4, #4]
 800576c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800576e:	4413      	add	r3, r2
 8005770:	9323      	str	r3, [sp, #140]	; 0x8c
 8005772:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005774:	3301      	adds	r3, #1
 8005776:	2b07      	cmp	r3, #7
 8005778:	9322      	str	r3, [sp, #136]	; 0x88
 800577a:	dc1a      	bgt.n	80057b2 <_svfprintf_r+0xaa6>
 800577c:	3408      	adds	r4, #8
 800577e:	9b07      	ldr	r3, [sp, #28]
 8005780:	1e5e      	subs	r6, r3, #1
 8005782:	2e00      	cmp	r6, #0
 8005784:	f77f adef 	ble.w	8005366 <_svfprintf_r+0x65a>
 8005788:	f04f 0810 	mov.w	r8, #16
 800578c:	4f1b      	ldr	r7, [pc, #108]	; (80057fc <_svfprintf_r+0xaf0>)
 800578e:	2e10      	cmp	r6, #16
 8005790:	6027      	str	r7, [r4, #0]
 8005792:	dc18      	bgt.n	80057c6 <_svfprintf_r+0xaba>
 8005794:	6066      	str	r6, [r4, #4]
 8005796:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005798:	441e      	add	r6, r3
 800579a:	9623      	str	r6, [sp, #140]	; 0x8c
 800579c:	e5d4      	b.n	8005348 <_svfprintf_r+0x63c>
 800579e:	aa21      	add	r2, sp, #132	; 0x84
 80057a0:	4649      	mov	r1, r9
 80057a2:	4650      	mov	r0, sl
 80057a4:	f001 fe02 	bl	80073ac <__ssprint_r>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	f040 820c 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 80057ae:	ac2e      	add	r4, sp, #184	; 0xb8
 80057b0:	e7d0      	b.n	8005754 <_svfprintf_r+0xa48>
 80057b2:	aa21      	add	r2, sp, #132	; 0x84
 80057b4:	4649      	mov	r1, r9
 80057b6:	4650      	mov	r0, sl
 80057b8:	f001 fdf8 	bl	80073ac <__ssprint_r>
 80057bc:	2800      	cmp	r0, #0
 80057be:	f040 8202 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 80057c2:	ac2e      	add	r4, sp, #184	; 0xb8
 80057c4:	e7db      	b.n	800577e <_svfprintf_r+0xa72>
 80057c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057c8:	f8c4 8004 	str.w	r8, [r4, #4]
 80057cc:	3310      	adds	r3, #16
 80057ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80057d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057d2:	3301      	adds	r3, #1
 80057d4:	2b07      	cmp	r3, #7
 80057d6:	9322      	str	r3, [sp, #136]	; 0x88
 80057d8:	dc02      	bgt.n	80057e0 <_svfprintf_r+0xad4>
 80057da:	3408      	adds	r4, #8
 80057dc:	3e10      	subs	r6, #16
 80057de:	e7d6      	b.n	800578e <_svfprintf_r+0xa82>
 80057e0:	aa21      	add	r2, sp, #132	; 0x84
 80057e2:	4649      	mov	r1, r9
 80057e4:	4650      	mov	r0, sl
 80057e6:	f001 fde1 	bl	80073ac <__ssprint_r>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	f040 81eb 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 80057f0:	ac2e      	add	r4, sp, #184	; 0xb8
 80057f2:	e7f3      	b.n	80057dc <_svfprintf_r+0xad0>
 80057f4:	08007b44 	.word	0x08007b44
 80057f8:	08007b55 	.word	0x08007b55
 80057fc:	08007b67 	.word	0x08007b67
 8005800:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005802:	2b00      	cmp	r3, #0
 8005804:	dc7a      	bgt.n	80058fc <_svfprintf_r+0xbf0>
 8005806:	4b9b      	ldr	r3, [pc, #620]	; (8005a74 <_svfprintf_r+0xd68>)
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	2301      	movs	r3, #1
 800580c:	6063      	str	r3, [r4, #4]
 800580e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005810:	3301      	adds	r3, #1
 8005812:	9323      	str	r3, [sp, #140]	; 0x8c
 8005814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005816:	3301      	adds	r3, #1
 8005818:	2b07      	cmp	r3, #7
 800581a:	9322      	str	r3, [sp, #136]	; 0x88
 800581c:	dc44      	bgt.n	80058a8 <_svfprintf_r+0xb9c>
 800581e:	3408      	adds	r4, #8
 8005820:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005822:	b923      	cbnz	r3, 800582e <_svfprintf_r+0xb22>
 8005824:	9b07      	ldr	r3, [sp, #28]
 8005826:	b913      	cbnz	r3, 800582e <_svfprintf_r+0xb22>
 8005828:	07e8      	lsls	r0, r5, #31
 800582a:	f57f ad9c 	bpl.w	8005366 <_svfprintf_r+0x65a>
 800582e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800583a:	4413      	add	r3, r2
 800583c:	9323      	str	r3, [sp, #140]	; 0x8c
 800583e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005840:	3301      	adds	r3, #1
 8005842:	2b07      	cmp	r3, #7
 8005844:	9322      	str	r3, [sp, #136]	; 0x88
 8005846:	dc39      	bgt.n	80058bc <_svfprintf_r+0xbb0>
 8005848:	f104 0308 	add.w	r3, r4, #8
 800584c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800584e:	2e00      	cmp	r6, #0
 8005850:	da19      	bge.n	8005886 <_svfprintf_r+0xb7a>
 8005852:	2410      	movs	r4, #16
 8005854:	4f88      	ldr	r7, [pc, #544]	; (8005a78 <_svfprintf_r+0xd6c>)
 8005856:	4276      	negs	r6, r6
 8005858:	2e10      	cmp	r6, #16
 800585a:	601f      	str	r7, [r3, #0]
 800585c:	dc38      	bgt.n	80058d0 <_svfprintf_r+0xbc4>
 800585e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005860:	605e      	str	r6, [r3, #4]
 8005862:	4416      	add	r6, r2
 8005864:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005866:	9623      	str	r6, [sp, #140]	; 0x8c
 8005868:	3201      	adds	r2, #1
 800586a:	2a07      	cmp	r2, #7
 800586c:	f103 0308 	add.w	r3, r3, #8
 8005870:	9222      	str	r2, [sp, #136]	; 0x88
 8005872:	dd08      	ble.n	8005886 <_svfprintf_r+0xb7a>
 8005874:	aa21      	add	r2, sp, #132	; 0x84
 8005876:	4649      	mov	r1, r9
 8005878:	4650      	mov	r0, sl
 800587a:	f001 fd97 	bl	80073ac <__ssprint_r>
 800587e:	2800      	cmp	r0, #0
 8005880:	f040 81a1 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8005884:	ab2e      	add	r3, sp, #184	; 0xb8
 8005886:	9a07      	ldr	r2, [sp, #28]
 8005888:	9907      	ldr	r1, [sp, #28]
 800588a:	605a      	str	r2, [r3, #4]
 800588c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800588e:	f8c3 8000 	str.w	r8, [r3]
 8005892:	440a      	add	r2, r1
 8005894:	9223      	str	r2, [sp, #140]	; 0x8c
 8005896:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005898:	3201      	adds	r2, #1
 800589a:	2a07      	cmp	r2, #7
 800589c:	9222      	str	r2, [sp, #136]	; 0x88
 800589e:	f73f ad59 	bgt.w	8005354 <_svfprintf_r+0x648>
 80058a2:	f103 0408 	add.w	r4, r3, #8
 80058a6:	e55e      	b.n	8005366 <_svfprintf_r+0x65a>
 80058a8:	aa21      	add	r2, sp, #132	; 0x84
 80058aa:	4649      	mov	r1, r9
 80058ac:	4650      	mov	r0, sl
 80058ae:	f001 fd7d 	bl	80073ac <__ssprint_r>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	f040 8187 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 80058b8:	ac2e      	add	r4, sp, #184	; 0xb8
 80058ba:	e7b1      	b.n	8005820 <_svfprintf_r+0xb14>
 80058bc:	aa21      	add	r2, sp, #132	; 0x84
 80058be:	4649      	mov	r1, r9
 80058c0:	4650      	mov	r0, sl
 80058c2:	f001 fd73 	bl	80073ac <__ssprint_r>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	f040 817d 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 80058cc:	ab2e      	add	r3, sp, #184	; 0xb8
 80058ce:	e7bd      	b.n	800584c <_svfprintf_r+0xb40>
 80058d0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80058d2:	605c      	str	r4, [r3, #4]
 80058d4:	3210      	adds	r2, #16
 80058d6:	9223      	str	r2, [sp, #140]	; 0x8c
 80058d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80058da:	3201      	adds	r2, #1
 80058dc:	2a07      	cmp	r2, #7
 80058de:	9222      	str	r2, [sp, #136]	; 0x88
 80058e0:	dc02      	bgt.n	80058e8 <_svfprintf_r+0xbdc>
 80058e2:	3308      	adds	r3, #8
 80058e4:	3e10      	subs	r6, #16
 80058e6:	e7b7      	b.n	8005858 <_svfprintf_r+0xb4c>
 80058e8:	aa21      	add	r2, sp, #132	; 0x84
 80058ea:	4649      	mov	r1, r9
 80058ec:	4650      	mov	r0, sl
 80058ee:	f001 fd5d 	bl	80073ac <__ssprint_r>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	f040 8167 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 80058f8:	ab2e      	add	r3, sp, #184	; 0xb8
 80058fa:	e7f3      	b.n	80058e4 <_svfprintf_r+0xbd8>
 80058fc:	9b07      	ldr	r3, [sp, #28]
 80058fe:	42bb      	cmp	r3, r7
 8005900:	bfa8      	it	ge
 8005902:	463b      	movge	r3, r7
 8005904:	2b00      	cmp	r3, #0
 8005906:	461e      	mov	r6, r3
 8005908:	dd0b      	ble.n	8005922 <_svfprintf_r+0xc16>
 800590a:	6063      	str	r3, [r4, #4]
 800590c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800590e:	f8c4 8000 	str.w	r8, [r4]
 8005912:	4433      	add	r3, r6
 8005914:	9323      	str	r3, [sp, #140]	; 0x8c
 8005916:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005918:	3301      	adds	r3, #1
 800591a:	2b07      	cmp	r3, #7
 800591c:	9322      	str	r3, [sp, #136]	; 0x88
 800591e:	dc5f      	bgt.n	80059e0 <_svfprintf_r+0xcd4>
 8005920:	3408      	adds	r4, #8
 8005922:	2e00      	cmp	r6, #0
 8005924:	bfb4      	ite	lt
 8005926:	463e      	movlt	r6, r7
 8005928:	1bbe      	subge	r6, r7, r6
 800592a:	2e00      	cmp	r6, #0
 800592c:	dd0f      	ble.n	800594e <_svfprintf_r+0xc42>
 800592e:	f8df b148 	ldr.w	fp, [pc, #328]	; 8005a78 <_svfprintf_r+0xd6c>
 8005932:	2e10      	cmp	r6, #16
 8005934:	f8c4 b000 	str.w	fp, [r4]
 8005938:	dc5c      	bgt.n	80059f4 <_svfprintf_r+0xce8>
 800593a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800593c:	6066      	str	r6, [r4, #4]
 800593e:	441e      	add	r6, r3
 8005940:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005942:	9623      	str	r6, [sp, #140]	; 0x8c
 8005944:	3301      	adds	r3, #1
 8005946:	2b07      	cmp	r3, #7
 8005948:	9322      	str	r3, [sp, #136]	; 0x88
 800594a:	dc6a      	bgt.n	8005a22 <_svfprintf_r+0xd16>
 800594c:	3408      	adds	r4, #8
 800594e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005950:	9a07      	ldr	r2, [sp, #28]
 8005952:	4293      	cmp	r3, r2
 8005954:	db01      	blt.n	800595a <_svfprintf_r+0xc4e>
 8005956:	07e9      	lsls	r1, r5, #31
 8005958:	d50d      	bpl.n	8005976 <_svfprintf_r+0xc6a>
 800595a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800595c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005962:	6063      	str	r3, [r4, #4]
 8005964:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005966:	4413      	add	r3, r2
 8005968:	9323      	str	r3, [sp, #140]	; 0x8c
 800596a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800596c:	3301      	adds	r3, #1
 800596e:	2b07      	cmp	r3, #7
 8005970:	9322      	str	r3, [sp, #136]	; 0x88
 8005972:	dc60      	bgt.n	8005a36 <_svfprintf_r+0xd2a>
 8005974:	3408      	adds	r4, #8
 8005976:	9b07      	ldr	r3, [sp, #28]
 8005978:	9a07      	ldr	r2, [sp, #28]
 800597a:	1bde      	subs	r6, r3, r7
 800597c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	429e      	cmp	r6, r3
 8005982:	bfa8      	it	ge
 8005984:	461e      	movge	r6, r3
 8005986:	2e00      	cmp	r6, #0
 8005988:	dd0b      	ble.n	80059a2 <_svfprintf_r+0xc96>
 800598a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800598c:	4447      	add	r7, r8
 800598e:	4433      	add	r3, r6
 8005990:	9323      	str	r3, [sp, #140]	; 0x8c
 8005992:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005994:	6027      	str	r7, [r4, #0]
 8005996:	3301      	adds	r3, #1
 8005998:	2b07      	cmp	r3, #7
 800599a:	6066      	str	r6, [r4, #4]
 800599c:	9322      	str	r3, [sp, #136]	; 0x88
 800599e:	dc54      	bgt.n	8005a4a <_svfprintf_r+0xd3e>
 80059a0:	3408      	adds	r4, #8
 80059a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059a4:	9a07      	ldr	r2, [sp, #28]
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	eba2 0303 	sub.w	r3, r2, r3
 80059ac:	bfb4      	ite	lt
 80059ae:	461e      	movlt	r6, r3
 80059b0:	1b9e      	subge	r6, r3, r6
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	f77f acd7 	ble.w	8005366 <_svfprintf_r+0x65a>
 80059b8:	f04f 0810 	mov.w	r8, #16
 80059bc:	4f2e      	ldr	r7, [pc, #184]	; (8005a78 <_svfprintf_r+0xd6c>)
 80059be:	2e10      	cmp	r6, #16
 80059c0:	6027      	str	r7, [r4, #0]
 80059c2:	f77f aee7 	ble.w	8005794 <_svfprintf_r+0xa88>
 80059c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059c8:	f8c4 8004 	str.w	r8, [r4, #4]
 80059cc:	3310      	adds	r3, #16
 80059ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80059d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059d2:	3301      	adds	r3, #1
 80059d4:	2b07      	cmp	r3, #7
 80059d6:	9322      	str	r3, [sp, #136]	; 0x88
 80059d8:	dc41      	bgt.n	8005a5e <_svfprintf_r+0xd52>
 80059da:	3408      	adds	r4, #8
 80059dc:	3e10      	subs	r6, #16
 80059de:	e7ee      	b.n	80059be <_svfprintf_r+0xcb2>
 80059e0:	aa21      	add	r2, sp, #132	; 0x84
 80059e2:	4649      	mov	r1, r9
 80059e4:	4650      	mov	r0, sl
 80059e6:	f001 fce1 	bl	80073ac <__ssprint_r>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	f040 80eb 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 80059f0:	ac2e      	add	r4, sp, #184	; 0xb8
 80059f2:	e796      	b.n	8005922 <_svfprintf_r+0xc16>
 80059f4:	2310      	movs	r3, #16
 80059f6:	6063      	str	r3, [r4, #4]
 80059f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059fa:	3310      	adds	r3, #16
 80059fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80059fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a00:	3301      	adds	r3, #1
 8005a02:	2b07      	cmp	r3, #7
 8005a04:	9322      	str	r3, [sp, #136]	; 0x88
 8005a06:	dc02      	bgt.n	8005a0e <_svfprintf_r+0xd02>
 8005a08:	3408      	adds	r4, #8
 8005a0a:	3e10      	subs	r6, #16
 8005a0c:	e791      	b.n	8005932 <_svfprintf_r+0xc26>
 8005a0e:	aa21      	add	r2, sp, #132	; 0x84
 8005a10:	4649      	mov	r1, r9
 8005a12:	4650      	mov	r0, sl
 8005a14:	f001 fcca 	bl	80073ac <__ssprint_r>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	f040 80d4 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8005a1e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005a20:	e7f3      	b.n	8005a0a <_svfprintf_r+0xcfe>
 8005a22:	aa21      	add	r2, sp, #132	; 0x84
 8005a24:	4649      	mov	r1, r9
 8005a26:	4650      	mov	r0, sl
 8005a28:	f001 fcc0 	bl	80073ac <__ssprint_r>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	f040 80ca 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8005a32:	ac2e      	add	r4, sp, #184	; 0xb8
 8005a34:	e78b      	b.n	800594e <_svfprintf_r+0xc42>
 8005a36:	aa21      	add	r2, sp, #132	; 0x84
 8005a38:	4649      	mov	r1, r9
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	f001 fcb6 	bl	80073ac <__ssprint_r>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	f040 80c0 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8005a46:	ac2e      	add	r4, sp, #184	; 0xb8
 8005a48:	e795      	b.n	8005976 <_svfprintf_r+0xc6a>
 8005a4a:	aa21      	add	r2, sp, #132	; 0x84
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	4650      	mov	r0, sl
 8005a50:	f001 fcac 	bl	80073ac <__ssprint_r>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f040 80b6 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8005a5a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005a5c:	e7a1      	b.n	80059a2 <_svfprintf_r+0xc96>
 8005a5e:	aa21      	add	r2, sp, #132	; 0x84
 8005a60:	4649      	mov	r1, r9
 8005a62:	4650      	mov	r0, sl
 8005a64:	f001 fca2 	bl	80073ac <__ssprint_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	f040 80ac 	bne.w	8005bc6 <_svfprintf_r+0xeba>
 8005a6e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005a70:	e7b4      	b.n	80059dc <_svfprintf_r+0xcd0>
 8005a72:	bf00      	nop
 8005a74:	08007b55 	.word	0x08007b55
 8005a78:	08007b67 	.word	0x08007b67
 8005a7c:	9b07      	ldr	r3, [sp, #28]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	dc01      	bgt.n	8005a86 <_svfprintf_r+0xd7a>
 8005a82:	07ea      	lsls	r2, r5, #31
 8005a84:	d576      	bpl.n	8005b74 <_svfprintf_r+0xe68>
 8005a86:	2301      	movs	r3, #1
 8005a88:	6063      	str	r3, [r4, #4]
 8005a8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a8c:	f8c4 8000 	str.w	r8, [r4]
 8005a90:	3301      	adds	r3, #1
 8005a92:	9323      	str	r3, [sp, #140]	; 0x8c
 8005a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a96:	3301      	adds	r3, #1
 8005a98:	2b07      	cmp	r3, #7
 8005a9a:	9322      	str	r3, [sp, #136]	; 0x88
 8005a9c:	dc36      	bgt.n	8005b0c <_svfprintf_r+0xe00>
 8005a9e:	3408      	adds	r4, #8
 8005aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa8:	6063      	str	r3, [r4, #4]
 8005aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005aac:	4413      	add	r3, r2
 8005aae:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	2b07      	cmp	r3, #7
 8005ab6:	9322      	str	r3, [sp, #136]	; 0x88
 8005ab8:	dc31      	bgt.n	8005b1e <_svfprintf_r+0xe12>
 8005aba:	3408      	adds	r4, #8
 8005abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005abe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ac0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ac2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ac4:	f7fa ff6c 	bl	80009a0 <__aeabi_dcmpeq>
 8005ac8:	9b07      	ldr	r3, [sp, #28]
 8005aca:	1e5e      	subs	r6, r3, #1
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d12f      	bne.n	8005b30 <_svfprintf_r+0xe24>
 8005ad0:	f108 0301 	add.w	r3, r8, #1
 8005ad4:	e884 0048 	stmia.w	r4, {r3, r6}
 8005ad8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ada:	9a07      	ldr	r2, [sp, #28]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ae2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	2b07      	cmp	r3, #7
 8005ae8:	9322      	str	r3, [sp, #136]	; 0x88
 8005aea:	dd4a      	ble.n	8005b82 <_svfprintf_r+0xe76>
 8005aec:	aa21      	add	r2, sp, #132	; 0x84
 8005aee:	4649      	mov	r1, r9
 8005af0:	4650      	mov	r0, sl
 8005af2:	f001 fc5b 	bl	80073ac <__ssprint_r>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d165      	bne.n	8005bc6 <_svfprintf_r+0xeba>
 8005afa:	ac2e      	add	r4, sp, #184	; 0xb8
 8005afc:	ab1d      	add	r3, sp, #116	; 0x74
 8005afe:	6023      	str	r3, [r4, #0]
 8005b00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b04:	6063      	str	r3, [r4, #4]
 8005b06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b08:	4413      	add	r3, r2
 8005b0a:	e41c      	b.n	8005346 <_svfprintf_r+0x63a>
 8005b0c:	aa21      	add	r2, sp, #132	; 0x84
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4650      	mov	r0, sl
 8005b12:	f001 fc4b 	bl	80073ac <__ssprint_r>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d155      	bne.n	8005bc6 <_svfprintf_r+0xeba>
 8005b1a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005b1c:	e7c0      	b.n	8005aa0 <_svfprintf_r+0xd94>
 8005b1e:	aa21      	add	r2, sp, #132	; 0x84
 8005b20:	4649      	mov	r1, r9
 8005b22:	4650      	mov	r0, sl
 8005b24:	f001 fc42 	bl	80073ac <__ssprint_r>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d14c      	bne.n	8005bc6 <_svfprintf_r+0xeba>
 8005b2c:	ac2e      	add	r4, sp, #184	; 0xb8
 8005b2e:	e7c5      	b.n	8005abc <_svfprintf_r+0xdb0>
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	dde3      	ble.n	8005afc <_svfprintf_r+0xdf0>
 8005b34:	f04f 0810 	mov.w	r8, #16
 8005b38:	4f58      	ldr	r7, [pc, #352]	; (8005c9c <_svfprintf_r+0xf90>)
 8005b3a:	2e10      	cmp	r6, #16
 8005b3c:	6027      	str	r7, [r4, #0]
 8005b3e:	dc04      	bgt.n	8005b4a <_svfprintf_r+0xe3e>
 8005b40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b42:	6066      	str	r6, [r4, #4]
 8005b44:	441e      	add	r6, r3
 8005b46:	9623      	str	r6, [sp, #140]	; 0x8c
 8005b48:	e7cb      	b.n	8005ae2 <_svfprintf_r+0xdd6>
 8005b4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b4c:	f8c4 8004 	str.w	r8, [r4, #4]
 8005b50:	3310      	adds	r3, #16
 8005b52:	9323      	str	r3, [sp, #140]	; 0x8c
 8005b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b56:	3301      	adds	r3, #1
 8005b58:	2b07      	cmp	r3, #7
 8005b5a:	9322      	str	r3, [sp, #136]	; 0x88
 8005b5c:	dc02      	bgt.n	8005b64 <_svfprintf_r+0xe58>
 8005b5e:	3408      	adds	r4, #8
 8005b60:	3e10      	subs	r6, #16
 8005b62:	e7ea      	b.n	8005b3a <_svfprintf_r+0xe2e>
 8005b64:	aa21      	add	r2, sp, #132	; 0x84
 8005b66:	4649      	mov	r1, r9
 8005b68:	4650      	mov	r0, sl
 8005b6a:	f001 fc1f 	bl	80073ac <__ssprint_r>
 8005b6e:	bb50      	cbnz	r0, 8005bc6 <_svfprintf_r+0xeba>
 8005b70:	ac2e      	add	r4, sp, #184	; 0xb8
 8005b72:	e7f5      	b.n	8005b60 <_svfprintf_r+0xe54>
 8005b74:	2301      	movs	r3, #1
 8005b76:	6063      	str	r3, [r4, #4]
 8005b78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b7a:	f8c4 8000 	str.w	r8, [r4]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	e7ae      	b.n	8005ae0 <_svfprintf_r+0xdd4>
 8005b82:	3408      	adds	r4, #8
 8005b84:	e7ba      	b.n	8005afc <_svfprintf_r+0xdf0>
 8005b86:	3408      	adds	r4, #8
 8005b88:	f7ff bbed 	b.w	8005366 <_svfprintf_r+0x65a>
 8005b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b90:	1a9d      	subs	r5, r3, r2
 8005b92:	2d00      	cmp	r5, #0
 8005b94:	f77f abea 	ble.w	800536c <_svfprintf_r+0x660>
 8005b98:	2610      	movs	r6, #16
 8005b9a:	4b41      	ldr	r3, [pc, #260]	; (8005ca0 <_svfprintf_r+0xf94>)
 8005b9c:	2d10      	cmp	r5, #16
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	dc1b      	bgt.n	8005bda <_svfprintf_r+0xece>
 8005ba2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ba4:	6065      	str	r5, [r4, #4]
 8005ba6:	441d      	add	r5, r3
 8005ba8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005baa:	9523      	str	r5, [sp, #140]	; 0x8c
 8005bac:	3301      	adds	r3, #1
 8005bae:	2b07      	cmp	r3, #7
 8005bb0:	9322      	str	r3, [sp, #136]	; 0x88
 8005bb2:	f77f abdb 	ble.w	800536c <_svfprintf_r+0x660>
 8005bb6:	aa21      	add	r2, sp, #132	; 0x84
 8005bb8:	4649      	mov	r1, r9
 8005bba:	4650      	mov	r0, sl
 8005bbc:	f001 fbf6 	bl	80073ac <__ssprint_r>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	f43f abd3 	beq.w	800536c <_svfprintf_r+0x660>
 8005bc6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005bca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd0:	bf18      	it	ne
 8005bd2:	f04f 33ff 	movne.w	r3, #4294967295
 8005bd6:	f7ff b8bd 	b.w	8004d54 <_svfprintf_r+0x48>
 8005bda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bdc:	6066      	str	r6, [r4, #4]
 8005bde:	3310      	adds	r3, #16
 8005be0:	9323      	str	r3, [sp, #140]	; 0x8c
 8005be2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005be4:	3301      	adds	r3, #1
 8005be6:	2b07      	cmp	r3, #7
 8005be8:	9322      	str	r3, [sp, #136]	; 0x88
 8005bea:	dc02      	bgt.n	8005bf2 <_svfprintf_r+0xee6>
 8005bec:	3408      	adds	r4, #8
 8005bee:	3d10      	subs	r5, #16
 8005bf0:	e7d3      	b.n	8005b9a <_svfprintf_r+0xe8e>
 8005bf2:	aa21      	add	r2, sp, #132	; 0x84
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	4650      	mov	r0, sl
 8005bf8:	f001 fbd8 	bl	80073ac <__ssprint_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d1e2      	bne.n	8005bc6 <_svfprintf_r+0xeba>
 8005c00:	ac2e      	add	r4, sp, #184	; 0xb8
 8005c02:	e7f4      	b.n	8005bee <_svfprintf_r+0xee2>
 8005c04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0dd      	beq.n	8005bc6 <_svfprintf_r+0xeba>
 8005c0a:	aa21      	add	r2, sp, #132	; 0x84
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	4650      	mov	r0, sl
 8005c10:	f001 fbcc 	bl	80073ac <__ssprint_r>
 8005c14:	e7d7      	b.n	8005bc6 <_svfprintf_r+0xeba>
 8005c16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005c1c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005c1e:	f7fa fef1 	bl	8000a04 <__aeabi_dcmpun>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	f43f aa3d 	beq.w	80050a2 <_svfprintf_r+0x396>
 8005c28:	4b1e      	ldr	r3, [pc, #120]	; (8005ca4 <_svfprintf_r+0xf98>)
 8005c2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ca8 <_svfprintf_r+0xf9c>)
 8005c2c:	f7ff ba2d 	b.w	800508a <_svfprintf_r+0x37e>
 8005c30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c32:	eba3 0308 	sub.w	r3, r3, r8
 8005c36:	9307      	str	r3, [sp, #28]
 8005c38:	f7ff baaf 	b.w	800519a <_svfprintf_r+0x48e>
 8005c3c:	ea56 0207 	orrs.w	r2, r6, r7
 8005c40:	950f      	str	r5, [sp, #60]	; 0x3c
 8005c42:	f43f ac2b 	beq.w	800549c <_svfprintf_r+0x790>
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	f43f ac9d 	beq.w	8005586 <_svfprintf_r+0x87a>
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	f43f acbd 	beq.w	80055cc <_svfprintf_r+0x8c0>
 8005c52:	ab2e      	add	r3, sp, #184	; 0xb8
 8005c54:	08f1      	lsrs	r1, r6, #3
 8005c56:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8005c5a:	08f8      	lsrs	r0, r7, #3
 8005c5c:	f006 0207 	and.w	r2, r6, #7
 8005c60:	4607      	mov	r7, r0
 8005c62:	460e      	mov	r6, r1
 8005c64:	3230      	adds	r2, #48	; 0x30
 8005c66:	ea56 0107 	orrs.w	r1, r6, r7
 8005c6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8005c6e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005c72:	f47f ac86 	bne.w	8005582 <_svfprintf_r+0x876>
 8005c76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c78:	07c9      	lsls	r1, r1, #31
 8005c7a:	d506      	bpl.n	8005c8a <_svfprintf_r+0xf7e>
 8005c7c:	2a30      	cmp	r2, #48	; 0x30
 8005c7e:	d004      	beq.n	8005c8a <_svfprintf_r+0xf7e>
 8005c80:	2230      	movs	r2, #48	; 0x30
 8005c82:	f808 2c01 	strb.w	r2, [r8, #-1]
 8005c86:	f1a3 0802 	sub.w	r8, r3, #2
 8005c8a:	ab2e      	add	r3, sp, #184	; 0xb8
 8005c8c:	465e      	mov	r6, fp
 8005c8e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c90:	eba3 0b08 	sub.w	fp, r3, r8
 8005c94:	2700      	movs	r7, #0
 8005c96:	f7ff bace 	b.w	8005236 <_svfprintf_r+0x52a>
 8005c9a:	bf00      	nop
 8005c9c:	08007b67 	.word	0x08007b67
 8005ca0:	08007b57 	.word	0x08007b57
 8005ca4:	08007b2b 	.word	0x08007b2b
 8005ca8:	08007b2f 	.word	0x08007b2f

08005cac <quorem>:
 8005cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	6903      	ldr	r3, [r0, #16]
 8005cb2:	690c      	ldr	r4, [r1, #16]
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	429c      	cmp	r4, r3
 8005cb8:	f300 8082 	bgt.w	8005dc0 <quorem+0x114>
 8005cbc:	3c01      	subs	r4, #1
 8005cbe:	f101 0714 	add.w	r7, r1, #20
 8005cc2:	f100 0614 	add.w	r6, r0, #20
 8005cc6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005cca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005cce:	3501      	adds	r5, #1
 8005cd0:	fbb0 f5f5 	udiv	r5, r0, r5
 8005cd4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005cd8:	eb06 030e 	add.w	r3, r6, lr
 8005cdc:	eb07 090e 	add.w	r9, r7, lr
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	b38d      	cbz	r5, 8005d48 <quorem+0x9c>
 8005ce4:	f04f 0a00 	mov.w	sl, #0
 8005ce8:	4638      	mov	r0, r7
 8005cea:	46b4      	mov	ip, r6
 8005cec:	46d3      	mov	fp, sl
 8005cee:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cf2:	b293      	uxth	r3, r2
 8005cf4:	fb05 a303 	mla	r3, r5, r3, sl
 8005cf8:	0c12      	lsrs	r2, r2, #16
 8005cfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cfe:	fb05 a202 	mla	r2, r5, r2, sl
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	ebab 0303 	sub.w	r3, fp, r3
 8005d08:	f8bc b000 	ldrh.w	fp, [ip]
 8005d0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005d10:	445b      	add	r3, fp
 8005d12:	fa1f fb82 	uxth.w	fp, r2
 8005d16:	f8dc 2000 	ldr.w	r2, [ip]
 8005d1a:	4581      	cmp	r9, r0
 8005d1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d2a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005d2e:	f84c 3b04 	str.w	r3, [ip], #4
 8005d32:	d2dc      	bcs.n	8005cee <quorem+0x42>
 8005d34:	f856 300e 	ldr.w	r3, [r6, lr]
 8005d38:	b933      	cbnz	r3, 8005d48 <quorem+0x9c>
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	3b04      	subs	r3, #4
 8005d3e:	429e      	cmp	r6, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	d331      	bcc.n	8005da8 <quorem+0xfc>
 8005d44:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d48:	4640      	mov	r0, r8
 8005d4a:	f001 fa56 	bl	80071fa <__mcmp>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	db26      	blt.n	8005da0 <quorem+0xf4>
 8005d52:	4630      	mov	r0, r6
 8005d54:	f04f 0e00 	mov.w	lr, #0
 8005d58:	3501      	adds	r5, #1
 8005d5a:	f857 1b04 	ldr.w	r1, [r7], #4
 8005d5e:	f8d0 c000 	ldr.w	ip, [r0]
 8005d62:	b28b      	uxth	r3, r1
 8005d64:	ebae 0303 	sub.w	r3, lr, r3
 8005d68:	fa1f f28c 	uxth.w	r2, ip
 8005d6c:	4413      	add	r3, r2
 8005d6e:	0c0a      	lsrs	r2, r1, #16
 8005d70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d7e:	45b9      	cmp	r9, r7
 8005d80:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005d84:	f840 3b04 	str.w	r3, [r0], #4
 8005d88:	d2e7      	bcs.n	8005d5a <quorem+0xae>
 8005d8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005d8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005d92:	b92a      	cbnz	r2, 8005da0 <quorem+0xf4>
 8005d94:	3b04      	subs	r3, #4
 8005d96:	429e      	cmp	r6, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	d30b      	bcc.n	8005db4 <quorem+0x108>
 8005d9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005da0:	4628      	mov	r0, r5
 8005da2:	b003      	add	sp, #12
 8005da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	3b04      	subs	r3, #4
 8005dac:	2a00      	cmp	r2, #0
 8005dae:	d1c9      	bne.n	8005d44 <quorem+0x98>
 8005db0:	3c01      	subs	r4, #1
 8005db2:	e7c4      	b.n	8005d3e <quorem+0x92>
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	3b04      	subs	r3, #4
 8005db8:	2a00      	cmp	r2, #0
 8005dba:	d1ef      	bne.n	8005d9c <quorem+0xf0>
 8005dbc:	3c01      	subs	r4, #1
 8005dbe:	e7ea      	b.n	8005d96 <quorem+0xea>
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	e7ee      	b.n	8005da2 <quorem+0xf6>
 8005dc4:	0000      	movs	r0, r0
	...

08005dc8 <_dtoa_r>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005dce:	b095      	sub	sp, #84	; 0x54
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005dd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dd8:	b93e      	cbnz	r6, 8005dea <_dtoa_r+0x22>
 8005dda:	2010      	movs	r0, #16
 8005ddc:	f000 fdd6 	bl	800698c <malloc>
 8005de0:	6260      	str	r0, [r4, #36]	; 0x24
 8005de2:	6046      	str	r6, [r0, #4]
 8005de4:	6086      	str	r6, [r0, #8]
 8005de6:	6006      	str	r6, [r0, #0]
 8005de8:	60c6      	str	r6, [r0, #12]
 8005dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dec:	6819      	ldr	r1, [r3, #0]
 8005dee:	b151      	cbz	r1, 8005e06 <_dtoa_r+0x3e>
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	2301      	movs	r3, #1
 8005df4:	4093      	lsls	r3, r2
 8005df6:	604a      	str	r2, [r1, #4]
 8005df8:	608b      	str	r3, [r1, #8]
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f001 f828 	bl	8006e50 <_Bfree>
 8005e00:	2200      	movs	r2, #0
 8005e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bfb7      	itett	lt
 8005e0c:	2301      	movlt	r3, #1
 8005e0e:	2300      	movge	r3, #0
 8005e10:	602b      	strlt	r3, [r5, #0]
 8005e12:	9b03      	ldrlt	r3, [sp, #12]
 8005e14:	bfae      	itee	ge
 8005e16:	602b      	strge	r3, [r5, #0]
 8005e18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e1c:	9303      	strlt	r3, [sp, #12]
 8005e1e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005e22:	4bab      	ldr	r3, [pc, #684]	; (80060d0 <_dtoa_r+0x308>)
 8005e24:	ea33 0309 	bics.w	r3, r3, r9
 8005e28:	d11b      	bne.n	8005e62 <_dtoa_r+0x9a>
 8005e2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e2e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	9b02      	ldr	r3, [sp, #8]
 8005e34:	b923      	cbnz	r3, 8005e40 <_dtoa_r+0x78>
 8005e36:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f000 8583 	beq.w	8006946 <_dtoa_r+0xb7e>
 8005e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e42:	b953      	cbnz	r3, 8005e5a <_dtoa_r+0x92>
 8005e44:	4ba3      	ldr	r3, [pc, #652]	; (80060d4 <_dtoa_r+0x30c>)
 8005e46:	e021      	b.n	8005e8c <_dtoa_r+0xc4>
 8005e48:	4ba3      	ldr	r3, [pc, #652]	; (80060d8 <_dtoa_r+0x310>)
 8005e4a:	9306      	str	r3, [sp, #24]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	9806      	ldr	r0, [sp, #24]
 8005e54:	b015      	add	sp, #84	; 0x54
 8005e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5a:	4b9e      	ldr	r3, [pc, #632]	; (80060d4 <_dtoa_r+0x30c>)
 8005e5c:	9306      	str	r3, [sp, #24]
 8005e5e:	3303      	adds	r3, #3
 8005e60:	e7f5      	b.n	8005e4e <_dtoa_r+0x86>
 8005e62:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	f7fa fd97 	bl	80009a0 <__aeabi_dcmpeq>
 8005e72:	4680      	mov	r8, r0
 8005e74:	b160      	cbz	r0, 8005e90 <_dtoa_r+0xc8>
 8005e76:	2301      	movs	r3, #1
 8005e78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 855e 	beq.w	8006940 <_dtoa_r+0xb78>
 8005e84:	4b95      	ldr	r3, [pc, #596]	; (80060dc <_dtoa_r+0x314>)
 8005e86:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	9306      	str	r3, [sp, #24]
 8005e8e:	e7e0      	b.n	8005e52 <_dtoa_r+0x8a>
 8005e90:	ab12      	add	r3, sp, #72	; 0x48
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	ab13      	add	r3, sp, #76	; 0x4c
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4632      	mov	r2, r6
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f001 fa25 	bl	80072ec <__d2b>
 8005ea2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ea6:	4682      	mov	sl, r0
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	d07d      	beq.n	8005fa8 <_dtoa_r+0x1e0>
 8005eac:	4630      	mov	r0, r6
 8005eae:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005eb2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005eb6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005eba:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ebe:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4b86      	ldr	r3, [pc, #536]	; (80060e0 <_dtoa_r+0x318>)
 8005ec6:	f7fa f94f 	bl	8000168 <__aeabi_dsub>
 8005eca:	a37b      	add	r3, pc, #492	; (adr r3, 80060b8 <_dtoa_r+0x2f0>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa fafe 	bl	80004d0 <__aeabi_dmul>
 8005ed4:	a37a      	add	r3, pc, #488	; (adr r3, 80060c0 <_dtoa_r+0x2f8>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa f947 	bl	800016c <__adddf3>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	460f      	mov	r7, r1
 8005ee4:	f7fa fa8e 	bl	8000404 <__aeabi_i2d>
 8005ee8:	a377      	add	r3, pc, #476	; (adr r3, 80060c8 <_dtoa_r+0x300>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa faef 	bl	80004d0 <__aeabi_dmul>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	4639      	mov	r1, r7
 8005efa:	f7fa f937 	bl	800016c <__adddf3>
 8005efe:	4606      	mov	r6, r0
 8005f00:	460f      	mov	r7, r1
 8005f02:	f7fa fd95 	bl	8000a30 <__aeabi_d2iz>
 8005f06:	2200      	movs	r2, #0
 8005f08:	4683      	mov	fp, r0
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa fd50 	bl	80009b4 <__aeabi_dcmplt>
 8005f14:	b158      	cbz	r0, 8005f2e <_dtoa_r+0x166>
 8005f16:	4658      	mov	r0, fp
 8005f18:	f7fa fa74 	bl	8000404 <__aeabi_i2d>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4630      	mov	r0, r6
 8005f22:	4639      	mov	r1, r7
 8005f24:	f7fa fd3c 	bl	80009a0 <__aeabi_dcmpeq>
 8005f28:	b908      	cbnz	r0, 8005f2e <_dtoa_r+0x166>
 8005f2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f2e:	f1bb 0f16 	cmp.w	fp, #22
 8005f32:	d858      	bhi.n	8005fe6 <_dtoa_r+0x21e>
 8005f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f38:	496a      	ldr	r1, [pc, #424]	; (80060e4 <_dtoa_r+0x31c>)
 8005f3a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f42:	f7fa fd55 	bl	80009f0 <__aeabi_dcmpgt>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d04f      	beq.n	8005fea <_dtoa_r+0x222>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f50:	930d      	str	r3, [sp, #52]	; 0x34
 8005f52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f54:	1b5d      	subs	r5, r3, r5
 8005f56:	1e6b      	subs	r3, r5, #1
 8005f58:	9307      	str	r3, [sp, #28]
 8005f5a:	bf43      	ittte	mi
 8005f5c:	2300      	movmi	r3, #0
 8005f5e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005f62:	9307      	strmi	r3, [sp, #28]
 8005f64:	f04f 0800 	movpl.w	r8, #0
 8005f68:	f1bb 0f00 	cmp.w	fp, #0
 8005f6c:	db3f      	blt.n	8005fee <_dtoa_r+0x226>
 8005f6e:	9b07      	ldr	r3, [sp, #28]
 8005f70:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005f74:	445b      	add	r3, fp
 8005f76:	9307      	str	r3, [sp, #28]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9308      	str	r3, [sp, #32]
 8005f7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	f200 80b4 	bhi.w	80060ec <_dtoa_r+0x324>
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	bfc4      	itt	gt
 8005f88:	3b04      	subgt	r3, #4
 8005f8a:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005f8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f8e:	bfc8      	it	gt
 8005f90:	2600      	movgt	r6, #0
 8005f92:	f1a3 0302 	sub.w	r3, r3, #2
 8005f96:	bfd8      	it	le
 8005f98:	2601      	movle	r6, #1
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	f200 80b2 	bhi.w	8006104 <_dtoa_r+0x33c>
 8005fa0:	e8df f003 	tbb	[pc, r3]
 8005fa4:	782d8684 	.word	0x782d8684
 8005fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005faa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005fac:	441d      	add	r5, r3
 8005fae:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	dd11      	ble.n	8005fda <_dtoa_r+0x212>
 8005fb6:	9a02      	ldr	r2, [sp, #8]
 8005fb8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005fbc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005fc0:	fa22 f000 	lsr.w	r0, r2, r0
 8005fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8005fc8:	4318      	orrs	r0, r3
 8005fca:	f7fa fa0b 	bl	80003e4 <__aeabi_ui2d>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005fd4:	3d01      	subs	r5, #1
 8005fd6:	9310      	str	r3, [sp, #64]	; 0x40
 8005fd8:	e773      	b.n	8005ec2 <_dtoa_r+0xfa>
 8005fda:	f1c3 0020 	rsb	r0, r3, #32
 8005fde:	9b02      	ldr	r3, [sp, #8]
 8005fe0:	fa03 f000 	lsl.w	r0, r3, r0
 8005fe4:	e7f1      	b.n	8005fca <_dtoa_r+0x202>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e7b2      	b.n	8005f50 <_dtoa_r+0x188>
 8005fea:	900d      	str	r0, [sp, #52]	; 0x34
 8005fec:	e7b1      	b.n	8005f52 <_dtoa_r+0x18a>
 8005fee:	f1cb 0300 	rsb	r3, fp, #0
 8005ff2:	9308      	str	r3, [sp, #32]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	eba8 080b 	sub.w	r8, r8, fp
 8005ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8005ffc:	e7be      	b.n	8005f7c <_dtoa_r+0x1b4>
 8005ffe:	2301      	movs	r3, #1
 8006000:	9309      	str	r3, [sp, #36]	; 0x24
 8006002:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006004:	2b00      	cmp	r3, #0
 8006006:	f340 8080 	ble.w	800610a <_dtoa_r+0x342>
 800600a:	4699      	mov	r9, r3
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	2200      	movs	r2, #0
 8006010:	2104      	movs	r1, #4
 8006012:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006014:	606a      	str	r2, [r5, #4]
 8006016:	f101 0214 	add.w	r2, r1, #20
 800601a:	429a      	cmp	r2, r3
 800601c:	d97a      	bls.n	8006114 <_dtoa_r+0x34c>
 800601e:	6869      	ldr	r1, [r5, #4]
 8006020:	4620      	mov	r0, r4
 8006022:	f000 fee1 	bl	8006de8 <_Balloc>
 8006026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006028:	6028      	str	r0, [r5, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f1b9 0f0e 	cmp.w	r9, #14
 8006030:	9306      	str	r3, [sp, #24]
 8006032:	f200 80f0 	bhi.w	8006216 <_dtoa_r+0x44e>
 8006036:	2e00      	cmp	r6, #0
 8006038:	f000 80ed 	beq.w	8006216 <_dtoa_r+0x44e>
 800603c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006040:	f1bb 0f00 	cmp.w	fp, #0
 8006044:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006048:	dd79      	ble.n	800613e <_dtoa_r+0x376>
 800604a:	4a26      	ldr	r2, [pc, #152]	; (80060e4 <_dtoa_r+0x31c>)
 800604c:	f00b 030f 	and.w	r3, fp, #15
 8006050:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006054:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006058:	06f0      	lsls	r0, r6, #27
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006062:	d55c      	bpl.n	800611e <_dtoa_r+0x356>
 8006064:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006068:	4b1f      	ldr	r3, [pc, #124]	; (80060e8 <_dtoa_r+0x320>)
 800606a:	2503      	movs	r5, #3
 800606c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006070:	f7fa fb58 	bl	8000724 <__aeabi_ddiv>
 8006074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006078:	f006 060f 	and.w	r6, r6, #15
 800607c:	4f1a      	ldr	r7, [pc, #104]	; (80060e8 <_dtoa_r+0x320>)
 800607e:	2e00      	cmp	r6, #0
 8006080:	d14f      	bne.n	8006122 <_dtoa_r+0x35a>
 8006082:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800608a:	f7fa fb4b 	bl	8000724 <__aeabi_ddiv>
 800608e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006092:	e06e      	b.n	8006172 <_dtoa_r+0x3aa>
 8006094:	2301      	movs	r3, #1
 8006096:	9309      	str	r3, [sp, #36]	; 0x24
 8006098:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800609a:	445b      	add	r3, fp
 800609c:	f103 0901 	add.w	r9, r3, #1
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	464b      	mov	r3, r9
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	bfb8      	it	lt
 80060a8:	2301      	movlt	r3, #1
 80060aa:	e7b0      	b.n	800600e <_dtoa_r+0x246>
 80060ac:	2300      	movs	r3, #0
 80060ae:	e7a7      	b.n	8006000 <_dtoa_r+0x238>
 80060b0:	2300      	movs	r3, #0
 80060b2:	e7f0      	b.n	8006096 <_dtoa_r+0x2ce>
 80060b4:	f3af 8000 	nop.w
 80060b8:	636f4361 	.word	0x636f4361
 80060bc:	3fd287a7 	.word	0x3fd287a7
 80060c0:	8b60c8b3 	.word	0x8b60c8b3
 80060c4:	3fc68a28 	.word	0x3fc68a28
 80060c8:	509f79fb 	.word	0x509f79fb
 80060cc:	3fd34413 	.word	0x3fd34413
 80060d0:	7ff00000 	.word	0x7ff00000
 80060d4:	08007b80 	.word	0x08007b80
 80060d8:	08007b77 	.word	0x08007b77
 80060dc:	08007b56 	.word	0x08007b56
 80060e0:	3ff80000 	.word	0x3ff80000
 80060e4:	08007bb0 	.word	0x08007bb0
 80060e8:	08007b88 	.word	0x08007b88
 80060ec:	2601      	movs	r6, #1
 80060ee:	2300      	movs	r3, #0
 80060f0:	9609      	str	r6, [sp, #36]	; 0x24
 80060f2:	931e      	str	r3, [sp, #120]	; 0x78
 80060f4:	f04f 33ff 	mov.w	r3, #4294967295
 80060f8:	2200      	movs	r2, #0
 80060fa:	9304      	str	r3, [sp, #16]
 80060fc:	4699      	mov	r9, r3
 80060fe:	2312      	movs	r3, #18
 8006100:	921f      	str	r2, [sp, #124]	; 0x7c
 8006102:	e784      	b.n	800600e <_dtoa_r+0x246>
 8006104:	2301      	movs	r3, #1
 8006106:	9309      	str	r3, [sp, #36]	; 0x24
 8006108:	e7f4      	b.n	80060f4 <_dtoa_r+0x32c>
 800610a:	2301      	movs	r3, #1
 800610c:	9304      	str	r3, [sp, #16]
 800610e:	4699      	mov	r9, r3
 8006110:	461a      	mov	r2, r3
 8006112:	e7f5      	b.n	8006100 <_dtoa_r+0x338>
 8006114:	686a      	ldr	r2, [r5, #4]
 8006116:	0049      	lsls	r1, r1, #1
 8006118:	3201      	adds	r2, #1
 800611a:	606a      	str	r2, [r5, #4]
 800611c:	e77b      	b.n	8006016 <_dtoa_r+0x24e>
 800611e:	2502      	movs	r5, #2
 8006120:	e7ac      	b.n	800607c <_dtoa_r+0x2b4>
 8006122:	07f1      	lsls	r1, r6, #31
 8006124:	d508      	bpl.n	8006138 <_dtoa_r+0x370>
 8006126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800612a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800612e:	f7fa f9cf 	bl	80004d0 <__aeabi_dmul>
 8006132:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006136:	3501      	adds	r5, #1
 8006138:	1076      	asrs	r6, r6, #1
 800613a:	3708      	adds	r7, #8
 800613c:	e79f      	b.n	800607e <_dtoa_r+0x2b6>
 800613e:	f000 80a5 	beq.w	800628c <_dtoa_r+0x4c4>
 8006142:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006146:	f1cb 0600 	rsb	r6, fp, #0
 800614a:	4ba2      	ldr	r3, [pc, #648]	; (80063d4 <_dtoa_r+0x60c>)
 800614c:	f006 020f 	and.w	r2, r6, #15
 8006150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f7fa f9ba 	bl	80004d0 <__aeabi_dmul>
 800615c:	2502      	movs	r5, #2
 800615e:	2300      	movs	r3, #0
 8006160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006164:	4f9c      	ldr	r7, [pc, #624]	; (80063d8 <_dtoa_r+0x610>)
 8006166:	1136      	asrs	r6, r6, #4
 8006168:	2e00      	cmp	r6, #0
 800616a:	f040 8084 	bne.w	8006276 <_dtoa_r+0x4ae>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d18d      	bne.n	800608e <_dtoa_r+0x2c6>
 8006172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 808b 	beq.w	8006290 <_dtoa_r+0x4c8>
 800617a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800617e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006182:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006186:	2200      	movs	r2, #0
 8006188:	4b94      	ldr	r3, [pc, #592]	; (80063dc <_dtoa_r+0x614>)
 800618a:	f7fa fc13 	bl	80009b4 <__aeabi_dcmplt>
 800618e:	2800      	cmp	r0, #0
 8006190:	d07e      	beq.n	8006290 <_dtoa_r+0x4c8>
 8006192:	f1b9 0f00 	cmp.w	r9, #0
 8006196:	d07b      	beq.n	8006290 <_dtoa_r+0x4c8>
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	dd37      	ble.n	800620e <_dtoa_r+0x446>
 800619e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061a2:	2200      	movs	r2, #0
 80061a4:	4b8e      	ldr	r3, [pc, #568]	; (80063e0 <_dtoa_r+0x618>)
 80061a6:	f7fa f993 	bl	80004d0 <__aeabi_dmul>
 80061aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ae:	9e04      	ldr	r6, [sp, #16]
 80061b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80061b4:	3501      	adds	r5, #1
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7fa f924 	bl	8000404 <__aeabi_i2d>
 80061bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c0:	f7fa f986 	bl	80004d0 <__aeabi_dmul>
 80061c4:	4b87      	ldr	r3, [pc, #540]	; (80063e4 <_dtoa_r+0x61c>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	f7f9 ffd0 	bl	800016c <__adddf3>
 80061cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061d2:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80061d6:	950b      	str	r5, [sp, #44]	; 0x2c
 80061d8:	2e00      	cmp	r6, #0
 80061da:	d15c      	bne.n	8006296 <_dtoa_r+0x4ce>
 80061dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	4b81      	ldr	r3, [pc, #516]	; (80063e8 <_dtoa_r+0x620>)
 80061e4:	f7f9 ffc0 	bl	8000168 <__aeabi_dsub>
 80061e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ea:	462b      	mov	r3, r5
 80061ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f0:	f7fa fbfe 	bl	80009f0 <__aeabi_dcmpgt>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f040 82f7 	bne.w	80067e8 <_dtoa_r+0xa20>
 80061fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006200:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006204:	f7fa fbd6 	bl	80009b4 <__aeabi_dcmplt>
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 82eb 	bne.w	80067e4 <_dtoa_r+0xa1c>
 800620e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006212:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006216:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006218:	2b00      	cmp	r3, #0
 800621a:	f2c0 8150 	blt.w	80064be <_dtoa_r+0x6f6>
 800621e:	f1bb 0f0e 	cmp.w	fp, #14
 8006222:	f300 814c 	bgt.w	80064be <_dtoa_r+0x6f6>
 8006226:	4b6b      	ldr	r3, [pc, #428]	; (80063d4 <_dtoa_r+0x60c>)
 8006228:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006234:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006236:	2b00      	cmp	r3, #0
 8006238:	f280 80da 	bge.w	80063f0 <_dtoa_r+0x628>
 800623c:	f1b9 0f00 	cmp.w	r9, #0
 8006240:	f300 80d6 	bgt.w	80063f0 <_dtoa_r+0x628>
 8006244:	f040 82cd 	bne.w	80067e2 <_dtoa_r+0xa1a>
 8006248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800624c:	2200      	movs	r2, #0
 800624e:	4b66      	ldr	r3, [pc, #408]	; (80063e8 <_dtoa_r+0x620>)
 8006250:	f7fa f93e 	bl	80004d0 <__aeabi_dmul>
 8006254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006258:	f7fa fbc0 	bl	80009dc <__aeabi_dcmpge>
 800625c:	464e      	mov	r6, r9
 800625e:	464f      	mov	r7, r9
 8006260:	2800      	cmp	r0, #0
 8006262:	f040 82a4 	bne.w	80067ae <_dtoa_r+0x9e6>
 8006266:	9b06      	ldr	r3, [sp, #24]
 8006268:	9a06      	ldr	r2, [sp, #24]
 800626a:	1c5d      	adds	r5, r3, #1
 800626c:	2331      	movs	r3, #49	; 0x31
 800626e:	f10b 0b01 	add.w	fp, fp, #1
 8006272:	7013      	strb	r3, [r2, #0]
 8006274:	e29f      	b.n	80067b6 <_dtoa_r+0x9ee>
 8006276:	07f2      	lsls	r2, r6, #31
 8006278:	d505      	bpl.n	8006286 <_dtoa_r+0x4be>
 800627a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800627e:	f7fa f927 	bl	80004d0 <__aeabi_dmul>
 8006282:	2301      	movs	r3, #1
 8006284:	3501      	adds	r5, #1
 8006286:	1076      	asrs	r6, r6, #1
 8006288:	3708      	adds	r7, #8
 800628a:	e76d      	b.n	8006168 <_dtoa_r+0x3a0>
 800628c:	2502      	movs	r5, #2
 800628e:	e770      	b.n	8006172 <_dtoa_r+0x3aa>
 8006290:	465f      	mov	r7, fp
 8006292:	464e      	mov	r6, r9
 8006294:	e78f      	b.n	80061b6 <_dtoa_r+0x3ee>
 8006296:	9a06      	ldr	r2, [sp, #24]
 8006298:	4b4e      	ldr	r3, [pc, #312]	; (80063d4 <_dtoa_r+0x60c>)
 800629a:	4432      	add	r2, r6
 800629c:	9211      	str	r2, [sp, #68]	; 0x44
 800629e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a0:	1e71      	subs	r1, r6, #1
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	d048      	beq.n	8006338 <_dtoa_r+0x570>
 80062a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	2000      	movs	r0, #0
 80062b0:	494e      	ldr	r1, [pc, #312]	; (80063ec <_dtoa_r+0x624>)
 80062b2:	f7fa fa37 	bl	8000724 <__aeabi_ddiv>
 80062b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062ba:	f7f9 ff55 	bl	8000168 <__aeabi_dsub>
 80062be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062c2:	9d06      	ldr	r5, [sp, #24]
 80062c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062c8:	f7fa fbb2 	bl	8000a30 <__aeabi_d2iz>
 80062cc:	4606      	mov	r6, r0
 80062ce:	f7fa f899 	bl	8000404 <__aeabi_i2d>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062da:	f7f9 ff45 	bl	8000168 <__aeabi_dsub>
 80062de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062e2:	3630      	adds	r6, #48	; 0x30
 80062e4:	f805 6b01 	strb.w	r6, [r5], #1
 80062e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062ec:	f7fa fb62 	bl	80009b4 <__aeabi_dcmplt>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d164      	bne.n	80063be <_dtoa_r+0x5f6>
 80062f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062f8:	2000      	movs	r0, #0
 80062fa:	4938      	ldr	r1, [pc, #224]	; (80063dc <_dtoa_r+0x614>)
 80062fc:	f7f9 ff34 	bl	8000168 <__aeabi_dsub>
 8006300:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006304:	f7fa fb56 	bl	80009b4 <__aeabi_dcmplt>
 8006308:	2800      	cmp	r0, #0
 800630a:	f040 80b9 	bne.w	8006480 <_dtoa_r+0x6b8>
 800630e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006310:	429d      	cmp	r5, r3
 8006312:	f43f af7c 	beq.w	800620e <_dtoa_r+0x446>
 8006316:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800631a:	2200      	movs	r2, #0
 800631c:	4b30      	ldr	r3, [pc, #192]	; (80063e0 <_dtoa_r+0x618>)
 800631e:	f7fa f8d7 	bl	80004d0 <__aeabi_dmul>
 8006322:	2200      	movs	r2, #0
 8006324:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800632c:	4b2c      	ldr	r3, [pc, #176]	; (80063e0 <_dtoa_r+0x618>)
 800632e:	f7fa f8cf 	bl	80004d0 <__aeabi_dmul>
 8006332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006336:	e7c5      	b.n	80062c4 <_dtoa_r+0x4fc>
 8006338:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800633c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006340:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006344:	f7fa f8c4 	bl	80004d0 <__aeabi_dmul>
 8006348:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800634c:	9d06      	ldr	r5, [sp, #24]
 800634e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006352:	f7fa fb6d 	bl	8000a30 <__aeabi_d2iz>
 8006356:	4606      	mov	r6, r0
 8006358:	f7fa f854 	bl	8000404 <__aeabi_i2d>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006364:	f7f9 ff00 	bl	8000168 <__aeabi_dsub>
 8006368:	3630      	adds	r6, #48	; 0x30
 800636a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800636c:	f805 6b01 	strb.w	r6, [r5], #1
 8006370:	42ab      	cmp	r3, r5
 8006372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	d124      	bne.n	80063c6 <_dtoa_r+0x5fe>
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <_dtoa_r+0x624>)
 800637e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006382:	f7f9 fef3 	bl	800016c <__adddf3>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800638e:	f7fa fb2f 	bl	80009f0 <__aeabi_dcmpgt>
 8006392:	2800      	cmp	r0, #0
 8006394:	d174      	bne.n	8006480 <_dtoa_r+0x6b8>
 8006396:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800639a:	2000      	movs	r0, #0
 800639c:	4913      	ldr	r1, [pc, #76]	; (80063ec <_dtoa_r+0x624>)
 800639e:	f7f9 fee3 	bl	8000168 <__aeabi_dsub>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063aa:	f7fa fb03 	bl	80009b4 <__aeabi_dcmplt>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	f43f af2d 	beq.w	800620e <_dtoa_r+0x446>
 80063b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063b8:	1e6a      	subs	r2, r5, #1
 80063ba:	2b30      	cmp	r3, #48	; 0x30
 80063bc:	d001      	beq.n	80063c2 <_dtoa_r+0x5fa>
 80063be:	46bb      	mov	fp, r7
 80063c0:	e04d      	b.n	800645e <_dtoa_r+0x696>
 80063c2:	4615      	mov	r5, r2
 80063c4:	e7f6      	b.n	80063b4 <_dtoa_r+0x5ec>
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <_dtoa_r+0x618>)
 80063c8:	f7fa f882 	bl	80004d0 <__aeabi_dmul>
 80063cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d0:	e7bd      	b.n	800634e <_dtoa_r+0x586>
 80063d2:	bf00      	nop
 80063d4:	08007bb0 	.word	0x08007bb0
 80063d8:	08007b88 	.word	0x08007b88
 80063dc:	3ff00000 	.word	0x3ff00000
 80063e0:	40240000 	.word	0x40240000
 80063e4:	401c0000 	.word	0x401c0000
 80063e8:	40140000 	.word	0x40140000
 80063ec:	3fe00000 	.word	0x3fe00000
 80063f0:	9d06      	ldr	r5, [sp, #24]
 80063f2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063fa:	4630      	mov	r0, r6
 80063fc:	4639      	mov	r1, r7
 80063fe:	f7fa f991 	bl	8000724 <__aeabi_ddiv>
 8006402:	f7fa fb15 	bl	8000a30 <__aeabi_d2iz>
 8006406:	4680      	mov	r8, r0
 8006408:	f7f9 fffc 	bl	8000404 <__aeabi_i2d>
 800640c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006410:	f7fa f85e 	bl	80004d0 <__aeabi_dmul>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4630      	mov	r0, r6
 800641a:	4639      	mov	r1, r7
 800641c:	f7f9 fea4 	bl	8000168 <__aeabi_dsub>
 8006420:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006424:	f805 6b01 	strb.w	r6, [r5], #1
 8006428:	9e06      	ldr	r6, [sp, #24]
 800642a:	4602      	mov	r2, r0
 800642c:	1bae      	subs	r6, r5, r6
 800642e:	45b1      	cmp	r9, r6
 8006430:	460b      	mov	r3, r1
 8006432:	d137      	bne.n	80064a4 <_dtoa_r+0x6dc>
 8006434:	f7f9 fe9a 	bl	800016c <__adddf3>
 8006438:	4606      	mov	r6, r0
 800643a:	460f      	mov	r7, r1
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006444:	f7fa fab6 	bl	80009b4 <__aeabi_dcmplt>
 8006448:	b9c8      	cbnz	r0, 800647e <_dtoa_r+0x6b6>
 800644a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800644e:	4632      	mov	r2, r6
 8006450:	463b      	mov	r3, r7
 8006452:	f7fa faa5 	bl	80009a0 <__aeabi_dcmpeq>
 8006456:	b110      	cbz	r0, 800645e <_dtoa_r+0x696>
 8006458:	f018 0f01 	tst.w	r8, #1
 800645c:	d10f      	bne.n	800647e <_dtoa_r+0x6b6>
 800645e:	4651      	mov	r1, sl
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fcf5 	bl	8006e50 <_Bfree>
 8006466:	2300      	movs	r3, #0
 8006468:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800646a:	702b      	strb	r3, [r5, #0]
 800646c:	f10b 0301 	add.w	r3, fp, #1
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006474:	2b00      	cmp	r3, #0
 8006476:	f43f acec 	beq.w	8005e52 <_dtoa_r+0x8a>
 800647a:	601d      	str	r5, [r3, #0]
 800647c:	e4e9      	b.n	8005e52 <_dtoa_r+0x8a>
 800647e:	465f      	mov	r7, fp
 8006480:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006484:	1e6b      	subs	r3, r5, #1
 8006486:	2a39      	cmp	r2, #57	; 0x39
 8006488:	d106      	bne.n	8006498 <_dtoa_r+0x6d0>
 800648a:	9a06      	ldr	r2, [sp, #24]
 800648c:	429a      	cmp	r2, r3
 800648e:	d107      	bne.n	80064a0 <_dtoa_r+0x6d8>
 8006490:	2330      	movs	r3, #48	; 0x30
 8006492:	7013      	strb	r3, [r2, #0]
 8006494:	4613      	mov	r3, r2
 8006496:	3701      	adds	r7, #1
 8006498:	781a      	ldrb	r2, [r3, #0]
 800649a:	3201      	adds	r2, #1
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	e78e      	b.n	80063be <_dtoa_r+0x5f6>
 80064a0:	461d      	mov	r5, r3
 80064a2:	e7ed      	b.n	8006480 <_dtoa_r+0x6b8>
 80064a4:	2200      	movs	r2, #0
 80064a6:	4bb5      	ldr	r3, [pc, #724]	; (800677c <_dtoa_r+0x9b4>)
 80064a8:	f7fa f812 	bl	80004d0 <__aeabi_dmul>
 80064ac:	2200      	movs	r2, #0
 80064ae:	2300      	movs	r3, #0
 80064b0:	4606      	mov	r6, r0
 80064b2:	460f      	mov	r7, r1
 80064b4:	f7fa fa74 	bl	80009a0 <__aeabi_dcmpeq>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d09c      	beq.n	80063f6 <_dtoa_r+0x62e>
 80064bc:	e7cf      	b.n	800645e <_dtoa_r+0x696>
 80064be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	f000 8129 	beq.w	8006718 <_dtoa_r+0x950>
 80064c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80064c8:	2a01      	cmp	r2, #1
 80064ca:	f300 810e 	bgt.w	80066ea <_dtoa_r+0x922>
 80064ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064d0:	2a00      	cmp	r2, #0
 80064d2:	f000 8106 	beq.w	80066e2 <_dtoa_r+0x91a>
 80064d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064da:	4645      	mov	r5, r8
 80064dc:	9e08      	ldr	r6, [sp, #32]
 80064de:	9a07      	ldr	r2, [sp, #28]
 80064e0:	2101      	movs	r1, #1
 80064e2:	441a      	add	r2, r3
 80064e4:	4620      	mov	r0, r4
 80064e6:	4498      	add	r8, r3
 80064e8:	9207      	str	r2, [sp, #28]
 80064ea:	f000 fd51 	bl	8006f90 <__i2b>
 80064ee:	4607      	mov	r7, r0
 80064f0:	2d00      	cmp	r5, #0
 80064f2:	dd0b      	ble.n	800650c <_dtoa_r+0x744>
 80064f4:	9b07      	ldr	r3, [sp, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dd08      	ble.n	800650c <_dtoa_r+0x744>
 80064fa:	42ab      	cmp	r3, r5
 80064fc:	bfa8      	it	ge
 80064fe:	462b      	movge	r3, r5
 8006500:	9a07      	ldr	r2, [sp, #28]
 8006502:	eba8 0803 	sub.w	r8, r8, r3
 8006506:	1aed      	subs	r5, r5, r3
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	9307      	str	r3, [sp, #28]
 800650c:	9b08      	ldr	r3, [sp, #32]
 800650e:	b1fb      	cbz	r3, 8006550 <_dtoa_r+0x788>
 8006510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 8104 	beq.w	8006720 <_dtoa_r+0x958>
 8006518:	2e00      	cmp	r6, #0
 800651a:	dd11      	ble.n	8006540 <_dtoa_r+0x778>
 800651c:	4639      	mov	r1, r7
 800651e:	4632      	mov	r2, r6
 8006520:	4620      	mov	r0, r4
 8006522:	f000 fdcb 	bl	80070bc <__pow5mult>
 8006526:	4652      	mov	r2, sl
 8006528:	4601      	mov	r1, r0
 800652a:	4607      	mov	r7, r0
 800652c:	4620      	mov	r0, r4
 800652e:	f000 fd38 	bl	8006fa2 <__multiply>
 8006532:	4651      	mov	r1, sl
 8006534:	900a      	str	r0, [sp, #40]	; 0x28
 8006536:	4620      	mov	r0, r4
 8006538:	f000 fc8a 	bl	8006e50 <_Bfree>
 800653c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800653e:	469a      	mov	sl, r3
 8006540:	9b08      	ldr	r3, [sp, #32]
 8006542:	1b9a      	subs	r2, r3, r6
 8006544:	d004      	beq.n	8006550 <_dtoa_r+0x788>
 8006546:	4651      	mov	r1, sl
 8006548:	4620      	mov	r0, r4
 800654a:	f000 fdb7 	bl	80070bc <__pow5mult>
 800654e:	4682      	mov	sl, r0
 8006550:	2101      	movs	r1, #1
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fd1c 	bl	8006f90 <__i2b>
 8006558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800655a:	4606      	mov	r6, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	f340 80e1 	ble.w	8006724 <_dtoa_r+0x95c>
 8006562:	461a      	mov	r2, r3
 8006564:	4601      	mov	r1, r0
 8006566:	4620      	mov	r0, r4
 8006568:	f000 fda8 	bl	80070bc <__pow5mult>
 800656c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800656e:	4606      	mov	r6, r0
 8006570:	2b01      	cmp	r3, #1
 8006572:	f340 80da 	ble.w	800672a <_dtoa_r+0x962>
 8006576:	2300      	movs	r3, #0
 8006578:	9308      	str	r3, [sp, #32]
 800657a:	6933      	ldr	r3, [r6, #16]
 800657c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006580:	6918      	ldr	r0, [r3, #16]
 8006582:	f000 fcb7 	bl	8006ef4 <__hi0bits>
 8006586:	f1c0 0020 	rsb	r0, r0, #32
 800658a:	9b07      	ldr	r3, [sp, #28]
 800658c:	4418      	add	r0, r3
 800658e:	f010 001f 	ands.w	r0, r0, #31
 8006592:	f000 80f0 	beq.w	8006776 <_dtoa_r+0x9ae>
 8006596:	f1c0 0320 	rsb	r3, r0, #32
 800659a:	2b04      	cmp	r3, #4
 800659c:	f340 80e2 	ble.w	8006764 <_dtoa_r+0x99c>
 80065a0:	9b07      	ldr	r3, [sp, #28]
 80065a2:	f1c0 001c 	rsb	r0, r0, #28
 80065a6:	4480      	add	r8, r0
 80065a8:	4405      	add	r5, r0
 80065aa:	4403      	add	r3, r0
 80065ac:	9307      	str	r3, [sp, #28]
 80065ae:	f1b8 0f00 	cmp.w	r8, #0
 80065b2:	dd05      	ble.n	80065c0 <_dtoa_r+0x7f8>
 80065b4:	4651      	mov	r1, sl
 80065b6:	4642      	mov	r2, r8
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 fdcd 	bl	8007158 <__lshift>
 80065be:	4682      	mov	sl, r0
 80065c0:	9b07      	ldr	r3, [sp, #28]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dd05      	ble.n	80065d2 <_dtoa_r+0x80a>
 80065c6:	4631      	mov	r1, r6
 80065c8:	461a      	mov	r2, r3
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 fdc4 	bl	8007158 <__lshift>
 80065d0:	4606      	mov	r6, r0
 80065d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 80d3 	beq.w	8006780 <_dtoa_r+0x9b8>
 80065da:	4631      	mov	r1, r6
 80065dc:	4650      	mov	r0, sl
 80065de:	f000 fe0c 	bl	80071fa <__mcmp>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f280 80cc 	bge.w	8006780 <_dtoa_r+0x9b8>
 80065e8:	2300      	movs	r3, #0
 80065ea:	4651      	mov	r1, sl
 80065ec:	220a      	movs	r2, #10
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 fc45 	bl	8006e7e <__multadd>
 80065f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065fa:	4682      	mov	sl, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 81a9 	beq.w	8006954 <_dtoa_r+0xb8c>
 8006602:	2300      	movs	r3, #0
 8006604:	4639      	mov	r1, r7
 8006606:	220a      	movs	r2, #10
 8006608:	4620      	mov	r0, r4
 800660a:	f000 fc38 	bl	8006e7e <__multadd>
 800660e:	9b04      	ldr	r3, [sp, #16]
 8006610:	4607      	mov	r7, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	dc03      	bgt.n	800661e <_dtoa_r+0x856>
 8006616:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006618:	2b02      	cmp	r3, #2
 800661a:	f300 80b9 	bgt.w	8006790 <_dtoa_r+0x9c8>
 800661e:	2d00      	cmp	r5, #0
 8006620:	dd05      	ble.n	800662e <_dtoa_r+0x866>
 8006622:	4639      	mov	r1, r7
 8006624:	462a      	mov	r2, r5
 8006626:	4620      	mov	r0, r4
 8006628:	f000 fd96 	bl	8007158 <__lshift>
 800662c:	4607      	mov	r7, r0
 800662e:	9b08      	ldr	r3, [sp, #32]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8110 	beq.w	8006856 <_dtoa_r+0xa8e>
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4620      	mov	r0, r4
 800663a:	f000 fbd5 	bl	8006de8 <_Balloc>
 800663e:	4605      	mov	r5, r0
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	f107 010c 	add.w	r1, r7, #12
 8006646:	3202      	adds	r2, #2
 8006648:	0092      	lsls	r2, r2, #2
 800664a:	300c      	adds	r0, #12
 800664c:	f7fe fb10 	bl	8004c70 <memcpy>
 8006650:	2201      	movs	r2, #1
 8006652:	4629      	mov	r1, r5
 8006654:	4620      	mov	r0, r4
 8006656:	f000 fd7f 	bl	8007158 <__lshift>
 800665a:	9707      	str	r7, [sp, #28]
 800665c:	4607      	mov	r7, r0
 800665e:	9b02      	ldr	r3, [sp, #8]
 8006660:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	9308      	str	r3, [sp, #32]
 800666a:	4631      	mov	r1, r6
 800666c:	4650      	mov	r0, sl
 800666e:	f7ff fb1d 	bl	8005cac <quorem>
 8006672:	9907      	ldr	r1, [sp, #28]
 8006674:	4605      	mov	r5, r0
 8006676:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800667a:	4650      	mov	r0, sl
 800667c:	f000 fdbd 	bl	80071fa <__mcmp>
 8006680:	463a      	mov	r2, r7
 8006682:	9002      	str	r0, [sp, #8]
 8006684:	4631      	mov	r1, r6
 8006686:	4620      	mov	r0, r4
 8006688:	f000 fdd1 	bl	800722e <__mdiff>
 800668c:	68c3      	ldr	r3, [r0, #12]
 800668e:	4602      	mov	r2, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	f040 80e2 	bne.w	800685a <_dtoa_r+0xa92>
 8006696:	4601      	mov	r1, r0
 8006698:	9009      	str	r0, [sp, #36]	; 0x24
 800669a:	4650      	mov	r0, sl
 800669c:	f000 fdad 	bl	80071fa <__mcmp>
 80066a0:	4603      	mov	r3, r0
 80066a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a4:	4611      	mov	r1, r2
 80066a6:	4620      	mov	r0, r4
 80066a8:	9309      	str	r3, [sp, #36]	; 0x24
 80066aa:	f000 fbd1 	bl	8006e50 <_Bfree>
 80066ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f040 80d4 	bne.w	800685e <_dtoa_r+0xa96>
 80066b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80066b8:	2a00      	cmp	r2, #0
 80066ba:	f040 80d0 	bne.w	800685e <_dtoa_r+0xa96>
 80066be:	9a08      	ldr	r2, [sp, #32]
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	f040 80cc 	bne.w	800685e <_dtoa_r+0xa96>
 80066c6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066ca:	f000 80e8 	beq.w	800689e <_dtoa_r+0xad6>
 80066ce:	9b02      	ldr	r3, [sp, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dd01      	ble.n	80066d8 <_dtoa_r+0x910>
 80066d4:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80066d8:	f108 0501 	add.w	r5, r8, #1
 80066dc:	f888 9000 	strb.w	r9, [r8]
 80066e0:	e06b      	b.n	80067ba <_dtoa_r+0x9f2>
 80066e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066e4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066e8:	e6f7      	b.n	80064da <_dtoa_r+0x712>
 80066ea:	9b08      	ldr	r3, [sp, #32]
 80066ec:	f109 36ff 	add.w	r6, r9, #4294967295
 80066f0:	42b3      	cmp	r3, r6
 80066f2:	bfb7      	itett	lt
 80066f4:	9b08      	ldrlt	r3, [sp, #32]
 80066f6:	1b9e      	subge	r6, r3, r6
 80066f8:	1af2      	sublt	r2, r6, r3
 80066fa:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80066fc:	bfbf      	itttt	lt
 80066fe:	9608      	strlt	r6, [sp, #32]
 8006700:	189b      	addlt	r3, r3, r2
 8006702:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006704:	2600      	movlt	r6, #0
 8006706:	f1b9 0f00 	cmp.w	r9, #0
 800670a:	bfb9      	ittee	lt
 800670c:	eba8 0509 	sublt.w	r5, r8, r9
 8006710:	2300      	movlt	r3, #0
 8006712:	4645      	movge	r5, r8
 8006714:	464b      	movge	r3, r9
 8006716:	e6e2      	b.n	80064de <_dtoa_r+0x716>
 8006718:	9e08      	ldr	r6, [sp, #32]
 800671a:	4645      	mov	r5, r8
 800671c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800671e:	e6e7      	b.n	80064f0 <_dtoa_r+0x728>
 8006720:	9a08      	ldr	r2, [sp, #32]
 8006722:	e710      	b.n	8006546 <_dtoa_r+0x77e>
 8006724:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006726:	2b01      	cmp	r3, #1
 8006728:	dc18      	bgt.n	800675c <_dtoa_r+0x994>
 800672a:	9b02      	ldr	r3, [sp, #8]
 800672c:	b9b3      	cbnz	r3, 800675c <_dtoa_r+0x994>
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006734:	b9a3      	cbnz	r3, 8006760 <_dtoa_r+0x998>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800673c:	0d1b      	lsrs	r3, r3, #20
 800673e:	051b      	lsls	r3, r3, #20
 8006740:	b12b      	cbz	r3, 800674e <_dtoa_r+0x986>
 8006742:	9b07      	ldr	r3, [sp, #28]
 8006744:	f108 0801 	add.w	r8, r8, #1
 8006748:	3301      	adds	r3, #1
 800674a:	9307      	str	r3, [sp, #28]
 800674c:	2301      	movs	r3, #1
 800674e:	9308      	str	r3, [sp, #32]
 8006750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006752:	2b00      	cmp	r3, #0
 8006754:	f47f af11 	bne.w	800657a <_dtoa_r+0x7b2>
 8006758:	2001      	movs	r0, #1
 800675a:	e716      	b.n	800658a <_dtoa_r+0x7c2>
 800675c:	2300      	movs	r3, #0
 800675e:	e7f6      	b.n	800674e <_dtoa_r+0x986>
 8006760:	9b02      	ldr	r3, [sp, #8]
 8006762:	e7f4      	b.n	800674e <_dtoa_r+0x986>
 8006764:	f43f af23 	beq.w	80065ae <_dtoa_r+0x7e6>
 8006768:	9a07      	ldr	r2, [sp, #28]
 800676a:	331c      	adds	r3, #28
 800676c:	441a      	add	r2, r3
 800676e:	4498      	add	r8, r3
 8006770:	441d      	add	r5, r3
 8006772:	4613      	mov	r3, r2
 8006774:	e71a      	b.n	80065ac <_dtoa_r+0x7e4>
 8006776:	4603      	mov	r3, r0
 8006778:	e7f6      	b.n	8006768 <_dtoa_r+0x9a0>
 800677a:	bf00      	nop
 800677c:	40240000 	.word	0x40240000
 8006780:	f1b9 0f00 	cmp.w	r9, #0
 8006784:	dc33      	bgt.n	80067ee <_dtoa_r+0xa26>
 8006786:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006788:	2b02      	cmp	r3, #2
 800678a:	dd30      	ble.n	80067ee <_dtoa_r+0xa26>
 800678c:	f8cd 9010 	str.w	r9, [sp, #16]
 8006790:	9b04      	ldr	r3, [sp, #16]
 8006792:	b963      	cbnz	r3, 80067ae <_dtoa_r+0x9e6>
 8006794:	4631      	mov	r1, r6
 8006796:	2205      	movs	r2, #5
 8006798:	4620      	mov	r0, r4
 800679a:	f000 fb70 	bl	8006e7e <__multadd>
 800679e:	4601      	mov	r1, r0
 80067a0:	4606      	mov	r6, r0
 80067a2:	4650      	mov	r0, sl
 80067a4:	f000 fd29 	bl	80071fa <__mcmp>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	f73f ad5c 	bgt.w	8006266 <_dtoa_r+0x49e>
 80067ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067b0:	9d06      	ldr	r5, [sp, #24]
 80067b2:	ea6f 0b03 	mvn.w	fp, r3
 80067b6:	2300      	movs	r3, #0
 80067b8:	9307      	str	r3, [sp, #28]
 80067ba:	4631      	mov	r1, r6
 80067bc:	4620      	mov	r0, r4
 80067be:	f000 fb47 	bl	8006e50 <_Bfree>
 80067c2:	2f00      	cmp	r7, #0
 80067c4:	f43f ae4b 	beq.w	800645e <_dtoa_r+0x696>
 80067c8:	9b07      	ldr	r3, [sp, #28]
 80067ca:	b12b      	cbz	r3, 80067d8 <_dtoa_r+0xa10>
 80067cc:	42bb      	cmp	r3, r7
 80067ce:	d003      	beq.n	80067d8 <_dtoa_r+0xa10>
 80067d0:	4619      	mov	r1, r3
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 fb3c 	bl	8006e50 <_Bfree>
 80067d8:	4639      	mov	r1, r7
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fb38 	bl	8006e50 <_Bfree>
 80067e0:	e63d      	b.n	800645e <_dtoa_r+0x696>
 80067e2:	2600      	movs	r6, #0
 80067e4:	4637      	mov	r7, r6
 80067e6:	e7e2      	b.n	80067ae <_dtoa_r+0x9e6>
 80067e8:	46bb      	mov	fp, r7
 80067ea:	4637      	mov	r7, r6
 80067ec:	e53b      	b.n	8006266 <_dtoa_r+0x49e>
 80067ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f47f af12 	bne.w	800661e <_dtoa_r+0x856>
 80067fa:	9d06      	ldr	r5, [sp, #24]
 80067fc:	4631      	mov	r1, r6
 80067fe:	4650      	mov	r0, sl
 8006800:	f7ff fa54 	bl	8005cac <quorem>
 8006804:	9b06      	ldr	r3, [sp, #24]
 8006806:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800680a:	f805 9b01 	strb.w	r9, [r5], #1
 800680e:	9a04      	ldr	r2, [sp, #16]
 8006810:	1aeb      	subs	r3, r5, r3
 8006812:	429a      	cmp	r2, r3
 8006814:	f300 8081 	bgt.w	800691a <_dtoa_r+0xb52>
 8006818:	9b06      	ldr	r3, [sp, #24]
 800681a:	2a01      	cmp	r2, #1
 800681c:	bfac      	ite	ge
 800681e:	189b      	addge	r3, r3, r2
 8006820:	3301      	addlt	r3, #1
 8006822:	4698      	mov	r8, r3
 8006824:	2300      	movs	r3, #0
 8006826:	9307      	str	r3, [sp, #28]
 8006828:	4651      	mov	r1, sl
 800682a:	2201      	movs	r2, #1
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fc93 	bl	8007158 <__lshift>
 8006832:	4631      	mov	r1, r6
 8006834:	4682      	mov	sl, r0
 8006836:	f000 fce0 	bl	80071fa <__mcmp>
 800683a:	2800      	cmp	r0, #0
 800683c:	dc34      	bgt.n	80068a8 <_dtoa_r+0xae0>
 800683e:	d102      	bne.n	8006846 <_dtoa_r+0xa7e>
 8006840:	f019 0f01 	tst.w	r9, #1
 8006844:	d130      	bne.n	80068a8 <_dtoa_r+0xae0>
 8006846:	4645      	mov	r5, r8
 8006848:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800684c:	1e6a      	subs	r2, r5, #1
 800684e:	2b30      	cmp	r3, #48	; 0x30
 8006850:	d1b3      	bne.n	80067ba <_dtoa_r+0x9f2>
 8006852:	4615      	mov	r5, r2
 8006854:	e7f8      	b.n	8006848 <_dtoa_r+0xa80>
 8006856:	4638      	mov	r0, r7
 8006858:	e6ff      	b.n	800665a <_dtoa_r+0x892>
 800685a:	2301      	movs	r3, #1
 800685c:	e722      	b.n	80066a4 <_dtoa_r+0x8dc>
 800685e:	9a02      	ldr	r2, [sp, #8]
 8006860:	2a00      	cmp	r2, #0
 8006862:	db04      	blt.n	800686e <_dtoa_r+0xaa6>
 8006864:	d128      	bne.n	80068b8 <_dtoa_r+0xaf0>
 8006866:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006868:	bb32      	cbnz	r2, 80068b8 <_dtoa_r+0xaf0>
 800686a:	9a08      	ldr	r2, [sp, #32]
 800686c:	bb22      	cbnz	r2, 80068b8 <_dtoa_r+0xaf0>
 800686e:	2b00      	cmp	r3, #0
 8006870:	f77f af32 	ble.w	80066d8 <_dtoa_r+0x910>
 8006874:	4651      	mov	r1, sl
 8006876:	2201      	movs	r2, #1
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fc6d 	bl	8007158 <__lshift>
 800687e:	4631      	mov	r1, r6
 8006880:	4682      	mov	sl, r0
 8006882:	f000 fcba 	bl	80071fa <__mcmp>
 8006886:	2800      	cmp	r0, #0
 8006888:	dc05      	bgt.n	8006896 <_dtoa_r+0xace>
 800688a:	f47f af25 	bne.w	80066d8 <_dtoa_r+0x910>
 800688e:	f019 0f01 	tst.w	r9, #1
 8006892:	f43f af21 	beq.w	80066d8 <_dtoa_r+0x910>
 8006896:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800689a:	f47f af1b 	bne.w	80066d4 <_dtoa_r+0x90c>
 800689e:	2339      	movs	r3, #57	; 0x39
 80068a0:	f108 0801 	add.w	r8, r8, #1
 80068a4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80068a8:	4645      	mov	r5, r8
 80068aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068ae:	1e6a      	subs	r2, r5, #1
 80068b0:	2b39      	cmp	r3, #57	; 0x39
 80068b2:	d03a      	beq.n	800692a <_dtoa_r+0xb62>
 80068b4:	3301      	adds	r3, #1
 80068b6:	e03f      	b.n	8006938 <_dtoa_r+0xb70>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f108 0501 	add.w	r5, r8, #1
 80068be:	dd05      	ble.n	80068cc <_dtoa_r+0xb04>
 80068c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068c4:	d0eb      	beq.n	800689e <_dtoa_r+0xad6>
 80068c6:	f109 0901 	add.w	r9, r9, #1
 80068ca:	e707      	b.n	80066dc <_dtoa_r+0x914>
 80068cc:	9b06      	ldr	r3, [sp, #24]
 80068ce:	9a04      	ldr	r2, [sp, #16]
 80068d0:	1aeb      	subs	r3, r5, r3
 80068d2:	4293      	cmp	r3, r2
 80068d4:	46a8      	mov	r8, r5
 80068d6:	f805 9c01 	strb.w	r9, [r5, #-1]
 80068da:	d0a5      	beq.n	8006828 <_dtoa_r+0xa60>
 80068dc:	4651      	mov	r1, sl
 80068de:	2300      	movs	r3, #0
 80068e0:	220a      	movs	r2, #10
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 facb 	bl	8006e7e <__multadd>
 80068e8:	9b07      	ldr	r3, [sp, #28]
 80068ea:	4682      	mov	sl, r0
 80068ec:	42bb      	cmp	r3, r7
 80068ee:	f04f 020a 	mov.w	r2, #10
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	9907      	ldr	r1, [sp, #28]
 80068f8:	4620      	mov	r0, r4
 80068fa:	d104      	bne.n	8006906 <_dtoa_r+0xb3e>
 80068fc:	f000 fabf 	bl	8006e7e <__multadd>
 8006900:	9007      	str	r0, [sp, #28]
 8006902:	4607      	mov	r7, r0
 8006904:	e6b1      	b.n	800666a <_dtoa_r+0x8a2>
 8006906:	f000 faba 	bl	8006e7e <__multadd>
 800690a:	2300      	movs	r3, #0
 800690c:	9007      	str	r0, [sp, #28]
 800690e:	220a      	movs	r2, #10
 8006910:	4639      	mov	r1, r7
 8006912:	4620      	mov	r0, r4
 8006914:	f000 fab3 	bl	8006e7e <__multadd>
 8006918:	e7f3      	b.n	8006902 <_dtoa_r+0xb3a>
 800691a:	4651      	mov	r1, sl
 800691c:	2300      	movs	r3, #0
 800691e:	220a      	movs	r2, #10
 8006920:	4620      	mov	r0, r4
 8006922:	f000 faac 	bl	8006e7e <__multadd>
 8006926:	4682      	mov	sl, r0
 8006928:	e768      	b.n	80067fc <_dtoa_r+0xa34>
 800692a:	9b06      	ldr	r3, [sp, #24]
 800692c:	4293      	cmp	r3, r2
 800692e:	d105      	bne.n	800693c <_dtoa_r+0xb74>
 8006930:	2331      	movs	r3, #49	; 0x31
 8006932:	9a06      	ldr	r2, [sp, #24]
 8006934:	f10b 0b01 	add.w	fp, fp, #1
 8006938:	7013      	strb	r3, [r2, #0]
 800693a:	e73e      	b.n	80067ba <_dtoa_r+0x9f2>
 800693c:	4615      	mov	r5, r2
 800693e:	e7b4      	b.n	80068aa <_dtoa_r+0xae2>
 8006940:	4b09      	ldr	r3, [pc, #36]	; (8006968 <_dtoa_r+0xba0>)
 8006942:	f7ff baa3 	b.w	8005e8c <_dtoa_r+0xc4>
 8006946:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006948:	2b00      	cmp	r3, #0
 800694a:	f47f aa7d 	bne.w	8005e48 <_dtoa_r+0x80>
 800694e:	4b07      	ldr	r3, [pc, #28]	; (800696c <_dtoa_r+0xba4>)
 8006950:	f7ff ba9c 	b.w	8005e8c <_dtoa_r+0xc4>
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f73f af4f 	bgt.w	80067fa <_dtoa_r+0xa32>
 800695c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800695e:	2b02      	cmp	r3, #2
 8006960:	f77f af4b 	ble.w	80067fa <_dtoa_r+0xa32>
 8006964:	e714      	b.n	8006790 <_dtoa_r+0x9c8>
 8006966:	bf00      	nop
 8006968:	08007b55 	.word	0x08007b55
 800696c:	08007b77 	.word	0x08007b77

08006970 <_localeconv_r>:
 8006970:	4b04      	ldr	r3, [pc, #16]	; (8006984 <_localeconv_r+0x14>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a18      	ldr	r0, [r3, #32]
 8006976:	4b04      	ldr	r3, [pc, #16]	; (8006988 <_localeconv_r+0x18>)
 8006978:	2800      	cmp	r0, #0
 800697a:	bf08      	it	eq
 800697c:	4618      	moveq	r0, r3
 800697e:	30f0      	adds	r0, #240	; 0xf0
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20000024 	.word	0x20000024
 8006988:	20000528 	.word	0x20000528

0800698c <malloc>:
 800698c:	4b02      	ldr	r3, [pc, #8]	; (8006998 <malloc+0xc>)
 800698e:	4601      	mov	r1, r0
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	f000 b803 	b.w	800699c <_malloc_r>
 8006996:	bf00      	nop
 8006998:	20000024 	.word	0x20000024

0800699c <_malloc_r>:
 800699c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	f101 040b 	add.w	r4, r1, #11
 80069a4:	2c16      	cmp	r4, #22
 80069a6:	4681      	mov	r9, r0
 80069a8:	d907      	bls.n	80069ba <_malloc_r+0x1e>
 80069aa:	f034 0407 	bics.w	r4, r4, #7
 80069ae:	d505      	bpl.n	80069bc <_malloc_r+0x20>
 80069b0:	230c      	movs	r3, #12
 80069b2:	f8c9 3000 	str.w	r3, [r9]
 80069b6:	2600      	movs	r6, #0
 80069b8:	e131      	b.n	8006c1e <_malloc_r+0x282>
 80069ba:	2410      	movs	r4, #16
 80069bc:	428c      	cmp	r4, r1
 80069be:	d3f7      	bcc.n	80069b0 <_malloc_r+0x14>
 80069c0:	4648      	mov	r0, r9
 80069c2:	f000 fa05 	bl	8006dd0 <__malloc_lock>
 80069c6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80069ca:	4d9b      	ldr	r5, [pc, #620]	; (8006c38 <_malloc_r+0x29c>)
 80069cc:	d236      	bcs.n	8006a3c <_malloc_r+0xa0>
 80069ce:	f104 0208 	add.w	r2, r4, #8
 80069d2:	442a      	add	r2, r5
 80069d4:	6856      	ldr	r6, [r2, #4]
 80069d6:	f1a2 0108 	sub.w	r1, r2, #8
 80069da:	428e      	cmp	r6, r1
 80069dc:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80069e0:	d102      	bne.n	80069e8 <_malloc_r+0x4c>
 80069e2:	68d6      	ldr	r6, [r2, #12]
 80069e4:	42b2      	cmp	r2, r6
 80069e6:	d010      	beq.n	8006a0a <_malloc_r+0x6e>
 80069e8:	6873      	ldr	r3, [r6, #4]
 80069ea:	68f2      	ldr	r2, [r6, #12]
 80069ec:	68b1      	ldr	r1, [r6, #8]
 80069ee:	f023 0303 	bic.w	r3, r3, #3
 80069f2:	60ca      	str	r2, [r1, #12]
 80069f4:	4433      	add	r3, r6
 80069f6:	6091      	str	r1, [r2, #8]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	605a      	str	r2, [r3, #4]
 8006a00:	4648      	mov	r0, r9
 8006a02:	f000 f9eb 	bl	8006ddc <__malloc_unlock>
 8006a06:	3608      	adds	r6, #8
 8006a08:	e109      	b.n	8006c1e <_malloc_r+0x282>
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	4a8b      	ldr	r2, [pc, #556]	; (8006c3c <_malloc_r+0x2a0>)
 8006a0e:	692e      	ldr	r6, [r5, #16]
 8006a10:	4611      	mov	r1, r2
 8006a12:	4296      	cmp	r6, r2
 8006a14:	d06d      	beq.n	8006af2 <_malloc_r+0x156>
 8006a16:	6870      	ldr	r0, [r6, #4]
 8006a18:	f020 0003 	bic.w	r0, r0, #3
 8006a1c:	1b07      	subs	r7, r0, r4
 8006a1e:	2f0f      	cmp	r7, #15
 8006a20:	dd47      	ble.n	8006ab2 <_malloc_r+0x116>
 8006a22:	1933      	adds	r3, r6, r4
 8006a24:	f044 0401 	orr.w	r4, r4, #1
 8006a28:	6074      	str	r4, [r6, #4]
 8006a2a:	616b      	str	r3, [r5, #20]
 8006a2c:	612b      	str	r3, [r5, #16]
 8006a2e:	60da      	str	r2, [r3, #12]
 8006a30:	609a      	str	r2, [r3, #8]
 8006a32:	f047 0201 	orr.w	r2, r7, #1
 8006a36:	605a      	str	r2, [r3, #4]
 8006a38:	5037      	str	r7, [r6, r0]
 8006a3a:	e7e1      	b.n	8006a00 <_malloc_r+0x64>
 8006a3c:	0a63      	lsrs	r3, r4, #9
 8006a3e:	d02a      	beq.n	8006a96 <_malloc_r+0xfa>
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d812      	bhi.n	8006a6a <_malloc_r+0xce>
 8006a44:	09a3      	lsrs	r3, r4, #6
 8006a46:	3338      	adds	r3, #56	; 0x38
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006a4e:	6856      	ldr	r6, [r2, #4]
 8006a50:	f1a2 0008 	sub.w	r0, r2, #8
 8006a54:	4286      	cmp	r6, r0
 8006a56:	d006      	beq.n	8006a66 <_malloc_r+0xca>
 8006a58:	6872      	ldr	r2, [r6, #4]
 8006a5a:	f022 0203 	bic.w	r2, r2, #3
 8006a5e:	1b11      	subs	r1, r2, r4
 8006a60:	290f      	cmp	r1, #15
 8006a62:	dd1c      	ble.n	8006a9e <_malloc_r+0x102>
 8006a64:	3b01      	subs	r3, #1
 8006a66:	3301      	adds	r3, #1
 8006a68:	e7d0      	b.n	8006a0c <_malloc_r+0x70>
 8006a6a:	2b14      	cmp	r3, #20
 8006a6c:	d801      	bhi.n	8006a72 <_malloc_r+0xd6>
 8006a6e:	335b      	adds	r3, #91	; 0x5b
 8006a70:	e7ea      	b.n	8006a48 <_malloc_r+0xac>
 8006a72:	2b54      	cmp	r3, #84	; 0x54
 8006a74:	d802      	bhi.n	8006a7c <_malloc_r+0xe0>
 8006a76:	0b23      	lsrs	r3, r4, #12
 8006a78:	336e      	adds	r3, #110	; 0x6e
 8006a7a:	e7e5      	b.n	8006a48 <_malloc_r+0xac>
 8006a7c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006a80:	d802      	bhi.n	8006a88 <_malloc_r+0xec>
 8006a82:	0be3      	lsrs	r3, r4, #15
 8006a84:	3377      	adds	r3, #119	; 0x77
 8006a86:	e7df      	b.n	8006a48 <_malloc_r+0xac>
 8006a88:	f240 5254 	movw	r2, #1364	; 0x554
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d804      	bhi.n	8006a9a <_malloc_r+0xfe>
 8006a90:	0ca3      	lsrs	r3, r4, #18
 8006a92:	337c      	adds	r3, #124	; 0x7c
 8006a94:	e7d8      	b.n	8006a48 <_malloc_r+0xac>
 8006a96:	233f      	movs	r3, #63	; 0x3f
 8006a98:	e7d6      	b.n	8006a48 <_malloc_r+0xac>
 8006a9a:	237e      	movs	r3, #126	; 0x7e
 8006a9c:	e7d4      	b.n	8006a48 <_malloc_r+0xac>
 8006a9e:	2900      	cmp	r1, #0
 8006aa0:	68f1      	ldr	r1, [r6, #12]
 8006aa2:	db04      	blt.n	8006aae <_malloc_r+0x112>
 8006aa4:	68b3      	ldr	r3, [r6, #8]
 8006aa6:	60d9      	str	r1, [r3, #12]
 8006aa8:	608b      	str	r3, [r1, #8]
 8006aaa:	18b3      	adds	r3, r6, r2
 8006aac:	e7a4      	b.n	80069f8 <_malloc_r+0x5c>
 8006aae:	460e      	mov	r6, r1
 8006ab0:	e7d0      	b.n	8006a54 <_malloc_r+0xb8>
 8006ab2:	2f00      	cmp	r7, #0
 8006ab4:	616a      	str	r2, [r5, #20]
 8006ab6:	612a      	str	r2, [r5, #16]
 8006ab8:	db05      	blt.n	8006ac6 <_malloc_r+0x12a>
 8006aba:	4430      	add	r0, r6
 8006abc:	6843      	ldr	r3, [r0, #4]
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	6043      	str	r3, [r0, #4]
 8006ac4:	e79c      	b.n	8006a00 <_malloc_r+0x64>
 8006ac6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006aca:	d244      	bcs.n	8006b56 <_malloc_r+0x1ba>
 8006acc:	2201      	movs	r2, #1
 8006ace:	08c0      	lsrs	r0, r0, #3
 8006ad0:	1087      	asrs	r7, r0, #2
 8006ad2:	fa02 f707 	lsl.w	r7, r2, r7
 8006ad6:	686a      	ldr	r2, [r5, #4]
 8006ad8:	3001      	adds	r0, #1
 8006ada:	433a      	orrs	r2, r7
 8006adc:	606a      	str	r2, [r5, #4]
 8006ade:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8006ae2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006ae6:	3a08      	subs	r2, #8
 8006ae8:	60f2      	str	r2, [r6, #12]
 8006aea:	60b7      	str	r7, [r6, #8]
 8006aec:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8006af0:	60fe      	str	r6, [r7, #12]
 8006af2:	2001      	movs	r0, #1
 8006af4:	109a      	asrs	r2, r3, #2
 8006af6:	fa00 f202 	lsl.w	r2, r0, r2
 8006afa:	6868      	ldr	r0, [r5, #4]
 8006afc:	4282      	cmp	r2, r0
 8006afe:	f200 809f 	bhi.w	8006c40 <_malloc_r+0x2a4>
 8006b02:	4202      	tst	r2, r0
 8006b04:	d106      	bne.n	8006b14 <_malloc_r+0x178>
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	0052      	lsls	r2, r2, #1
 8006b0c:	4202      	tst	r2, r0
 8006b0e:	f103 0304 	add.w	r3, r3, #4
 8006b12:	d0fa      	beq.n	8006b0a <_malloc_r+0x16e>
 8006b14:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8006b18:	46e0      	mov	r8, ip
 8006b1a:	469e      	mov	lr, r3
 8006b1c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8006b20:	4546      	cmp	r6, r8
 8006b22:	d153      	bne.n	8006bcc <_malloc_r+0x230>
 8006b24:	f10e 0e01 	add.w	lr, lr, #1
 8006b28:	f01e 0f03 	tst.w	lr, #3
 8006b2c:	f108 0808 	add.w	r8, r8, #8
 8006b30:	d1f4      	bne.n	8006b1c <_malloc_r+0x180>
 8006b32:	0798      	lsls	r0, r3, #30
 8006b34:	d179      	bne.n	8006c2a <_malloc_r+0x28e>
 8006b36:	686b      	ldr	r3, [r5, #4]
 8006b38:	ea23 0302 	bic.w	r3, r3, r2
 8006b3c:	606b      	str	r3, [r5, #4]
 8006b3e:	6868      	ldr	r0, [r5, #4]
 8006b40:	0052      	lsls	r2, r2, #1
 8006b42:	4282      	cmp	r2, r0
 8006b44:	d87c      	bhi.n	8006c40 <_malloc_r+0x2a4>
 8006b46:	2a00      	cmp	r2, #0
 8006b48:	d07a      	beq.n	8006c40 <_malloc_r+0x2a4>
 8006b4a:	4673      	mov	r3, lr
 8006b4c:	4202      	tst	r2, r0
 8006b4e:	d1e1      	bne.n	8006b14 <_malloc_r+0x178>
 8006b50:	3304      	adds	r3, #4
 8006b52:	0052      	lsls	r2, r2, #1
 8006b54:	e7fa      	b.n	8006b4c <_malloc_r+0x1b0>
 8006b56:	0a42      	lsrs	r2, r0, #9
 8006b58:	2a04      	cmp	r2, #4
 8006b5a:	d815      	bhi.n	8006b88 <_malloc_r+0x1ec>
 8006b5c:	0982      	lsrs	r2, r0, #6
 8006b5e:	3238      	adds	r2, #56	; 0x38
 8006b60:	1c57      	adds	r7, r2, #1
 8006b62:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006b66:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006b6a:	45be      	cmp	lr, r7
 8006b6c:	d126      	bne.n	8006bbc <_malloc_r+0x220>
 8006b6e:	2001      	movs	r0, #1
 8006b70:	1092      	asrs	r2, r2, #2
 8006b72:	fa00 f202 	lsl.w	r2, r0, r2
 8006b76:	6868      	ldr	r0, [r5, #4]
 8006b78:	4310      	orrs	r0, r2
 8006b7a:	6068      	str	r0, [r5, #4]
 8006b7c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8006b80:	60b7      	str	r7, [r6, #8]
 8006b82:	f8ce 6008 	str.w	r6, [lr, #8]
 8006b86:	e7b3      	b.n	8006af0 <_malloc_r+0x154>
 8006b88:	2a14      	cmp	r2, #20
 8006b8a:	d801      	bhi.n	8006b90 <_malloc_r+0x1f4>
 8006b8c:	325b      	adds	r2, #91	; 0x5b
 8006b8e:	e7e7      	b.n	8006b60 <_malloc_r+0x1c4>
 8006b90:	2a54      	cmp	r2, #84	; 0x54
 8006b92:	d802      	bhi.n	8006b9a <_malloc_r+0x1fe>
 8006b94:	0b02      	lsrs	r2, r0, #12
 8006b96:	326e      	adds	r2, #110	; 0x6e
 8006b98:	e7e2      	b.n	8006b60 <_malloc_r+0x1c4>
 8006b9a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006b9e:	d802      	bhi.n	8006ba6 <_malloc_r+0x20a>
 8006ba0:	0bc2      	lsrs	r2, r0, #15
 8006ba2:	3277      	adds	r2, #119	; 0x77
 8006ba4:	e7dc      	b.n	8006b60 <_malloc_r+0x1c4>
 8006ba6:	f240 5754 	movw	r7, #1364	; 0x554
 8006baa:	42ba      	cmp	r2, r7
 8006bac:	bf9a      	itte	ls
 8006bae:	0c82      	lsrls	r2, r0, #18
 8006bb0:	327c      	addls	r2, #124	; 0x7c
 8006bb2:	227e      	movhi	r2, #126	; 0x7e
 8006bb4:	e7d4      	b.n	8006b60 <_malloc_r+0x1c4>
 8006bb6:	68bf      	ldr	r7, [r7, #8]
 8006bb8:	45be      	cmp	lr, r7
 8006bba:	d004      	beq.n	8006bc6 <_malloc_r+0x22a>
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	f022 0203 	bic.w	r2, r2, #3
 8006bc2:	4290      	cmp	r0, r2
 8006bc4:	d3f7      	bcc.n	8006bb6 <_malloc_r+0x21a>
 8006bc6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8006bca:	e7d7      	b.n	8006b7c <_malloc_r+0x1e0>
 8006bcc:	6870      	ldr	r0, [r6, #4]
 8006bce:	68f7      	ldr	r7, [r6, #12]
 8006bd0:	f020 0003 	bic.w	r0, r0, #3
 8006bd4:	eba0 0a04 	sub.w	sl, r0, r4
 8006bd8:	f1ba 0f0f 	cmp.w	sl, #15
 8006bdc:	dd10      	ble.n	8006c00 <_malloc_r+0x264>
 8006bde:	68b2      	ldr	r2, [r6, #8]
 8006be0:	1933      	adds	r3, r6, r4
 8006be2:	f044 0401 	orr.w	r4, r4, #1
 8006be6:	6074      	str	r4, [r6, #4]
 8006be8:	60d7      	str	r7, [r2, #12]
 8006bea:	60ba      	str	r2, [r7, #8]
 8006bec:	f04a 0201 	orr.w	r2, sl, #1
 8006bf0:	616b      	str	r3, [r5, #20]
 8006bf2:	612b      	str	r3, [r5, #16]
 8006bf4:	60d9      	str	r1, [r3, #12]
 8006bf6:	6099      	str	r1, [r3, #8]
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	f846 a000 	str.w	sl, [r6, r0]
 8006bfe:	e6ff      	b.n	8006a00 <_malloc_r+0x64>
 8006c00:	f1ba 0f00 	cmp.w	sl, #0
 8006c04:	db0f      	blt.n	8006c26 <_malloc_r+0x28a>
 8006c06:	4430      	add	r0, r6
 8006c08:	6843      	ldr	r3, [r0, #4]
 8006c0a:	f043 0301 	orr.w	r3, r3, #1
 8006c0e:	6043      	str	r3, [r0, #4]
 8006c10:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006c14:	4648      	mov	r0, r9
 8006c16:	60df      	str	r7, [r3, #12]
 8006c18:	60bb      	str	r3, [r7, #8]
 8006c1a:	f000 f8df 	bl	8006ddc <__malloc_unlock>
 8006c1e:	4630      	mov	r0, r6
 8006c20:	b003      	add	sp, #12
 8006c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c26:	463e      	mov	r6, r7
 8006c28:	e77a      	b.n	8006b20 <_malloc_r+0x184>
 8006c2a:	f85c 0908 	ldr.w	r0, [ip], #-8
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	4584      	cmp	ip, r0
 8006c32:	f43f af7e 	beq.w	8006b32 <_malloc_r+0x196>
 8006c36:	e782      	b.n	8006b3e <_malloc_r+0x1a2>
 8006c38:	20000118 	.word	0x20000118
 8006c3c:	20000120 	.word	0x20000120
 8006c40:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8006c44:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006c48:	f026 0603 	bic.w	r6, r6, #3
 8006c4c:	42b4      	cmp	r4, r6
 8006c4e:	d803      	bhi.n	8006c58 <_malloc_r+0x2bc>
 8006c50:	1b33      	subs	r3, r6, r4
 8006c52:	2b0f      	cmp	r3, #15
 8006c54:	f300 8095 	bgt.w	8006d82 <_malloc_r+0x3e6>
 8006c58:	4a4f      	ldr	r2, [pc, #316]	; (8006d98 <_malloc_r+0x3fc>)
 8006c5a:	eb0b 0306 	add.w	r3, fp, r6
 8006c5e:	6817      	ldr	r7, [r2, #0]
 8006c60:	4a4e      	ldr	r2, [pc, #312]	; (8006d9c <_malloc_r+0x400>)
 8006c62:	3710      	adds	r7, #16
 8006c64:	6811      	ldr	r1, [r2, #0]
 8006c66:	4427      	add	r7, r4
 8006c68:	3101      	adds	r1, #1
 8006c6a:	d005      	beq.n	8006c78 <_malloc_r+0x2dc>
 8006c6c:	494c      	ldr	r1, [pc, #304]	; (8006da0 <_malloc_r+0x404>)
 8006c6e:	3901      	subs	r1, #1
 8006c70:	440f      	add	r7, r1
 8006c72:	3101      	adds	r1, #1
 8006c74:	4249      	negs	r1, r1
 8006c76:	400f      	ands	r7, r1
 8006c78:	4639      	mov	r1, r7
 8006c7a:	4648      	mov	r0, r9
 8006c7c:	9201      	str	r2, [sp, #4]
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	f000 fb84 	bl	800738c <_sbrk_r>
 8006c84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c88:	4680      	mov	r8, r0
 8006c8a:	d055      	beq.n	8006d38 <_malloc_r+0x39c>
 8006c8c:	9b00      	ldr	r3, [sp, #0]
 8006c8e:	9a01      	ldr	r2, [sp, #4]
 8006c90:	4283      	cmp	r3, r0
 8006c92:	d901      	bls.n	8006c98 <_malloc_r+0x2fc>
 8006c94:	45ab      	cmp	fp, r5
 8006c96:	d14f      	bne.n	8006d38 <_malloc_r+0x39c>
 8006c98:	4842      	ldr	r0, [pc, #264]	; (8006da4 <_malloc_r+0x408>)
 8006c9a:	4543      	cmp	r3, r8
 8006c9c:	6801      	ldr	r1, [r0, #0]
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	eb07 0e01 	add.w	lr, r7, r1
 8006ca4:	f8c0 e000 	str.w	lr, [r0]
 8006ca8:	493f      	ldr	r1, [pc, #252]	; (8006da8 <_malloc_r+0x40c>)
 8006caa:	d113      	bne.n	8006cd4 <_malloc_r+0x338>
 8006cac:	420b      	tst	r3, r1
 8006cae:	d111      	bne.n	8006cd4 <_malloc_r+0x338>
 8006cb0:	68ab      	ldr	r3, [r5, #8]
 8006cb2:	443e      	add	r6, r7
 8006cb4:	f046 0601 	orr.w	r6, r6, #1
 8006cb8:	605e      	str	r6, [r3, #4]
 8006cba:	4a3c      	ldr	r2, [pc, #240]	; (8006dac <_malloc_r+0x410>)
 8006cbc:	f8da 3000 	ldr.w	r3, [sl]
 8006cc0:	6811      	ldr	r1, [r2, #0]
 8006cc2:	428b      	cmp	r3, r1
 8006cc4:	bf88      	it	hi
 8006cc6:	6013      	strhi	r3, [r2, #0]
 8006cc8:	4a39      	ldr	r2, [pc, #228]	; (8006db0 <_malloc_r+0x414>)
 8006cca:	6811      	ldr	r1, [r2, #0]
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	bf88      	it	hi
 8006cd0:	6013      	strhi	r3, [r2, #0]
 8006cd2:	e031      	b.n	8006d38 <_malloc_r+0x39c>
 8006cd4:	6810      	ldr	r0, [r2, #0]
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	bf1b      	ittet	ne
 8006cda:	eba8 0303 	subne.w	r3, r8, r3
 8006cde:	4473      	addne	r3, lr
 8006ce0:	f8c2 8000 	streq.w	r8, [r2]
 8006ce4:	f8ca 3000 	strne.w	r3, [sl]
 8006ce8:	f018 0007 	ands.w	r0, r8, #7
 8006cec:	bf1c      	itt	ne
 8006cee:	f1c0 0008 	rsbne	r0, r0, #8
 8006cf2:	4480      	addne	r8, r0
 8006cf4:	4b2a      	ldr	r3, [pc, #168]	; (8006da0 <_malloc_r+0x404>)
 8006cf6:	4447      	add	r7, r8
 8006cf8:	4418      	add	r0, r3
 8006cfa:	400f      	ands	r7, r1
 8006cfc:	1bc7      	subs	r7, r0, r7
 8006cfe:	4639      	mov	r1, r7
 8006d00:	4648      	mov	r0, r9
 8006d02:	f000 fb43 	bl	800738c <_sbrk_r>
 8006d06:	1c43      	adds	r3, r0, #1
 8006d08:	bf04      	itt	eq
 8006d0a:	4640      	moveq	r0, r8
 8006d0c:	2700      	moveq	r7, #0
 8006d0e:	f8da 3000 	ldr.w	r3, [sl]
 8006d12:	eba0 0008 	sub.w	r0, r0, r8
 8006d16:	443b      	add	r3, r7
 8006d18:	4407      	add	r7, r0
 8006d1a:	f047 0701 	orr.w	r7, r7, #1
 8006d1e:	45ab      	cmp	fp, r5
 8006d20:	f8c5 8008 	str.w	r8, [r5, #8]
 8006d24:	f8ca 3000 	str.w	r3, [sl]
 8006d28:	f8c8 7004 	str.w	r7, [r8, #4]
 8006d2c:	d0c5      	beq.n	8006cba <_malloc_r+0x31e>
 8006d2e:	2e0f      	cmp	r6, #15
 8006d30:	d810      	bhi.n	8006d54 <_malloc_r+0x3b8>
 8006d32:	2301      	movs	r3, #1
 8006d34:	f8c8 3004 	str.w	r3, [r8, #4]
 8006d38:	68ab      	ldr	r3, [r5, #8]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	f022 0203 	bic.w	r2, r2, #3
 8006d40:	4294      	cmp	r4, r2
 8006d42:	eba2 0304 	sub.w	r3, r2, r4
 8006d46:	d801      	bhi.n	8006d4c <_malloc_r+0x3b0>
 8006d48:	2b0f      	cmp	r3, #15
 8006d4a:	dc1a      	bgt.n	8006d82 <_malloc_r+0x3e6>
 8006d4c:	4648      	mov	r0, r9
 8006d4e:	f000 f845 	bl	8006ddc <__malloc_unlock>
 8006d52:	e630      	b.n	80069b6 <_malloc_r+0x1a>
 8006d54:	2205      	movs	r2, #5
 8006d56:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006d5a:	3e0c      	subs	r6, #12
 8006d5c:	f026 0607 	bic.w	r6, r6, #7
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	4333      	orrs	r3, r6
 8006d66:	f8cb 3004 	str.w	r3, [fp, #4]
 8006d6a:	2e0f      	cmp	r6, #15
 8006d6c:	eb0b 0306 	add.w	r3, fp, r6
 8006d70:	605a      	str	r2, [r3, #4]
 8006d72:	609a      	str	r2, [r3, #8]
 8006d74:	d9a1      	bls.n	8006cba <_malloc_r+0x31e>
 8006d76:	f10b 0108 	add.w	r1, fp, #8
 8006d7a:	4648      	mov	r0, r9
 8006d7c:	f000 fc14 	bl	80075a8 <_free_r>
 8006d80:	e79b      	b.n	8006cba <_malloc_r+0x31e>
 8006d82:	68ae      	ldr	r6, [r5, #8]
 8006d84:	f044 0201 	orr.w	r2, r4, #1
 8006d88:	f043 0301 	orr.w	r3, r3, #1
 8006d8c:	4434      	add	r4, r6
 8006d8e:	6072      	str	r2, [r6, #4]
 8006d90:	60ac      	str	r4, [r5, #8]
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	e634      	b.n	8006a00 <_malloc_r+0x64>
 8006d96:	bf00      	nop
 8006d98:	200006e0 	.word	0x200006e0
 8006d9c:	20000520 	.word	0x20000520
 8006da0:	00000080 	.word	0x00000080
 8006da4:	200006b0 	.word	0x200006b0
 8006da8:	0000007f 	.word	0x0000007f
 8006dac:	200006d8 	.word	0x200006d8
 8006db0:	200006dc 	.word	0x200006dc

08006db4 <memchr>:
 8006db4:	b510      	push	{r4, lr}
 8006db6:	b2c9      	uxtb	r1, r1
 8006db8:	4402      	add	r2, r0
 8006dba:	4290      	cmp	r0, r2
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	d101      	bne.n	8006dc4 <memchr+0x10>
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	bd10      	pop	{r4, pc}
 8006dc4:	781c      	ldrb	r4, [r3, #0]
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	428c      	cmp	r4, r1
 8006dca:	d1f6      	bne.n	8006dba <memchr+0x6>
 8006dcc:	4618      	mov	r0, r3
 8006dce:	bd10      	pop	{r4, pc}

08006dd0 <__malloc_lock>:
 8006dd0:	4801      	ldr	r0, [pc, #4]	; (8006dd8 <__malloc_lock+0x8>)
 8006dd2:	f000 bca5 	b.w	8007720 <__retarget_lock_acquire_recursive>
 8006dd6:	bf00      	nop
 8006dd8:	20000884 	.word	0x20000884

08006ddc <__malloc_unlock>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	; (8006de4 <__malloc_unlock+0x8>)
 8006dde:	f000 bca0 	b.w	8007722 <__retarget_lock_release_recursive>
 8006de2:	bf00      	nop
 8006de4:	20000884 	.word	0x20000884

08006de8 <_Balloc>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006dec:	4604      	mov	r4, r0
 8006dee:	460e      	mov	r6, r1
 8006df0:	b93d      	cbnz	r5, 8006e02 <_Balloc+0x1a>
 8006df2:	2010      	movs	r0, #16
 8006df4:	f7ff fdca 	bl	800698c <malloc>
 8006df8:	6260      	str	r0, [r4, #36]	; 0x24
 8006dfa:	6045      	str	r5, [r0, #4]
 8006dfc:	6085      	str	r5, [r0, #8]
 8006dfe:	6005      	str	r5, [r0, #0]
 8006e00:	60c5      	str	r5, [r0, #12]
 8006e02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e04:	68eb      	ldr	r3, [r5, #12]
 8006e06:	b183      	cbz	r3, 8006e2a <_Balloc+0x42>
 8006e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006e10:	b9b8      	cbnz	r0, 8006e42 <_Balloc+0x5a>
 8006e12:	2101      	movs	r1, #1
 8006e14:	fa01 f506 	lsl.w	r5, r1, r6
 8006e18:	1d6a      	adds	r2, r5, #5
 8006e1a:	0092      	lsls	r2, r2, #2
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 fb3f 	bl	80074a0 <_calloc_r>
 8006e22:	b160      	cbz	r0, 8006e3e <_Balloc+0x56>
 8006e24:	6046      	str	r6, [r0, #4]
 8006e26:	6085      	str	r5, [r0, #8]
 8006e28:	e00e      	b.n	8006e48 <_Balloc+0x60>
 8006e2a:	2221      	movs	r2, #33	; 0x21
 8006e2c:	2104      	movs	r1, #4
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 fb36 	bl	80074a0 <_calloc_r>
 8006e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e36:	60e8      	str	r0, [r5, #12]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e4      	bne.n	8006e08 <_Balloc+0x20>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	bd70      	pop	{r4, r5, r6, pc}
 8006e42:	6802      	ldr	r2, [r0, #0]
 8006e44:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6103      	str	r3, [r0, #16]
 8006e4c:	60c3      	str	r3, [r0, #12]
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}

08006e50 <_Bfree>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e54:	4606      	mov	r6, r0
 8006e56:	460d      	mov	r5, r1
 8006e58:	b93c      	cbnz	r4, 8006e6a <_Bfree+0x1a>
 8006e5a:	2010      	movs	r0, #16
 8006e5c:	f7ff fd96 	bl	800698c <malloc>
 8006e60:	6270      	str	r0, [r6, #36]	; 0x24
 8006e62:	6044      	str	r4, [r0, #4]
 8006e64:	6084      	str	r4, [r0, #8]
 8006e66:	6004      	str	r4, [r0, #0]
 8006e68:	60c4      	str	r4, [r0, #12]
 8006e6a:	b13d      	cbz	r5, 8006e7c <_Bfree+0x2c>
 8006e6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006e6e:	686a      	ldr	r2, [r5, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e76:	6029      	str	r1, [r5, #0]
 8006e78:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}

08006e7e <__multadd>:
 8006e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e82:	461f      	mov	r7, r3
 8006e84:	4606      	mov	r6, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	2300      	movs	r3, #0
 8006e8a:	690d      	ldr	r5, [r1, #16]
 8006e8c:	f101 0e14 	add.w	lr, r1, #20
 8006e90:	f8de 0000 	ldr.w	r0, [lr]
 8006e94:	3301      	adds	r3, #1
 8006e96:	b281      	uxth	r1, r0
 8006e98:	fb02 7101 	mla	r1, r2, r1, r7
 8006e9c:	0c00      	lsrs	r0, r0, #16
 8006e9e:	0c0f      	lsrs	r7, r1, #16
 8006ea0:	fb02 7000 	mla	r0, r2, r0, r7
 8006ea4:	b289      	uxth	r1, r1
 8006ea6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006eaa:	429d      	cmp	r5, r3
 8006eac:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006eb0:	f84e 1b04 	str.w	r1, [lr], #4
 8006eb4:	dcec      	bgt.n	8006e90 <__multadd+0x12>
 8006eb6:	b1d7      	cbz	r7, 8006eee <__multadd+0x70>
 8006eb8:	68a3      	ldr	r3, [r4, #8]
 8006eba:	429d      	cmp	r5, r3
 8006ebc:	db12      	blt.n	8006ee4 <__multadd+0x66>
 8006ebe:	6861      	ldr	r1, [r4, #4]
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	3101      	adds	r1, #1
 8006ec4:	f7ff ff90 	bl	8006de8 <_Balloc>
 8006ec8:	4680      	mov	r8, r0
 8006eca:	6922      	ldr	r2, [r4, #16]
 8006ecc:	f104 010c 	add.w	r1, r4, #12
 8006ed0:	3202      	adds	r2, #2
 8006ed2:	0092      	lsls	r2, r2, #2
 8006ed4:	300c      	adds	r0, #12
 8006ed6:	f7fd fecb 	bl	8004c70 <memcpy>
 8006eda:	4621      	mov	r1, r4
 8006edc:	4630      	mov	r0, r6
 8006ede:	f7ff ffb7 	bl	8006e50 <_Bfree>
 8006ee2:	4644      	mov	r4, r8
 8006ee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ee8:	3501      	adds	r5, #1
 8006eea:	615f      	str	r7, [r3, #20]
 8006eec:	6125      	str	r5, [r4, #16]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ef4 <__hi0bits>:
 8006ef4:	0c02      	lsrs	r2, r0, #16
 8006ef6:	0412      	lsls	r2, r2, #16
 8006ef8:	4603      	mov	r3, r0
 8006efa:	b9b2      	cbnz	r2, 8006f2a <__hi0bits+0x36>
 8006efc:	0403      	lsls	r3, r0, #16
 8006efe:	2010      	movs	r0, #16
 8006f00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006f04:	bf04      	itt	eq
 8006f06:	021b      	lsleq	r3, r3, #8
 8006f08:	3008      	addeq	r0, #8
 8006f0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006f0e:	bf04      	itt	eq
 8006f10:	011b      	lsleq	r3, r3, #4
 8006f12:	3004      	addeq	r0, #4
 8006f14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006f18:	bf04      	itt	eq
 8006f1a:	009b      	lsleq	r3, r3, #2
 8006f1c:	3002      	addeq	r0, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	db06      	blt.n	8006f30 <__hi0bits+0x3c>
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	d503      	bpl.n	8006f2e <__hi0bits+0x3a>
 8006f26:	3001      	adds	r0, #1
 8006f28:	4770      	bx	lr
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	e7e8      	b.n	8006f00 <__hi0bits+0xc>
 8006f2e:	2020      	movs	r0, #32
 8006f30:	4770      	bx	lr

08006f32 <__lo0bits>:
 8006f32:	6803      	ldr	r3, [r0, #0]
 8006f34:	4601      	mov	r1, r0
 8006f36:	f013 0207 	ands.w	r2, r3, #7
 8006f3a:	d00b      	beq.n	8006f54 <__lo0bits+0x22>
 8006f3c:	07da      	lsls	r2, r3, #31
 8006f3e:	d423      	bmi.n	8006f88 <__lo0bits+0x56>
 8006f40:	0798      	lsls	r0, r3, #30
 8006f42:	bf49      	itett	mi
 8006f44:	085b      	lsrmi	r3, r3, #1
 8006f46:	089b      	lsrpl	r3, r3, #2
 8006f48:	2001      	movmi	r0, #1
 8006f4a:	600b      	strmi	r3, [r1, #0]
 8006f4c:	bf5c      	itt	pl
 8006f4e:	600b      	strpl	r3, [r1, #0]
 8006f50:	2002      	movpl	r0, #2
 8006f52:	4770      	bx	lr
 8006f54:	b298      	uxth	r0, r3
 8006f56:	b9a8      	cbnz	r0, 8006f84 <__lo0bits+0x52>
 8006f58:	2010      	movs	r0, #16
 8006f5a:	0c1b      	lsrs	r3, r3, #16
 8006f5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f60:	bf04      	itt	eq
 8006f62:	0a1b      	lsreq	r3, r3, #8
 8006f64:	3008      	addeq	r0, #8
 8006f66:	071a      	lsls	r2, r3, #28
 8006f68:	bf04      	itt	eq
 8006f6a:	091b      	lsreq	r3, r3, #4
 8006f6c:	3004      	addeq	r0, #4
 8006f6e:	079a      	lsls	r2, r3, #30
 8006f70:	bf04      	itt	eq
 8006f72:	089b      	lsreq	r3, r3, #2
 8006f74:	3002      	addeq	r0, #2
 8006f76:	07da      	lsls	r2, r3, #31
 8006f78:	d402      	bmi.n	8006f80 <__lo0bits+0x4e>
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	d006      	beq.n	8006f8c <__lo0bits+0x5a>
 8006f7e:	3001      	adds	r0, #1
 8006f80:	600b      	str	r3, [r1, #0]
 8006f82:	4770      	bx	lr
 8006f84:	4610      	mov	r0, r2
 8006f86:	e7e9      	b.n	8006f5c <__lo0bits+0x2a>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	4770      	bx	lr
 8006f8c:	2020      	movs	r0, #32
 8006f8e:	4770      	bx	lr

08006f90 <__i2b>:
 8006f90:	b510      	push	{r4, lr}
 8006f92:	460c      	mov	r4, r1
 8006f94:	2101      	movs	r1, #1
 8006f96:	f7ff ff27 	bl	8006de8 <_Balloc>
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	6144      	str	r4, [r0, #20]
 8006f9e:	6102      	str	r2, [r0, #16]
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <__multiply>:
 8006fa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	690a      	ldr	r2, [r1, #16]
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	4689      	mov	r9, r1
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	bfbe      	ittt	lt
 8006fb2:	460b      	movlt	r3, r1
 8006fb4:	46a1      	movlt	r9, r4
 8006fb6:	461c      	movlt	r4, r3
 8006fb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006fbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006fc0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006fc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006fc8:	eb07 060a 	add.w	r6, r7, sl
 8006fcc:	429e      	cmp	r6, r3
 8006fce:	bfc8      	it	gt
 8006fd0:	3101      	addgt	r1, #1
 8006fd2:	f7ff ff09 	bl	8006de8 <_Balloc>
 8006fd6:	f100 0514 	add.w	r5, r0, #20
 8006fda:	462b      	mov	r3, r5
 8006fdc:	2200      	movs	r2, #0
 8006fde:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fe2:	4543      	cmp	r3, r8
 8006fe4:	d316      	bcc.n	8007014 <__multiply+0x72>
 8006fe6:	f104 0214 	add.w	r2, r4, #20
 8006fea:	f109 0114 	add.w	r1, r9, #20
 8006fee:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006ff2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	9c01      	ldr	r4, [sp, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	4294      	cmp	r4, r2
 8006ffe:	d80c      	bhi.n	800701a <__multiply+0x78>
 8007000:	2e00      	cmp	r6, #0
 8007002:	dd03      	ble.n	800700c <__multiply+0x6a>
 8007004:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007008:	2b00      	cmp	r3, #0
 800700a:	d054      	beq.n	80070b6 <__multiply+0x114>
 800700c:	6106      	str	r6, [r0, #16]
 800700e:	b003      	add	sp, #12
 8007010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007014:	f843 2b04 	str.w	r2, [r3], #4
 8007018:	e7e3      	b.n	8006fe2 <__multiply+0x40>
 800701a:	f8b3 a000 	ldrh.w	sl, [r3]
 800701e:	3204      	adds	r2, #4
 8007020:	f1ba 0f00 	cmp.w	sl, #0
 8007024:	d020      	beq.n	8007068 <__multiply+0xc6>
 8007026:	46ae      	mov	lr, r5
 8007028:	4689      	mov	r9, r1
 800702a:	f04f 0c00 	mov.w	ip, #0
 800702e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007032:	f8be b000 	ldrh.w	fp, [lr]
 8007036:	b2a3      	uxth	r3, r4
 8007038:	fb0a b303 	mla	r3, sl, r3, fp
 800703c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007040:	f8de 4000 	ldr.w	r4, [lr]
 8007044:	4463      	add	r3, ip
 8007046:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800704a:	fb0a c40b 	mla	r4, sl, fp, ip
 800704e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007052:	b29b      	uxth	r3, r3
 8007054:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007058:	454f      	cmp	r7, r9
 800705a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800705e:	f84e 3b04 	str.w	r3, [lr], #4
 8007062:	d8e4      	bhi.n	800702e <__multiply+0x8c>
 8007064:	f8ce c000 	str.w	ip, [lr]
 8007068:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800706c:	f1b9 0f00 	cmp.w	r9, #0
 8007070:	d01f      	beq.n	80070b2 <__multiply+0x110>
 8007072:	46ae      	mov	lr, r5
 8007074:	468c      	mov	ip, r1
 8007076:	f04f 0a00 	mov.w	sl, #0
 800707a:	682b      	ldr	r3, [r5, #0]
 800707c:	f8bc 4000 	ldrh.w	r4, [ip]
 8007080:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007084:	b29b      	uxth	r3, r3
 8007086:	fb09 b404 	mla	r4, r9, r4, fp
 800708a:	44a2      	add	sl, r4
 800708c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007090:	f84e 3b04 	str.w	r3, [lr], #4
 8007094:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007098:	f8be 4000 	ldrh.w	r4, [lr]
 800709c:	0c1b      	lsrs	r3, r3, #16
 800709e:	fb09 4303 	mla	r3, r9, r3, r4
 80070a2:	4567      	cmp	r7, ip
 80070a4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80070a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070ac:	d8e6      	bhi.n	800707c <__multiply+0xda>
 80070ae:	f8ce 3000 	str.w	r3, [lr]
 80070b2:	3504      	adds	r5, #4
 80070b4:	e7a0      	b.n	8006ff8 <__multiply+0x56>
 80070b6:	3e01      	subs	r6, #1
 80070b8:	e7a2      	b.n	8007000 <__multiply+0x5e>
	...

080070bc <__pow5mult>:
 80070bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c0:	4615      	mov	r5, r2
 80070c2:	f012 0203 	ands.w	r2, r2, #3
 80070c6:	4606      	mov	r6, r0
 80070c8:	460f      	mov	r7, r1
 80070ca:	d007      	beq.n	80070dc <__pow5mult+0x20>
 80070cc:	4c21      	ldr	r4, [pc, #132]	; (8007154 <__pow5mult+0x98>)
 80070ce:	3a01      	subs	r2, #1
 80070d0:	2300      	movs	r3, #0
 80070d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070d6:	f7ff fed2 	bl	8006e7e <__multadd>
 80070da:	4607      	mov	r7, r0
 80070dc:	10ad      	asrs	r5, r5, #2
 80070de:	d035      	beq.n	800714c <__pow5mult+0x90>
 80070e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070e2:	b93c      	cbnz	r4, 80070f4 <__pow5mult+0x38>
 80070e4:	2010      	movs	r0, #16
 80070e6:	f7ff fc51 	bl	800698c <malloc>
 80070ea:	6270      	str	r0, [r6, #36]	; 0x24
 80070ec:	6044      	str	r4, [r0, #4]
 80070ee:	6084      	str	r4, [r0, #8]
 80070f0:	6004      	str	r4, [r0, #0]
 80070f2:	60c4      	str	r4, [r0, #12]
 80070f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070fc:	b94c      	cbnz	r4, 8007112 <__pow5mult+0x56>
 80070fe:	f240 2171 	movw	r1, #625	; 0x271
 8007102:	4630      	mov	r0, r6
 8007104:	f7ff ff44 	bl	8006f90 <__i2b>
 8007108:	2300      	movs	r3, #0
 800710a:	4604      	mov	r4, r0
 800710c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007110:	6003      	str	r3, [r0, #0]
 8007112:	f04f 0800 	mov.w	r8, #0
 8007116:	07eb      	lsls	r3, r5, #31
 8007118:	d50a      	bpl.n	8007130 <__pow5mult+0x74>
 800711a:	4639      	mov	r1, r7
 800711c:	4622      	mov	r2, r4
 800711e:	4630      	mov	r0, r6
 8007120:	f7ff ff3f 	bl	8006fa2 <__multiply>
 8007124:	4681      	mov	r9, r0
 8007126:	4639      	mov	r1, r7
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff fe91 	bl	8006e50 <_Bfree>
 800712e:	464f      	mov	r7, r9
 8007130:	106d      	asrs	r5, r5, #1
 8007132:	d00b      	beq.n	800714c <__pow5mult+0x90>
 8007134:	6820      	ldr	r0, [r4, #0]
 8007136:	b938      	cbnz	r0, 8007148 <__pow5mult+0x8c>
 8007138:	4622      	mov	r2, r4
 800713a:	4621      	mov	r1, r4
 800713c:	4630      	mov	r0, r6
 800713e:	f7ff ff30 	bl	8006fa2 <__multiply>
 8007142:	6020      	str	r0, [r4, #0]
 8007144:	f8c0 8000 	str.w	r8, [r0]
 8007148:	4604      	mov	r4, r0
 800714a:	e7e4      	b.n	8007116 <__pow5mult+0x5a>
 800714c:	4638      	mov	r0, r7
 800714e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007152:	bf00      	nop
 8007154:	08007c78 	.word	0x08007c78

08007158 <__lshift>:
 8007158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800715c:	460c      	mov	r4, r1
 800715e:	4607      	mov	r7, r0
 8007160:	4616      	mov	r6, r2
 8007162:	6923      	ldr	r3, [r4, #16]
 8007164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007168:	eb0a 0903 	add.w	r9, sl, r3
 800716c:	6849      	ldr	r1, [r1, #4]
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	f109 0501 	add.w	r5, r9, #1
 8007174:	42ab      	cmp	r3, r5
 8007176:	db31      	blt.n	80071dc <__lshift+0x84>
 8007178:	4638      	mov	r0, r7
 800717a:	f7ff fe35 	bl	8006de8 <_Balloc>
 800717e:	2200      	movs	r2, #0
 8007180:	4680      	mov	r8, r0
 8007182:	4611      	mov	r1, r2
 8007184:	f100 0314 	add.w	r3, r0, #20
 8007188:	4552      	cmp	r2, sl
 800718a:	db2a      	blt.n	80071e2 <__lshift+0x8a>
 800718c:	6920      	ldr	r0, [r4, #16]
 800718e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007192:	f104 0114 	add.w	r1, r4, #20
 8007196:	f016 021f 	ands.w	r2, r6, #31
 800719a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800719e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80071a2:	d022      	beq.n	80071ea <__lshift+0x92>
 80071a4:	2000      	movs	r0, #0
 80071a6:	f1c2 0c20 	rsb	ip, r2, #32
 80071aa:	680e      	ldr	r6, [r1, #0]
 80071ac:	4096      	lsls	r6, r2
 80071ae:	4330      	orrs	r0, r6
 80071b0:	f843 0b04 	str.w	r0, [r3], #4
 80071b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80071b8:	458e      	cmp	lr, r1
 80071ba:	fa20 f00c 	lsr.w	r0, r0, ip
 80071be:	d8f4      	bhi.n	80071aa <__lshift+0x52>
 80071c0:	6018      	str	r0, [r3, #0]
 80071c2:	b108      	cbz	r0, 80071c8 <__lshift+0x70>
 80071c4:	f109 0502 	add.w	r5, r9, #2
 80071c8:	3d01      	subs	r5, #1
 80071ca:	4638      	mov	r0, r7
 80071cc:	f8c8 5010 	str.w	r5, [r8, #16]
 80071d0:	4621      	mov	r1, r4
 80071d2:	f7ff fe3d 	bl	8006e50 <_Bfree>
 80071d6:	4640      	mov	r0, r8
 80071d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071dc:	3101      	adds	r1, #1
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	e7c8      	b.n	8007174 <__lshift+0x1c>
 80071e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80071e6:	3201      	adds	r2, #1
 80071e8:	e7ce      	b.n	8007188 <__lshift+0x30>
 80071ea:	3b04      	subs	r3, #4
 80071ec:	f851 2b04 	ldr.w	r2, [r1], #4
 80071f0:	458e      	cmp	lr, r1
 80071f2:	f843 2f04 	str.w	r2, [r3, #4]!
 80071f6:	d8f9      	bhi.n	80071ec <__lshift+0x94>
 80071f8:	e7e6      	b.n	80071c8 <__lshift+0x70>

080071fa <__mcmp>:
 80071fa:	6903      	ldr	r3, [r0, #16]
 80071fc:	690a      	ldr	r2, [r1, #16]
 80071fe:	b530      	push	{r4, r5, lr}
 8007200:	1a9b      	subs	r3, r3, r2
 8007202:	d10c      	bne.n	800721e <__mcmp+0x24>
 8007204:	0092      	lsls	r2, r2, #2
 8007206:	3014      	adds	r0, #20
 8007208:	3114      	adds	r1, #20
 800720a:	1884      	adds	r4, r0, r2
 800720c:	4411      	add	r1, r2
 800720e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007212:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007216:	4295      	cmp	r5, r2
 8007218:	d003      	beq.n	8007222 <__mcmp+0x28>
 800721a:	d305      	bcc.n	8007228 <__mcmp+0x2e>
 800721c:	2301      	movs	r3, #1
 800721e:	4618      	mov	r0, r3
 8007220:	bd30      	pop	{r4, r5, pc}
 8007222:	42a0      	cmp	r0, r4
 8007224:	d3f3      	bcc.n	800720e <__mcmp+0x14>
 8007226:	e7fa      	b.n	800721e <__mcmp+0x24>
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	e7f7      	b.n	800721e <__mcmp+0x24>

0800722e <__mdiff>:
 800722e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007232:	460d      	mov	r5, r1
 8007234:	4607      	mov	r7, r0
 8007236:	4611      	mov	r1, r2
 8007238:	4628      	mov	r0, r5
 800723a:	4614      	mov	r4, r2
 800723c:	f7ff ffdd 	bl	80071fa <__mcmp>
 8007240:	1e06      	subs	r6, r0, #0
 8007242:	d108      	bne.n	8007256 <__mdiff+0x28>
 8007244:	4631      	mov	r1, r6
 8007246:	4638      	mov	r0, r7
 8007248:	f7ff fdce 	bl	8006de8 <_Balloc>
 800724c:	2301      	movs	r3, #1
 800724e:	6146      	str	r6, [r0, #20]
 8007250:	6103      	str	r3, [r0, #16]
 8007252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007256:	bfa4      	itt	ge
 8007258:	4623      	movge	r3, r4
 800725a:	462c      	movge	r4, r5
 800725c:	4638      	mov	r0, r7
 800725e:	6861      	ldr	r1, [r4, #4]
 8007260:	bfa6      	itte	ge
 8007262:	461d      	movge	r5, r3
 8007264:	2600      	movge	r6, #0
 8007266:	2601      	movlt	r6, #1
 8007268:	f7ff fdbe 	bl	8006de8 <_Balloc>
 800726c:	f04f 0c00 	mov.w	ip, #0
 8007270:	60c6      	str	r6, [r0, #12]
 8007272:	692b      	ldr	r3, [r5, #16]
 8007274:	6926      	ldr	r6, [r4, #16]
 8007276:	f104 0214 	add.w	r2, r4, #20
 800727a:	f105 0914 	add.w	r9, r5, #20
 800727e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007282:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007286:	f100 0114 	add.w	r1, r0, #20
 800728a:	f852 ab04 	ldr.w	sl, [r2], #4
 800728e:	f859 5b04 	ldr.w	r5, [r9], #4
 8007292:	fa1f f38a 	uxth.w	r3, sl
 8007296:	4463      	add	r3, ip
 8007298:	b2ac      	uxth	r4, r5
 800729a:	1b1b      	subs	r3, r3, r4
 800729c:	0c2c      	lsrs	r4, r5, #16
 800729e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80072a2:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80072ac:	45c8      	cmp	r8, r9
 80072ae:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80072b2:	4696      	mov	lr, r2
 80072b4:	f841 4b04 	str.w	r4, [r1], #4
 80072b8:	d8e7      	bhi.n	800728a <__mdiff+0x5c>
 80072ba:	45be      	cmp	lr, r7
 80072bc:	d305      	bcc.n	80072ca <__mdiff+0x9c>
 80072be:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80072c2:	b18b      	cbz	r3, 80072e8 <__mdiff+0xba>
 80072c4:	6106      	str	r6, [r0, #16]
 80072c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 80072ce:	b2a2      	uxth	r2, r4
 80072d0:	4462      	add	r2, ip
 80072d2:	1413      	asrs	r3, r2, #16
 80072d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80072d8:	b292      	uxth	r2, r2
 80072da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80072de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80072e2:	f841 2b04 	str.w	r2, [r1], #4
 80072e6:	e7e8      	b.n	80072ba <__mdiff+0x8c>
 80072e8:	3e01      	subs	r6, #1
 80072ea:	e7e8      	b.n	80072be <__mdiff+0x90>

080072ec <__d2b>:
 80072ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80072f0:	461c      	mov	r4, r3
 80072f2:	2101      	movs	r1, #1
 80072f4:	4690      	mov	r8, r2
 80072f6:	9e08      	ldr	r6, [sp, #32]
 80072f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072fa:	f7ff fd75 	bl	8006de8 <_Balloc>
 80072fe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007302:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007306:	4607      	mov	r7, r0
 8007308:	bb34      	cbnz	r4, 8007358 <__d2b+0x6c>
 800730a:	9201      	str	r2, [sp, #4]
 800730c:	f1b8 0f00 	cmp.w	r8, #0
 8007310:	d027      	beq.n	8007362 <__d2b+0x76>
 8007312:	a802      	add	r0, sp, #8
 8007314:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007318:	f7ff fe0b 	bl	8006f32 <__lo0bits>
 800731c:	9900      	ldr	r1, [sp, #0]
 800731e:	b1f0      	cbz	r0, 800735e <__d2b+0x72>
 8007320:	9a01      	ldr	r2, [sp, #4]
 8007322:	f1c0 0320 	rsb	r3, r0, #32
 8007326:	fa02 f303 	lsl.w	r3, r2, r3
 800732a:	430b      	orrs	r3, r1
 800732c:	40c2      	lsrs	r2, r0
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	9201      	str	r2, [sp, #4]
 8007332:	9b01      	ldr	r3, [sp, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	bf14      	ite	ne
 8007338:	2102      	movne	r1, #2
 800733a:	2101      	moveq	r1, #1
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	6139      	str	r1, [r7, #16]
 8007340:	b1c4      	cbz	r4, 8007374 <__d2b+0x88>
 8007342:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007346:	4404      	add	r4, r0
 8007348:	6034      	str	r4, [r6, #0]
 800734a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800734e:	6028      	str	r0, [r5, #0]
 8007350:	4638      	mov	r0, r7
 8007352:	b002      	add	sp, #8
 8007354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007358:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800735c:	e7d5      	b.n	800730a <__d2b+0x1e>
 800735e:	6179      	str	r1, [r7, #20]
 8007360:	e7e7      	b.n	8007332 <__d2b+0x46>
 8007362:	a801      	add	r0, sp, #4
 8007364:	f7ff fde5 	bl	8006f32 <__lo0bits>
 8007368:	2101      	movs	r1, #1
 800736a:	9b01      	ldr	r3, [sp, #4]
 800736c:	6139      	str	r1, [r7, #16]
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	3020      	adds	r0, #32
 8007372:	e7e5      	b.n	8007340 <__d2b+0x54>
 8007374:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007378:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800737c:	6030      	str	r0, [r6, #0]
 800737e:	6918      	ldr	r0, [r3, #16]
 8007380:	f7ff fdb8 	bl	8006ef4 <__hi0bits>
 8007384:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007388:	e7e1      	b.n	800734e <__d2b+0x62>
	...

0800738c <_sbrk_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	2300      	movs	r3, #0
 8007390:	4c05      	ldr	r4, [pc, #20]	; (80073a8 <_sbrk_r+0x1c>)
 8007392:	4605      	mov	r5, r0
 8007394:	4608      	mov	r0, r1
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	f000 fb80 	bl	8007a9c <_sbrk>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	d102      	bne.n	80073a6 <_sbrk_r+0x1a>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	b103      	cbz	r3, 80073a6 <_sbrk_r+0x1a>
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	bd38      	pop	{r3, r4, r5, pc}
 80073a8:	2000088c 	.word	0x2000088c

080073ac <__ssprint_r>:
 80073ac:	6893      	ldr	r3, [r2, #8]
 80073ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b2:	4681      	mov	r9, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	4617      	mov	r7, r2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d060      	beq.n	800747e <__ssprint_r+0xd2>
 80073bc:	f04f 0b00 	mov.w	fp, #0
 80073c0:	465e      	mov	r6, fp
 80073c2:	f8d2 a000 	ldr.w	sl, [r2]
 80073c6:	b356      	cbz	r6, 800741e <__ssprint_r+0x72>
 80073c8:	68a3      	ldr	r3, [r4, #8]
 80073ca:	429e      	cmp	r6, r3
 80073cc:	d344      	bcc.n	8007458 <__ssprint_r+0xac>
 80073ce:	89a2      	ldrh	r2, [r4, #12]
 80073d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073d4:	d03e      	beq.n	8007454 <__ssprint_r+0xa8>
 80073d6:	2302      	movs	r3, #2
 80073d8:	6825      	ldr	r5, [r4, #0]
 80073da:	6921      	ldr	r1, [r4, #16]
 80073dc:	eba5 0801 	sub.w	r8, r5, r1
 80073e0:	6965      	ldr	r5, [r4, #20]
 80073e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073e6:	fb95 f5f3 	sdiv	r5, r5, r3
 80073ea:	f108 0301 	add.w	r3, r8, #1
 80073ee:	4433      	add	r3, r6
 80073f0:	429d      	cmp	r5, r3
 80073f2:	bf38      	it	cc
 80073f4:	461d      	movcc	r5, r3
 80073f6:	0553      	lsls	r3, r2, #21
 80073f8:	d546      	bpl.n	8007488 <__ssprint_r+0xdc>
 80073fa:	4629      	mov	r1, r5
 80073fc:	4648      	mov	r0, r9
 80073fe:	f7ff facd 	bl	800699c <_malloc_r>
 8007402:	b998      	cbnz	r0, 800742c <__ssprint_r+0x80>
 8007404:	230c      	movs	r3, #12
 8007406:	f8c9 3000 	str.w	r3, [r9]
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	2300      	movs	r3, #0
 8007418:	60bb      	str	r3, [r7, #8]
 800741a:	607b      	str	r3, [r7, #4]
 800741c:	e031      	b.n	8007482 <__ssprint_r+0xd6>
 800741e:	f8da b000 	ldr.w	fp, [sl]
 8007422:	f8da 6004 	ldr.w	r6, [sl, #4]
 8007426:	f10a 0a08 	add.w	sl, sl, #8
 800742a:	e7cc      	b.n	80073c6 <__ssprint_r+0x1a>
 800742c:	4642      	mov	r2, r8
 800742e:	6921      	ldr	r1, [r4, #16]
 8007430:	9001      	str	r0, [sp, #4]
 8007432:	f7fd fc1d 	bl	8004c70 <memcpy>
 8007436:	89a2      	ldrh	r2, [r4, #12]
 8007438:	9b01      	ldr	r3, [sp, #4]
 800743a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800743e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007442:	81a2      	strh	r2, [r4, #12]
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	4443      	add	r3, r8
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	4633      	mov	r3, r6
 800744c:	6165      	str	r5, [r4, #20]
 800744e:	eba5 0508 	sub.w	r5, r5, r8
 8007452:	60a5      	str	r5, [r4, #8]
 8007454:	429e      	cmp	r6, r3
 8007456:	d200      	bcs.n	800745a <__ssprint_r+0xae>
 8007458:	4633      	mov	r3, r6
 800745a:	461a      	mov	r2, r3
 800745c:	4659      	mov	r1, fp
 800745e:	6820      	ldr	r0, [r4, #0]
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	f000 f971 	bl	8007748 <memmove>
 8007466:	68a2      	ldr	r2, [r4, #8]
 8007468:	9b01      	ldr	r3, [sp, #4]
 800746a:	1ad2      	subs	r2, r2, r3
 800746c:	60a2      	str	r2, [r4, #8]
 800746e:	6822      	ldr	r2, [r4, #0]
 8007470:	4413      	add	r3, r2
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	1b9e      	subs	r6, r3, r6
 8007478:	60be      	str	r6, [r7, #8]
 800747a:	2e00      	cmp	r6, #0
 800747c:	d1cf      	bne.n	800741e <__ssprint_r+0x72>
 800747e:	2000      	movs	r0, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	b003      	add	sp, #12
 8007484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007488:	462a      	mov	r2, r5
 800748a:	4648      	mov	r0, r9
 800748c:	f000 f976 	bl	800777c <_realloc_r>
 8007490:	4603      	mov	r3, r0
 8007492:	2800      	cmp	r0, #0
 8007494:	d1d6      	bne.n	8007444 <__ssprint_r+0x98>
 8007496:	6921      	ldr	r1, [r4, #16]
 8007498:	4648      	mov	r0, r9
 800749a:	f000 f885 	bl	80075a8 <_free_r>
 800749e:	e7b1      	b.n	8007404 <__ssprint_r+0x58>

080074a0 <_calloc_r>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	4351      	muls	r1, r2
 80074a4:	f7ff fa7a 	bl	800699c <_malloc_r>
 80074a8:	4604      	mov	r4, r0
 80074aa:	b198      	cbz	r0, 80074d4 <_calloc_r+0x34>
 80074ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80074b0:	f022 0203 	bic.w	r2, r2, #3
 80074b4:	3a04      	subs	r2, #4
 80074b6:	2a24      	cmp	r2, #36	; 0x24
 80074b8:	d81b      	bhi.n	80074f2 <_calloc_r+0x52>
 80074ba:	2a13      	cmp	r2, #19
 80074bc:	d917      	bls.n	80074ee <_calloc_r+0x4e>
 80074be:	2100      	movs	r1, #0
 80074c0:	2a1b      	cmp	r2, #27
 80074c2:	6001      	str	r1, [r0, #0]
 80074c4:	6041      	str	r1, [r0, #4]
 80074c6:	d807      	bhi.n	80074d8 <_calloc_r+0x38>
 80074c8:	f100 0308 	add.w	r3, r0, #8
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	605a      	str	r2, [r3, #4]
 80074d2:	609a      	str	r2, [r3, #8]
 80074d4:	4620      	mov	r0, r4
 80074d6:	bd10      	pop	{r4, pc}
 80074d8:	2a24      	cmp	r2, #36	; 0x24
 80074da:	6081      	str	r1, [r0, #8]
 80074dc:	60c1      	str	r1, [r0, #12]
 80074de:	bf11      	iteee	ne
 80074e0:	f100 0310 	addne.w	r3, r0, #16
 80074e4:	6101      	streq	r1, [r0, #16]
 80074e6:	f100 0318 	addeq.w	r3, r0, #24
 80074ea:	6141      	streq	r1, [r0, #20]
 80074ec:	e7ee      	b.n	80074cc <_calloc_r+0x2c>
 80074ee:	4603      	mov	r3, r0
 80074f0:	e7ec      	b.n	80074cc <_calloc_r+0x2c>
 80074f2:	2100      	movs	r1, #0
 80074f4:	f7fd fbc7 	bl	8004c86 <memset>
 80074f8:	e7ec      	b.n	80074d4 <_calloc_r+0x34>
	...

080074fc <_malloc_trim_r>:
 80074fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007500:	4689      	mov	r9, r1
 8007502:	4f25      	ldr	r7, [pc, #148]	; (8007598 <_malloc_trim_r+0x9c>)
 8007504:	4606      	mov	r6, r0
 8007506:	f7ff fc63 	bl	8006dd0 <__malloc_lock>
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80075a4 <_malloc_trim_r+0xa8>
 8007510:	685d      	ldr	r5, [r3, #4]
 8007512:	f1a8 0411 	sub.w	r4, r8, #17
 8007516:	f025 0503 	bic.w	r5, r5, #3
 800751a:	eba4 0409 	sub.w	r4, r4, r9
 800751e:	442c      	add	r4, r5
 8007520:	fbb4 f4f8 	udiv	r4, r4, r8
 8007524:	3c01      	subs	r4, #1
 8007526:	fb08 f404 	mul.w	r4, r8, r4
 800752a:	4544      	cmp	r4, r8
 800752c:	da05      	bge.n	800753a <_malloc_trim_r+0x3e>
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff fc54 	bl	8006ddc <__malloc_unlock>
 8007534:	2000      	movs	r0, #0
 8007536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753a:	2100      	movs	r1, #0
 800753c:	4630      	mov	r0, r6
 800753e:	f7ff ff25 	bl	800738c <_sbrk_r>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	442b      	add	r3, r5
 8007546:	4298      	cmp	r0, r3
 8007548:	d1f1      	bne.n	800752e <_malloc_trim_r+0x32>
 800754a:	4261      	negs	r1, r4
 800754c:	4630      	mov	r0, r6
 800754e:	f7ff ff1d 	bl	800738c <_sbrk_r>
 8007552:	3001      	adds	r0, #1
 8007554:	d110      	bne.n	8007578 <_malloc_trim_r+0x7c>
 8007556:	2100      	movs	r1, #0
 8007558:	4630      	mov	r0, r6
 800755a:	f7ff ff17 	bl	800738c <_sbrk_r>
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	1a83      	subs	r3, r0, r2
 8007562:	2b0f      	cmp	r3, #15
 8007564:	dde3      	ble.n	800752e <_malloc_trim_r+0x32>
 8007566:	490d      	ldr	r1, [pc, #52]	; (800759c <_malloc_trim_r+0xa0>)
 8007568:	f043 0301 	orr.w	r3, r3, #1
 800756c:	6809      	ldr	r1, [r1, #0]
 800756e:	6053      	str	r3, [r2, #4]
 8007570:	1a40      	subs	r0, r0, r1
 8007572:	490b      	ldr	r1, [pc, #44]	; (80075a0 <_malloc_trim_r+0xa4>)
 8007574:	6008      	str	r0, [r1, #0]
 8007576:	e7da      	b.n	800752e <_malloc_trim_r+0x32>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <_malloc_trim_r+0xa4>)
 800757c:	1b2d      	subs	r5, r5, r4
 800757e:	f045 0501 	orr.w	r5, r5, #1
 8007582:	605d      	str	r5, [r3, #4]
 8007584:	6813      	ldr	r3, [r2, #0]
 8007586:	4630      	mov	r0, r6
 8007588:	1b1c      	subs	r4, r3, r4
 800758a:	6014      	str	r4, [r2, #0]
 800758c:	f7ff fc26 	bl	8006ddc <__malloc_unlock>
 8007590:	2001      	movs	r0, #1
 8007592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007596:	bf00      	nop
 8007598:	20000118 	.word	0x20000118
 800759c:	20000520 	.word	0x20000520
 80075a0:	200006b0 	.word	0x200006b0
 80075a4:	00000080 	.word	0x00000080

080075a8 <_free_r>:
 80075a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ac:	4604      	mov	r4, r0
 80075ae:	4688      	mov	r8, r1
 80075b0:	2900      	cmp	r1, #0
 80075b2:	f000 80ab 	beq.w	800770c <_free_r+0x164>
 80075b6:	f7ff fc0b 	bl	8006dd0 <__malloc_lock>
 80075ba:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80075be:	4d54      	ldr	r5, [pc, #336]	; (8007710 <_free_r+0x168>)
 80075c0:	f022 0001 	bic.w	r0, r2, #1
 80075c4:	f1a8 0308 	sub.w	r3, r8, #8
 80075c8:	181f      	adds	r7, r3, r0
 80075ca:	68a9      	ldr	r1, [r5, #8]
 80075cc:	687e      	ldr	r6, [r7, #4]
 80075ce:	428f      	cmp	r7, r1
 80075d0:	f026 0603 	bic.w	r6, r6, #3
 80075d4:	f002 0201 	and.w	r2, r2, #1
 80075d8:	d11b      	bne.n	8007612 <_free_r+0x6a>
 80075da:	4430      	add	r0, r6
 80075dc:	b93a      	cbnz	r2, 80075ee <_free_r+0x46>
 80075de:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80075e2:	1a9b      	subs	r3, r3, r2
 80075e4:	6899      	ldr	r1, [r3, #8]
 80075e6:	4410      	add	r0, r2
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	60ca      	str	r2, [r1, #12]
 80075ec:	6091      	str	r1, [r2, #8]
 80075ee:	f040 0201 	orr.w	r2, r0, #1
 80075f2:	605a      	str	r2, [r3, #4]
 80075f4:	60ab      	str	r3, [r5, #8]
 80075f6:	4b47      	ldr	r3, [pc, #284]	; (8007714 <_free_r+0x16c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4298      	cmp	r0, r3
 80075fc:	d304      	bcc.n	8007608 <_free_r+0x60>
 80075fe:	4b46      	ldr	r3, [pc, #280]	; (8007718 <_free_r+0x170>)
 8007600:	4620      	mov	r0, r4
 8007602:	6819      	ldr	r1, [r3, #0]
 8007604:	f7ff ff7a 	bl	80074fc <_malloc_trim_r>
 8007608:	4620      	mov	r0, r4
 800760a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800760e:	f7ff bbe5 	b.w	8006ddc <__malloc_unlock>
 8007612:	607e      	str	r6, [r7, #4]
 8007614:	2a00      	cmp	r2, #0
 8007616:	d139      	bne.n	800768c <_free_r+0xe4>
 8007618:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800761c:	f105 0e08 	add.w	lr, r5, #8
 8007620:	1a5b      	subs	r3, r3, r1
 8007622:	4408      	add	r0, r1
 8007624:	6899      	ldr	r1, [r3, #8]
 8007626:	4571      	cmp	r1, lr
 8007628:	d032      	beq.n	8007690 <_free_r+0xe8>
 800762a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800762e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007632:	f8ce 1008 	str.w	r1, [lr, #8]
 8007636:	19b9      	adds	r1, r7, r6
 8007638:	6849      	ldr	r1, [r1, #4]
 800763a:	07c9      	lsls	r1, r1, #31
 800763c:	d40a      	bmi.n	8007654 <_free_r+0xac>
 800763e:	4430      	add	r0, r6
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	bb3a      	cbnz	r2, 8007694 <_free_r+0xec>
 8007644:	4e35      	ldr	r6, [pc, #212]	; (800771c <_free_r+0x174>)
 8007646:	42b1      	cmp	r1, r6
 8007648:	d124      	bne.n	8007694 <_free_r+0xec>
 800764a:	2201      	movs	r2, #1
 800764c:	616b      	str	r3, [r5, #20]
 800764e:	612b      	str	r3, [r5, #16]
 8007650:	60d9      	str	r1, [r3, #12]
 8007652:	6099      	str	r1, [r3, #8]
 8007654:	f040 0101 	orr.w	r1, r0, #1
 8007658:	6059      	str	r1, [r3, #4]
 800765a:	5018      	str	r0, [r3, r0]
 800765c:	2a00      	cmp	r2, #0
 800765e:	d1d3      	bne.n	8007608 <_free_r+0x60>
 8007660:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007664:	d21a      	bcs.n	800769c <_free_r+0xf4>
 8007666:	2201      	movs	r2, #1
 8007668:	08c0      	lsrs	r0, r0, #3
 800766a:	1081      	asrs	r1, r0, #2
 800766c:	408a      	lsls	r2, r1
 800766e:	6869      	ldr	r1, [r5, #4]
 8007670:	3001      	adds	r0, #1
 8007672:	430a      	orrs	r2, r1
 8007674:	606a      	str	r2, [r5, #4]
 8007676:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800767a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800767e:	3a08      	subs	r2, #8
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	6099      	str	r1, [r3, #8]
 8007684:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007688:	60cb      	str	r3, [r1, #12]
 800768a:	e7bd      	b.n	8007608 <_free_r+0x60>
 800768c:	2200      	movs	r2, #0
 800768e:	e7d2      	b.n	8007636 <_free_r+0x8e>
 8007690:	2201      	movs	r2, #1
 8007692:	e7d0      	b.n	8007636 <_free_r+0x8e>
 8007694:	68fe      	ldr	r6, [r7, #12]
 8007696:	60ce      	str	r6, [r1, #12]
 8007698:	60b1      	str	r1, [r6, #8]
 800769a:	e7db      	b.n	8007654 <_free_r+0xac>
 800769c:	0a42      	lsrs	r2, r0, #9
 800769e:	2a04      	cmp	r2, #4
 80076a0:	d813      	bhi.n	80076ca <_free_r+0x122>
 80076a2:	0982      	lsrs	r2, r0, #6
 80076a4:	3238      	adds	r2, #56	; 0x38
 80076a6:	1c51      	adds	r1, r2, #1
 80076a8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80076ac:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80076b0:	428e      	cmp	r6, r1
 80076b2:	d124      	bne.n	80076fe <_free_r+0x156>
 80076b4:	2001      	movs	r0, #1
 80076b6:	1092      	asrs	r2, r2, #2
 80076b8:	fa00 f202 	lsl.w	r2, r0, r2
 80076bc:	6868      	ldr	r0, [r5, #4]
 80076be:	4302      	orrs	r2, r0
 80076c0:	606a      	str	r2, [r5, #4]
 80076c2:	60de      	str	r6, [r3, #12]
 80076c4:	6099      	str	r1, [r3, #8]
 80076c6:	60b3      	str	r3, [r6, #8]
 80076c8:	e7de      	b.n	8007688 <_free_r+0xe0>
 80076ca:	2a14      	cmp	r2, #20
 80076cc:	d801      	bhi.n	80076d2 <_free_r+0x12a>
 80076ce:	325b      	adds	r2, #91	; 0x5b
 80076d0:	e7e9      	b.n	80076a6 <_free_r+0xfe>
 80076d2:	2a54      	cmp	r2, #84	; 0x54
 80076d4:	d802      	bhi.n	80076dc <_free_r+0x134>
 80076d6:	0b02      	lsrs	r2, r0, #12
 80076d8:	326e      	adds	r2, #110	; 0x6e
 80076da:	e7e4      	b.n	80076a6 <_free_r+0xfe>
 80076dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80076e0:	d802      	bhi.n	80076e8 <_free_r+0x140>
 80076e2:	0bc2      	lsrs	r2, r0, #15
 80076e4:	3277      	adds	r2, #119	; 0x77
 80076e6:	e7de      	b.n	80076a6 <_free_r+0xfe>
 80076e8:	f240 5154 	movw	r1, #1364	; 0x554
 80076ec:	428a      	cmp	r2, r1
 80076ee:	bf9a      	itte	ls
 80076f0:	0c82      	lsrls	r2, r0, #18
 80076f2:	327c      	addls	r2, #124	; 0x7c
 80076f4:	227e      	movhi	r2, #126	; 0x7e
 80076f6:	e7d6      	b.n	80076a6 <_free_r+0xfe>
 80076f8:	6889      	ldr	r1, [r1, #8]
 80076fa:	428e      	cmp	r6, r1
 80076fc:	d004      	beq.n	8007708 <_free_r+0x160>
 80076fe:	684a      	ldr	r2, [r1, #4]
 8007700:	f022 0203 	bic.w	r2, r2, #3
 8007704:	4290      	cmp	r0, r2
 8007706:	d3f7      	bcc.n	80076f8 <_free_r+0x150>
 8007708:	68ce      	ldr	r6, [r1, #12]
 800770a:	e7da      	b.n	80076c2 <_free_r+0x11a>
 800770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007710:	20000118 	.word	0x20000118
 8007714:	20000524 	.word	0x20000524
 8007718:	200006e0 	.word	0x200006e0
 800771c:	20000120 	.word	0x20000120

08007720 <__retarget_lock_acquire_recursive>:
 8007720:	4770      	bx	lr

08007722 <__retarget_lock_release_recursive>:
 8007722:	4770      	bx	lr

08007724 <__ascii_mbtowc>:
 8007724:	b082      	sub	sp, #8
 8007726:	b901      	cbnz	r1, 800772a <__ascii_mbtowc+0x6>
 8007728:	a901      	add	r1, sp, #4
 800772a:	b142      	cbz	r2, 800773e <__ascii_mbtowc+0x1a>
 800772c:	b14b      	cbz	r3, 8007742 <__ascii_mbtowc+0x1e>
 800772e:	7813      	ldrb	r3, [r2, #0]
 8007730:	600b      	str	r3, [r1, #0]
 8007732:	7812      	ldrb	r2, [r2, #0]
 8007734:	1c10      	adds	r0, r2, #0
 8007736:	bf18      	it	ne
 8007738:	2001      	movne	r0, #1
 800773a:	b002      	add	sp, #8
 800773c:	4770      	bx	lr
 800773e:	4610      	mov	r0, r2
 8007740:	e7fb      	b.n	800773a <__ascii_mbtowc+0x16>
 8007742:	f06f 0001 	mvn.w	r0, #1
 8007746:	e7f8      	b.n	800773a <__ascii_mbtowc+0x16>

08007748 <memmove>:
 8007748:	4288      	cmp	r0, r1
 800774a:	b510      	push	{r4, lr}
 800774c:	eb01 0302 	add.w	r3, r1, r2
 8007750:	d803      	bhi.n	800775a <memmove+0x12>
 8007752:	1e42      	subs	r2, r0, #1
 8007754:	4299      	cmp	r1, r3
 8007756:	d10c      	bne.n	8007772 <memmove+0x2a>
 8007758:	bd10      	pop	{r4, pc}
 800775a:	4298      	cmp	r0, r3
 800775c:	d2f9      	bcs.n	8007752 <memmove+0xa>
 800775e:	1881      	adds	r1, r0, r2
 8007760:	1ad2      	subs	r2, r2, r3
 8007762:	42d3      	cmn	r3, r2
 8007764:	d100      	bne.n	8007768 <memmove+0x20>
 8007766:	bd10      	pop	{r4, pc}
 8007768:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800776c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007770:	e7f7      	b.n	8007762 <memmove+0x1a>
 8007772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007776:	f802 4f01 	strb.w	r4, [r2, #1]!
 800777a:	e7eb      	b.n	8007754 <memmove+0xc>

0800777c <_realloc_r>:
 800777c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007780:	4682      	mov	sl, r0
 8007782:	460c      	mov	r4, r1
 8007784:	b929      	cbnz	r1, 8007792 <_realloc_r+0x16>
 8007786:	4611      	mov	r1, r2
 8007788:	b003      	add	sp, #12
 800778a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778e:	f7ff b905 	b.w	800699c <_malloc_r>
 8007792:	9201      	str	r2, [sp, #4]
 8007794:	f7ff fb1c 	bl	8006dd0 <__malloc_lock>
 8007798:	9a01      	ldr	r2, [sp, #4]
 800779a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800779e:	f102 080b 	add.w	r8, r2, #11
 80077a2:	f1b8 0f16 	cmp.w	r8, #22
 80077a6:	f1a4 0908 	sub.w	r9, r4, #8
 80077aa:	f025 0603 	bic.w	r6, r5, #3
 80077ae:	d90a      	bls.n	80077c6 <_realloc_r+0x4a>
 80077b0:	f038 0807 	bics.w	r8, r8, #7
 80077b4:	d509      	bpl.n	80077ca <_realloc_r+0x4e>
 80077b6:	230c      	movs	r3, #12
 80077b8:	2700      	movs	r7, #0
 80077ba:	f8ca 3000 	str.w	r3, [sl]
 80077be:	4638      	mov	r0, r7
 80077c0:	b003      	add	sp, #12
 80077c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c6:	f04f 0810 	mov.w	r8, #16
 80077ca:	4590      	cmp	r8, r2
 80077cc:	d3f3      	bcc.n	80077b6 <_realloc_r+0x3a>
 80077ce:	45b0      	cmp	r8, r6
 80077d0:	f340 8148 	ble.w	8007a64 <_realloc_r+0x2e8>
 80077d4:	4ba9      	ldr	r3, [pc, #676]	; (8007a7c <_realloc_r+0x300>)
 80077d6:	eb09 0106 	add.w	r1, r9, r6
 80077da:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80077de:	469b      	mov	fp, r3
 80077e0:	4571      	cmp	r1, lr
 80077e2:	684b      	ldr	r3, [r1, #4]
 80077e4:	d005      	beq.n	80077f2 <_realloc_r+0x76>
 80077e6:	f023 0001 	bic.w	r0, r3, #1
 80077ea:	4408      	add	r0, r1
 80077ec:	6840      	ldr	r0, [r0, #4]
 80077ee:	07c7      	lsls	r7, r0, #31
 80077f0:	d447      	bmi.n	8007882 <_realloc_r+0x106>
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	4571      	cmp	r1, lr
 80077f8:	eb06 0703 	add.w	r7, r6, r3
 80077fc:	d119      	bne.n	8007832 <_realloc_r+0xb6>
 80077fe:	f108 0010 	add.w	r0, r8, #16
 8007802:	4287      	cmp	r7, r0
 8007804:	db3f      	blt.n	8007886 <_realloc_r+0x10a>
 8007806:	eba7 0708 	sub.w	r7, r7, r8
 800780a:	eb09 0308 	add.w	r3, r9, r8
 800780e:	f047 0701 	orr.w	r7, r7, #1
 8007812:	f8cb 3008 	str.w	r3, [fp, #8]
 8007816:	605f      	str	r7, [r3, #4]
 8007818:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800781c:	4650      	mov	r0, sl
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	ea43 0308 	orr.w	r3, r3, r8
 8007826:	f844 3c04 	str.w	r3, [r4, #-4]
 800782a:	f7ff fad7 	bl	8006ddc <__malloc_unlock>
 800782e:	4627      	mov	r7, r4
 8007830:	e7c5      	b.n	80077be <_realloc_r+0x42>
 8007832:	45b8      	cmp	r8, r7
 8007834:	dc27      	bgt.n	8007886 <_realloc_r+0x10a>
 8007836:	68cb      	ldr	r3, [r1, #12]
 8007838:	688a      	ldr	r2, [r1, #8]
 800783a:	60d3      	str	r3, [r2, #12]
 800783c:	609a      	str	r2, [r3, #8]
 800783e:	eba7 0008 	sub.w	r0, r7, r8
 8007842:	280f      	cmp	r0, #15
 8007844:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007848:	eb09 0207 	add.w	r2, r9, r7
 800784c:	f240 810c 	bls.w	8007a68 <_realloc_r+0x2ec>
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	eb09 0108 	add.w	r1, r9, r8
 8007858:	ea43 0308 	orr.w	r3, r3, r8
 800785c:	f040 0001 	orr.w	r0, r0, #1
 8007860:	f8c9 3004 	str.w	r3, [r9, #4]
 8007864:	6048      	str	r0, [r1, #4]
 8007866:	6853      	ldr	r3, [r2, #4]
 8007868:	3108      	adds	r1, #8
 800786a:	f043 0301 	orr.w	r3, r3, #1
 800786e:	6053      	str	r3, [r2, #4]
 8007870:	4650      	mov	r0, sl
 8007872:	f7ff fe99 	bl	80075a8 <_free_r>
 8007876:	4650      	mov	r0, sl
 8007878:	f7ff fab0 	bl	8006ddc <__malloc_unlock>
 800787c:	f109 0708 	add.w	r7, r9, #8
 8007880:	e79d      	b.n	80077be <_realloc_r+0x42>
 8007882:	2300      	movs	r3, #0
 8007884:	4619      	mov	r1, r3
 8007886:	07e8      	lsls	r0, r5, #31
 8007888:	f100 8085 	bmi.w	8007996 <_realloc_r+0x21a>
 800788c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007890:	eba9 0505 	sub.w	r5, r9, r5
 8007894:	6868      	ldr	r0, [r5, #4]
 8007896:	f020 0003 	bic.w	r0, r0, #3
 800789a:	4430      	add	r0, r6
 800789c:	2900      	cmp	r1, #0
 800789e:	d077      	beq.n	8007990 <_realloc_r+0x214>
 80078a0:	4571      	cmp	r1, lr
 80078a2:	d151      	bne.n	8007948 <_realloc_r+0x1cc>
 80078a4:	4403      	add	r3, r0
 80078a6:	f108 0110 	add.w	r1, r8, #16
 80078aa:	428b      	cmp	r3, r1
 80078ac:	db70      	blt.n	8007990 <_realloc_r+0x214>
 80078ae:	462f      	mov	r7, r5
 80078b0:	68ea      	ldr	r2, [r5, #12]
 80078b2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80078b6:	60ca      	str	r2, [r1, #12]
 80078b8:	6091      	str	r1, [r2, #8]
 80078ba:	1f32      	subs	r2, r6, #4
 80078bc:	2a24      	cmp	r2, #36	; 0x24
 80078be:	d83c      	bhi.n	800793a <_realloc_r+0x1be>
 80078c0:	2a13      	cmp	r2, #19
 80078c2:	d937      	bls.n	8007934 <_realloc_r+0x1b8>
 80078c4:	6821      	ldr	r1, [r4, #0]
 80078c6:	2a1b      	cmp	r2, #27
 80078c8:	60a9      	str	r1, [r5, #8]
 80078ca:	6861      	ldr	r1, [r4, #4]
 80078cc:	60e9      	str	r1, [r5, #12]
 80078ce:	d81c      	bhi.n	800790a <_realloc_r+0x18e>
 80078d0:	f105 0210 	add.w	r2, r5, #16
 80078d4:	f104 0108 	add.w	r1, r4, #8
 80078d8:	6808      	ldr	r0, [r1, #0]
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	6848      	ldr	r0, [r1, #4]
 80078de:	6050      	str	r0, [r2, #4]
 80078e0:	6889      	ldr	r1, [r1, #8]
 80078e2:	6091      	str	r1, [r2, #8]
 80078e4:	eba3 0308 	sub.w	r3, r3, r8
 80078e8:	eb05 0208 	add.w	r2, r5, r8
 80078ec:	f043 0301 	orr.w	r3, r3, #1
 80078f0:	f8cb 2008 	str.w	r2, [fp, #8]
 80078f4:	6053      	str	r3, [r2, #4]
 80078f6:	686b      	ldr	r3, [r5, #4]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	ea43 0308 	orr.w	r3, r3, r8
 8007900:	606b      	str	r3, [r5, #4]
 8007902:	4650      	mov	r0, sl
 8007904:	f7ff fa6a 	bl	8006ddc <__malloc_unlock>
 8007908:	e759      	b.n	80077be <_realloc_r+0x42>
 800790a:	68a1      	ldr	r1, [r4, #8]
 800790c:	2a24      	cmp	r2, #36	; 0x24
 800790e:	6129      	str	r1, [r5, #16]
 8007910:	68e1      	ldr	r1, [r4, #12]
 8007912:	bf18      	it	ne
 8007914:	f105 0218 	addne.w	r2, r5, #24
 8007918:	6169      	str	r1, [r5, #20]
 800791a:	bf09      	itett	eq
 800791c:	6922      	ldreq	r2, [r4, #16]
 800791e:	f104 0110 	addne.w	r1, r4, #16
 8007922:	61aa      	streq	r2, [r5, #24]
 8007924:	6960      	ldreq	r0, [r4, #20]
 8007926:	bf02      	ittt	eq
 8007928:	f105 0220 	addeq.w	r2, r5, #32
 800792c:	f104 0118 	addeq.w	r1, r4, #24
 8007930:	61e8      	streq	r0, [r5, #28]
 8007932:	e7d1      	b.n	80078d8 <_realloc_r+0x15c>
 8007934:	463a      	mov	r2, r7
 8007936:	4621      	mov	r1, r4
 8007938:	e7ce      	b.n	80078d8 <_realloc_r+0x15c>
 800793a:	4621      	mov	r1, r4
 800793c:	4638      	mov	r0, r7
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	f7ff ff02 	bl	8007748 <memmove>
 8007944:	9b01      	ldr	r3, [sp, #4]
 8007946:	e7cd      	b.n	80078e4 <_realloc_r+0x168>
 8007948:	18c7      	adds	r7, r0, r3
 800794a:	45b8      	cmp	r8, r7
 800794c:	dc20      	bgt.n	8007990 <_realloc_r+0x214>
 800794e:	68cb      	ldr	r3, [r1, #12]
 8007950:	688a      	ldr	r2, [r1, #8]
 8007952:	60d3      	str	r3, [r2, #12]
 8007954:	609a      	str	r2, [r3, #8]
 8007956:	4628      	mov	r0, r5
 8007958:	68eb      	ldr	r3, [r5, #12]
 800795a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800795e:	60d3      	str	r3, [r2, #12]
 8007960:	609a      	str	r2, [r3, #8]
 8007962:	1f32      	subs	r2, r6, #4
 8007964:	2a24      	cmp	r2, #36	; 0x24
 8007966:	d843      	bhi.n	80079f0 <_realloc_r+0x274>
 8007968:	2a13      	cmp	r2, #19
 800796a:	d93f      	bls.n	80079ec <_realloc_r+0x270>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	2a1b      	cmp	r2, #27
 8007970:	60ab      	str	r3, [r5, #8]
 8007972:	6863      	ldr	r3, [r4, #4]
 8007974:	60eb      	str	r3, [r5, #12]
 8007976:	d824      	bhi.n	80079c2 <_realloc_r+0x246>
 8007978:	f105 0010 	add.w	r0, r5, #16
 800797c:	f104 0308 	add.w	r3, r4, #8
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	6002      	str	r2, [r0, #0]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	6042      	str	r2, [r0, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	6083      	str	r3, [r0, #8]
 800798c:	46a9      	mov	r9, r5
 800798e:	e756      	b.n	800783e <_realloc_r+0xc2>
 8007990:	4580      	cmp	r8, r0
 8007992:	4607      	mov	r7, r0
 8007994:	dddf      	ble.n	8007956 <_realloc_r+0x1da>
 8007996:	4611      	mov	r1, r2
 8007998:	4650      	mov	r0, sl
 800799a:	f7fe ffff 	bl	800699c <_malloc_r>
 800799e:	4607      	mov	r7, r0
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d0ae      	beq.n	8007902 <_realloc_r+0x186>
 80079a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80079a8:	f1a0 0208 	sub.w	r2, r0, #8
 80079ac:	f023 0301 	bic.w	r3, r3, #1
 80079b0:	444b      	add	r3, r9
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d120      	bne.n	80079f8 <_realloc_r+0x27c>
 80079b6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80079ba:	f027 0703 	bic.w	r7, r7, #3
 80079be:	4437      	add	r7, r6
 80079c0:	e73d      	b.n	800783e <_realloc_r+0xc2>
 80079c2:	68a3      	ldr	r3, [r4, #8]
 80079c4:	2a24      	cmp	r2, #36	; 0x24
 80079c6:	612b      	str	r3, [r5, #16]
 80079c8:	68e3      	ldr	r3, [r4, #12]
 80079ca:	bf18      	it	ne
 80079cc:	f105 0018 	addne.w	r0, r5, #24
 80079d0:	616b      	str	r3, [r5, #20]
 80079d2:	bf09      	itett	eq
 80079d4:	6923      	ldreq	r3, [r4, #16]
 80079d6:	f104 0310 	addne.w	r3, r4, #16
 80079da:	61ab      	streq	r3, [r5, #24]
 80079dc:	6962      	ldreq	r2, [r4, #20]
 80079de:	bf02      	ittt	eq
 80079e0:	f105 0020 	addeq.w	r0, r5, #32
 80079e4:	f104 0318 	addeq.w	r3, r4, #24
 80079e8:	61ea      	streq	r2, [r5, #28]
 80079ea:	e7c9      	b.n	8007980 <_realloc_r+0x204>
 80079ec:	4623      	mov	r3, r4
 80079ee:	e7c7      	b.n	8007980 <_realloc_r+0x204>
 80079f0:	4621      	mov	r1, r4
 80079f2:	f7ff fea9 	bl	8007748 <memmove>
 80079f6:	e7c9      	b.n	800798c <_realloc_r+0x210>
 80079f8:	1f32      	subs	r2, r6, #4
 80079fa:	2a24      	cmp	r2, #36	; 0x24
 80079fc:	d82e      	bhi.n	8007a5c <_realloc_r+0x2e0>
 80079fe:	2a13      	cmp	r2, #19
 8007a00:	d929      	bls.n	8007a56 <_realloc_r+0x2da>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	2a1b      	cmp	r2, #27
 8007a06:	6003      	str	r3, [r0, #0]
 8007a08:	6863      	ldr	r3, [r4, #4]
 8007a0a:	6043      	str	r3, [r0, #4]
 8007a0c:	d80e      	bhi.n	8007a2c <_realloc_r+0x2b0>
 8007a0e:	f100 0308 	add.w	r3, r0, #8
 8007a12:	f104 0208 	add.w	r2, r4, #8
 8007a16:	6811      	ldr	r1, [r2, #0]
 8007a18:	6019      	str	r1, [r3, #0]
 8007a1a:	6851      	ldr	r1, [r2, #4]
 8007a1c:	6059      	str	r1, [r3, #4]
 8007a1e:	6892      	ldr	r2, [r2, #8]
 8007a20:	609a      	str	r2, [r3, #8]
 8007a22:	4621      	mov	r1, r4
 8007a24:	4650      	mov	r0, sl
 8007a26:	f7ff fdbf 	bl	80075a8 <_free_r>
 8007a2a:	e76a      	b.n	8007902 <_realloc_r+0x186>
 8007a2c:	68a3      	ldr	r3, [r4, #8]
 8007a2e:	2a24      	cmp	r2, #36	; 0x24
 8007a30:	6083      	str	r3, [r0, #8]
 8007a32:	68e3      	ldr	r3, [r4, #12]
 8007a34:	bf18      	it	ne
 8007a36:	f104 0210 	addne.w	r2, r4, #16
 8007a3a:	60c3      	str	r3, [r0, #12]
 8007a3c:	bf09      	itett	eq
 8007a3e:	6923      	ldreq	r3, [r4, #16]
 8007a40:	f100 0310 	addne.w	r3, r0, #16
 8007a44:	6103      	streq	r3, [r0, #16]
 8007a46:	6961      	ldreq	r1, [r4, #20]
 8007a48:	bf02      	ittt	eq
 8007a4a:	f100 0318 	addeq.w	r3, r0, #24
 8007a4e:	f104 0218 	addeq.w	r2, r4, #24
 8007a52:	6141      	streq	r1, [r0, #20]
 8007a54:	e7df      	b.n	8007a16 <_realloc_r+0x29a>
 8007a56:	4603      	mov	r3, r0
 8007a58:	4622      	mov	r2, r4
 8007a5a:	e7dc      	b.n	8007a16 <_realloc_r+0x29a>
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	f7ff fe73 	bl	8007748 <memmove>
 8007a62:	e7de      	b.n	8007a22 <_realloc_r+0x2a6>
 8007a64:	4637      	mov	r7, r6
 8007a66:	e6ea      	b.n	800783e <_realloc_r+0xc2>
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	431f      	orrs	r7, r3
 8007a6e:	f8c9 7004 	str.w	r7, [r9, #4]
 8007a72:	6853      	ldr	r3, [r2, #4]
 8007a74:	f043 0301 	orr.w	r3, r3, #1
 8007a78:	6053      	str	r3, [r2, #4]
 8007a7a:	e6fc      	b.n	8007876 <_realloc_r+0xfa>
 8007a7c:	20000118 	.word	0x20000118

08007a80 <__ascii_wctomb>:
 8007a80:	b149      	cbz	r1, 8007a96 <__ascii_wctomb+0x16>
 8007a82:	2aff      	cmp	r2, #255	; 0xff
 8007a84:	bf8b      	itete	hi
 8007a86:	238a      	movhi	r3, #138	; 0x8a
 8007a88:	700a      	strbls	r2, [r1, #0]
 8007a8a:	6003      	strhi	r3, [r0, #0]
 8007a8c:	2001      	movls	r0, #1
 8007a8e:	bf88      	it	hi
 8007a90:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a94:	4770      	bx	lr
 8007a96:	4608      	mov	r0, r1
 8007a98:	4770      	bx	lr
	...

08007a9c <_sbrk>:
 8007a9c:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <_sbrk+0x14>)
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	6819      	ldr	r1, [r3, #0]
 8007aa2:	b909      	cbnz	r1, 8007aa8 <_sbrk+0xc>
 8007aa4:	4903      	ldr	r1, [pc, #12]	; (8007ab4 <_sbrk+0x18>)
 8007aa6:	6019      	str	r1, [r3, #0]
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	4402      	add	r2, r0
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	4770      	bx	lr
 8007ab0:	200006e4 	.word	0x200006e4
 8007ab4:	20000890 	.word	0x20000890

08007ab8 <_init>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	bf00      	nop
 8007abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007abe:	bc08      	pop	{r3}
 8007ac0:	469e      	mov	lr, r3
 8007ac2:	4770      	bx	lr

08007ac4 <_fini>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	bf00      	nop
 8007ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	469e      	mov	lr, r3
 8007ace:	4770      	bx	lr
